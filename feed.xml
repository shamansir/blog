<?xml version="1.0" encoding="UTF-8"?>

    <feed xmlns="http://www.w3.org/2005/Atom">
        <title>No word about onion</title>
        <subtitle>shaman.sir's telling you about stuff</subtitle>
        <link rel="alternate" href="http://shamansir.github.io/blog/" />
        <link rel="self" href="http://shamansir.github.io/blog/feed.xml" type="application/atom+xml" />
        <id>http://shamansir.github.io/blog/</id>
        <updated>2014-09-07T23:14:05Z</updated>
        
        <author>
            <name>Ulric Wilfred</name>
            <email>shaman.sir@gmail.com</email>
            <uri>http://shamansir.github.io/blog/</uri>
        </author>
        
        
            <entry>
                <title>Generating Functional Parsers</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/generating-functional-parsers/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/generating-functional-parsers/</id>
                <updated>2014-09-06T23:14:00Z</updated>
                
                <summary type="html">Are you interested in a functional approach to parsers generation? Well, I&#39;m sure you do, even if, at your side, you&#39;re not sure what it means exactly. It&#39;s just because anything that connects parsers and functional programming in practice can be nothing but joyful...</summary>
                <content type="html">&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; The author of this text is still and eternally non-native English-writer, so please excuse him for his grammar errors, mistypes and stupid bravity without any malice, but please consider correcting his mistakes &lt;a href=&#34;mailto://shaman.sir@gmail.com&#34;&gt;using his e-mail&lt;/a&gt; without any commiseration. (TODO: Remove this portion of text when everything wrong will be fixed).&lt;/p&gt;

&lt;p&gt;Are you interested in a functional approach to parsers generation? Well, I&amp;rsquo;m sure you do, even if, at your side, you&amp;rsquo;re not sure what it means exactly. It&amp;rsquo;s just because anything that connects parsers and functional programming in practice can be nothing but joyful&amp;hellip; Though, I&amp;rsquo;ll try to be very short in sentencing (is there a word like this?), to be sure not to bore you, if it ever may happen. Also in near future I&amp;rsquo;ll provide you with few rather good alternatives to reading this short-sentenced article.&lt;/p&gt;

&lt;p&gt;Some links to keep in your background tabs while reading this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/shamansir/pegjs-fn&#34;&gt;peg.js-fn repository at github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/dmajda/pegjs&#34;&gt;peg.js repository at github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/shamansir/40eaffb802beaefd9443&#34;&gt;all operators in one gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/shamansir/7348144#file-arithmetics-parser-pegjs-fn-js&#34;&gt;the generated parser example&lt;/a&gt; (&lt;a href=&#34;https://gist.github.com/shamansir/7348144#file-arithmetics-pegjs&#34;&gt;source&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/shamansir/7348144&#34;&gt;comparison&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/shamansir/c9738715840775821988#file-arithmetics-parser-pegjs-fn-js&#34;&gt;the generated parser example – 2&lt;/a&gt; (&lt;a href=&#34;https://gist.github.com/shamansir/c9738715840775821988#file-arithmetics-pegjs&#34;&gt;source&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/shamansir/c9738715840775821988&#34;&gt;comparison&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part-1.-story.&#34;&gt;Part 1. Story.&lt;/h1&gt;
&lt;p&gt;Have you tried to read a parser code, generated with a common parser generator? In most cases it&amp;rsquo;s an unreadable crap, especially in comparison to parser grammar you composed. Though what happens is actually right – because the generated parser is totally not intended to be readable by human at all, but parse as fast as possible. Even though the parser code may be self-repeatable in a lot of places and may weight much more KBs or even MBs because of this.&lt;/p&gt;

&lt;p&gt;In most cases, a generator takes your grammar, walks over the AST, finds some creepy code template for every used operator, generates a lot of variables named in a way like &lt;code&gt;__myParserStackVar257&lt;/code&gt;, injects your values into these templates using these variables, and pushes the filled templates inline, one by one, into the resulting file. Sometimes it minifies a code by grouping templates with functions for every rule, or, in better case, uses binary code, which is though, even less readable.&lt;/p&gt;

&lt;p&gt;My last study is based on the question: &amp;ldquo;What if there would be a parser generator which  generates the human-readable code, as folded as possible, less aimed to fastest speed but more to smallest size?&amp;rdquo;. May be there &lt;em&gt;actually is&lt;/em&gt; one (or two), but I’m not sure in amount of how &lt;em&gt;functional&lt;/em&gt; they are.&lt;/p&gt;

&lt;p&gt;It started two years ago, actually I was in need of some specific JS-driven-parser, so I discovered &lt;a href=&#34;http://github.com/dmajda/pegjs&#34;&gt;peg.js&lt;/a&gt; by David Majda and wrote myself a custom grammar. And a parser, which used this grammar as origin, appeared to have a weight of several MBs (!) in result, in my case – so I though I should definitely try to optimize it. The size, not the speed. Here&amp;rsquo;s the exact point where the mentioned question appeared in my head. So I rewrote the generating part of peg.js, considering David&amp;rsquo;s code was quite readable (not the generated one, though – still, the latter one followed the Great Parsers Rule of Non-Readability; and actually there was no binary code support at that point of peg.js development).&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s skip long stories and I&amp;rsquo;ll show you the resulting code example. And the comparison with the original code and binary code. The source is arithmetics grammar, given below.&lt;/p&gt;

&lt;p&gt;You may open this image in new tab (right click &amp;rarr; Open in new Tab) to see it in full size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/generating-functional-parsers/comparison.png&#34; alt=&#34;Comparison of generated parsers&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;peg&#34;&gt;&amp;#x2F;*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * &amp;quot;2*(3+4)&amp;quot;. The parser generated from this grammar then computes their value.
 *&amp;#x2F;

start
  = additive

additive
  = left:multiplicative &amp;quot;+&amp;quot; right:additive { return left + right; }
  &amp;#x2F; multiplicative

multiplicative
  = left:primary &amp;quot;*&amp;quot; right:multiplicative { return left * right; }
  &amp;#x2F; primary

primary
  = integer
  &amp;#x2F; &amp;quot;(&amp;quot; additive:additive &amp;quot;)&amp;quot; { return additive; }

integer &amp;quot;integer&amp;quot;
  = digits:[0-9]+ { return parseInt(digits.join(&amp;quot;&amp;quot;), 10); }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you see, the one on the right is much much more readable and compact. Though yeah, this variant of parser is also much slower, but I do not consider this fact as a failure of my version, since the aim was not to focus on speed at all. To forget about it completely, why not – a life in digital age makes us learn that at some future point your optimized code will work for user at almost the same speed as similar non-optimized one. So, if  the point of your research is some moment in next ten years or so, you may freely omit the time factor&amp;hellip; ;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Actually I know that main cause of this speed decrease is in the fact that generated parsers are overwhelmingly exception-driven (yes they do, which means some largely re-used &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; blocks mentioned later in this article, but is does not affect operators or rules code a lot) and it&amp;rsquo;s a known common performance flaw of JS engines, which may quite easily be solved with hacks – but using them will break parsers readability just in favor of a single language, so I won&amp;rsquo;t do it in this article, since it&amp;rsquo;s more a theoretical one. Anyway, you may better replace it with some similar code, with your own hands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I consider innovative is massive usage of partial function application in generated code and, as it appeared in the end, the overall simplicity and functional beauty of operators&amp;#39; code &amp;lsquo;mini-patterns&amp;rsquo;. Most part of my life I am truly a modest guy, so please note that I overcome myself to make you pay proper attention to the benefits of the approach). And also, without David&amp;rsquo;s hard work there&amp;rsquo;d be no basement for me to build on. No, false comparison. No walls, fundament, finely tuned electricity network, gas tubes system, properly configured and built water system, to put my roof on. That&amp;rsquo;s closer.&lt;/p&gt;

&lt;p&gt;I named it &lt;code&gt;peg.js-fn&lt;/code&gt; and all the code is located &lt;a href=&#34;&#34;&gt;at github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since people will probably ask, I need to mention that, of course, all of peg.js tests are successfully passed by peg.js-fn.&lt;/p&gt;

&lt;p&gt;So the third part of the article is about the structure of generated parser code, in details, on how it works from the inside, and a second one is a just a list of all 18 operators&amp;#39; code snippets with short comments. Just in case I&amp;rsquo;ll get your interest in internals of the approach.&lt;/p&gt;
&lt;h1 id=&#34;part-2.-code.-parsing-operators.&#34;&gt;Part 2. Code. Parsing operators.&lt;/h1&gt;
&lt;p&gt;The main fuel for parsing process in &lt;code&gt;peg.js-fn&lt;/code&gt; is &lt;em&gt;partial function application&lt;/em&gt; – this power is achieved with an ability of slightly modified functions to be called twice and to get all of the required arguments saved at first call, and second one just says &amp;ldquo;please apply the arguments you&amp;rsquo;ve stored before and call this function NOW, I mean IMMEDIATELY&amp;rdquo;. Actually, it&amp;rsquo;s just a sub-case of &lt;em&gt;partial application&lt;/em&gt;, so I call this variant with special name, &amp;ldquo;_postponed functions_&amp;rdquo; (or &amp;ldquo;_postponable_&amp;rdquo;, whatever you like). The way its done is not important for this article, if you really want to know, though, think of &lt;code&gt;Function.bind&lt;/code&gt; or take a look at generated parser examples. All the parsers we produce in our Great Parser Factory are powered with this fine-selected fuel. This moves us the fastest way towards both parser readability and execution economy, since it allow us to write, say,&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;sequence(match(&amp;#x27;Gand&amp;#x27;), choice(match(&amp;#x27;alf&amp;#x27;), match(&amp;#x27;hi&amp;#x27;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;without actually performing both matches inside the &lt;code&gt;choice&lt;/code&gt; operator – they provide us an option to skip unrequired call of the second &lt;code&gt;match&lt;/code&gt; function, when we got &lt;code&gt;&amp;#39;Gandalf&amp;#39;&lt;/code&gt;, but not &lt;code&gt;&amp;#39;Ghandi&amp;#39;&lt;/code&gt; as an input string given to our tiny little parser.&lt;/p&gt;

&lt;p&gt;This way, the code inside &lt;code&gt;choice&lt;/code&gt; operator may look like:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function choice(f1, f2) {
    return function() {
        return f1() || f2();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So JavaScript engine will skip second call if first one returned some value with enough truthful meaning for operator. Both readable and economic, preciousss!!&lt;/p&gt;

&lt;p&gt;Following this example you might observe that every operator in generated parsers is a postponed function (at least, but not at last). I&amp;rsquo;ll list them all below, one by one, all &lt;em&gt;The Mighty 18&lt;/em&gt; of them.&lt;/p&gt;

&lt;p&gt;They are intended to impress you at the first glance, so no need in getting everything to the deepest deep – later you&amp;rsquo;ll have a chance either to dig into any level of details you&amp;rsquo;ll find required, or freely drop it as unuseful just after this chapter&amp;rsquo;s end. [Or you may drop it even here, why bother?]&lt;/p&gt;

&lt;p&gt;A quick look into global things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input&lt;/code&gt; variable contains text to parse;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ilen&lt;/code&gt; variable contains input length;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cc()&lt;/code&gt; function returns current character in parser position;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pos&lt;/code&gt; variable contains current parser position;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ppos&lt;/code&gt; variable contains parser position before execution of current rule, may be forcely overwritten;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EOI&lt;/code&gt; is just an alias for &lt;em&gt;end of input&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;failed(expected, found)&lt;/code&gt; function throws &lt;code&gt;MatchFailed&lt;/code&gt; exception from the inside, but also fills it with with important information like line number and character number in the souce text where the failure occured;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;safe(func)&lt;/code&gt; calls &lt;code&gt;func&lt;/code&gt;, but preserves (подавляет) &lt;code&gt;MatchFailed&lt;/code&gt; exceptions occured when &lt;code&gt;func&lt;/code&gt; was called, while saving them to error stack;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cctx&lt;/code&gt; object holds variables accessible at this nesting level and above (through &lt;code&gt;prototype&lt;/code&gt; chain); details of that will be covered later, if you&amp;rsquo;ll ever need them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inctx(func)&lt;/code&gt; function creates a personal nesting level of context for the provided function, when function will finish its execution, level will be returned back;maame as above, details will be covered below, don&amp;rsquo;t you worry;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;0. example&lt;/h3&gt;
&lt;p&gt;This example demonstrates the template used in subsections below to describe you the every next operator. You&amp;rsquo;ll find the short but lyrical description in this place. If you are unfamiliar with PEG syntax while you&amp;rsquo;re still reading at this point, please undoubtedly follow &lt;a href=&#34;https://github.com/dmajda/pegjs#grammar-syntax-and-semantics&#34;&gt;this link&lt;/a&gt; to find out the basics (though it&amp;rsquo;s a bit customized version we use here, if you need the real world standard – better follow &lt;a href=&#34;http://en.wikipedia.org/wiki/Parsing_expression_grammar&#34;&gt;this specification&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;PEG syntax for this operator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;example of PEG rule, composed using this operator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;JS code, as it appears in generated parser for the above rule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function example() {
    &amp;#x2F;&amp;#x2F; a code of the operator function, with the postponing
    &amp;#x2F;&amp;#x2F; wrapper omitted, since it&amp;#x27;s the same in every one of them
    &amp;#x2F;&amp;#x2F; and programmer may wrap all of the operators later him-
    &amp;#x2F;&amp;#x2F; herself this way... and also anyway it is described in
    &amp;#x2F;&amp;#x2F; very details in the next chapter
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ch&#34;&gt;1. ch&lt;/h3&gt;
&lt;p&gt;This operator hoists the next character from the text. If current position is greater than input length, it fails with telling that parser expected any symbol and got end-of-input instead. If next character is what we searched for, input position is advanced by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = . . .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(ch(), ch(), ch());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function ch() {
  if (pos &amp;gt;= ilen) failed(ANY, EOI);
  return input[pos++];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;match&#34;&gt;2. match&lt;/h3&gt;
&lt;p&gt;This operator tries to match next portion of an input with given string, using string length to consider the size of a portion to test. If the match passed, input position is advanced by the very same value. If input position plus string length exceeds input length – parser fails saying it reached end-of-input. If input does not contains the given string, parser fails saying current character and expected string. (It is possible to provide which part of input exactly was different, but original &lt;code&gt;peg.js&lt;/code&gt; tests do not cover it and it&amp;rsquo;s commonly considered optional, so it may be a homework for a reader).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = . &amp;#39;oo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(any(), match(&amp;#39;oo&amp;#39;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function match(str) {
  var slen = str.length;
  if ((pos + slen) &amp;gt; ilen) { failed(str, EOI); }
  if (input.substr(pos, slen) === str) {
    pos += slen; return str;
  }
  failed(str, cc());
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;re&#34;&gt;3. re&lt;/h3&gt;
&lt;p&gt;This operator tries to match using symbols-driven regular expression (the only allowed in &lt;code&gt;peg.js&lt;/code&gt;). The regular expression may have some description provided, then this description will be used to describe a failure. On the other branches, this operator logic is similar to the one before.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;[&amp;lt;symbols&amp;gt;]&lt;/code&gt;, &lt;code&gt;[^&amp;lt;symbols&amp;gt;]&lt;/code&gt;, &lt;code&gt;[&amp;lt;symbol_1&amp;gt;-&amp;lt;symbol_n&amp;gt;]&lt;/code&gt;, &lt;code&gt;[^&amp;lt;symbol_1&amp;gt;-&amp;lt;symbol_n&amp;gt;]&lt;/code&gt;, &lt;code&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;i&lt;/code&gt;, &lt;code&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = [^f-o]+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = some(re(/[^f-o]/));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function re(rx, desc) {
  var res, desc = desc || rx.source;
  if (res = rx.exec(input.substr(pos))) {
    if (res.index !== 0) failed(desc, cc());
    pos += res[0].length; return res[0];
  } else failed(desc, cc());
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;text&#34;&gt;4. text&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;text&lt;/code&gt; operator executes the other operator inside as normally, but always returns the matched portion of input text instead of what the inner operator decided to return. If there will be failures during the inner operator parsing process, return code will not ever be reached.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;$&amp;lt;expression&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = $(. . .)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = text(seqnc(ch(), ch(), ch()));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function text(f) {
  var ppos = pos;
  f(); return input.substr(ppos, pos-ppos);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;maybe&#34;&gt;5. maybe&lt;/h3&gt;
&lt;p&gt;This operator ensures that some other operator at least tried to be executed, but absorbs the failure if it happened. In other words, it makes other operator optional. &lt;code&gt;safe&lt;/code&gt; function is the internal function to absorb operator failures and execute some callback if failure happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;expression&amp;gt;?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = &amp;#39;f&amp;#39;? (. .)?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt;
&lt;code&gt;rules.start  = seqnc(maybe(match(&amp;#39;f&amp;#39;)),&lt;/code&gt;
&lt;code&gt;maybe(seqnc(ch(), ch())));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function maybe(f) {
  var missed = 0,
      res = safe(f, function() { missed = 1; });
  if (missed) return &amp;#x27;&amp;#x27;;
  return res;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;some&#34;&gt;6. some&lt;/h3&gt;
&lt;p&gt;This operator executes other operator the most possible number of times (but at least one) until it fails (without failing the parser). If it failed at the moment of a first call – then the whole parser failed. If same operator failed during any of the next calls, failure is absorbed without advancing parsing position further. This logic is often called &amp;ldquo;one or more&amp;rdquo; and works the same way in regular expressions. In our case, we achieve the effect by calling the operator itself normally and then combining it with immediately-called&lt;code&gt;any&lt;/code&gt; (&amp;ldquo;zero or more&amp;rdquo;) operator described just below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;some&lt;/code&gt; operator returns the array of matches on success, with at least one element inside.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;expression&amp;gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = &amp;#39;f&amp;#39;? .+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(maybe(match(&amp;#39;f&amp;#39;)), some(ch()));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function some(f) {
  return [f()].concat(any(f)());
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;any&#34;&gt;7. any&lt;/h3&gt;
&lt;p&gt;This operator executes other operator the most possible number of times, but even no matches at all will suffice as no failure. &lt;code&gt;any&lt;/code&gt; operator also returns an array of matches, but the empty one if no matches succeeded.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;expression&amp;gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = &amp;#39;f&amp;#39;+ &amp;#39;o&amp;#39;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt;  &lt;code&gt;rules.start = seqnc(some(match(&amp;#39;f&amp;#39;)), any(match(&amp;#39;o&amp;#39;)));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function any(f) {
  var s = [],
      missed = 0,
      on_miss = function() { missed = 1; }
  while (!missed) {
    s.push(safe(f, on_miss));
  }
  if (missed) s.splice(-1);
  return s;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;and&#34;&gt;8. and&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;and&lt;/code&gt; operator executes other operator almost normally, but returns an empty string if it matched and failures expecting end-of-input if it failed. Also, everything happens without advancing the parser position. &lt;code&gt;pos&lt;/code&gt; variable here is global parser position and it is rolled back after the execution of inner operator. &lt;code&gt;nr&lt;/code&gt; flag is &amp;lsquo;no-report&amp;rsquo; flag, it is used to skip storing parsing errors data (like their postions), or else they all stored in order of appearance, even if they don&amp;rsquo;t lead to global parsing failure.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to say here that, honestly speaking, yes, &lt;code&gt;peg.js-fn&lt;/code&gt; is aldo driven by exceptions, among with postponed function. One special class of exception, named &lt;code&gt;MatchFailed&lt;/code&gt;. It is raised on every local parse failure, but sometimes it is absorbed by operators wrapping it (i.e. &lt;code&gt;safe&lt;/code&gt; function contains &lt;code&gt;try {...} catch(MatchFailed) {...}&lt;/code&gt; inside), and sometimes their logic tranfers it to the top (global) level which causes the final global parse failure and parsing termination. The latter happens once and only once for every new input/parser execution, of course.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;amp;&amp;lt;expression&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = &amp;amp;&amp;#39;f&amp;#39; &amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(and(match(&amp;#39;f&amp;#39;)), match(&amp;#39;foo&amp;#39;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function and(f) {
  var ppos = pos, missed = 0;
  nr = 1; safe(f, function() {
    missed = 1;
  }); nr = 0;
  pos = ppos;
  if (missed) failed(EOI, cc());
  return &amp;#x27;&amp;#x27;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;not&#34;&gt;9. not&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;not&lt;/code&gt; operator acts the same way as &lt;code&gt;and&lt;/code&gt; operator, but in a bit inverse manner. It also ensures not to advance the position, but returns an empty string when match failed and fails with expecting end-of-input, if match succeeded.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;!&amp;lt;expression&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = !&amp;#39;g&amp;#39; &amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(not(match(&amp;#39;g&amp;#39;)), match(&amp;#39;foo&amp;#39;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function not(f) {
  var ppos = pos, missed = 0;
  nr = 1; safe(f, function() {
    missed = 1;
  }); nr = 0;
  pos = p_pos;
  if (missed) return &amp;#x27;&amp;#x27;;
  failed(EOI, cc());
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;seqnc&#34;&gt;10. seqnc&lt;/h3&gt;
&lt;p&gt;This operator executes a sequence of other operators of any kind, and this sequence may have any (but finite) length. If one of the given operators failed during execution, the sequence is interrupted immediately and the exception is thrown. If all operators performed with no errors, an array of their results is returned.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;expression_1&amp;gt; &amp;lt;expression_2&amp;gt; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = . &amp;#39;oo&amp;#39; &amp;#39;bar&amp;#39;?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(ch(), match(&amp;#39;oo&amp;#39;), maybe(match(&amp;#39;bar&amp;#39;)));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function seqnc(&amp;#x2F;*f...*&amp;#x2F;) {
  var ppos = pos;
  var fs = arguments,
      s = [],
      on_miss = function(e) {
                  pos = ppos; throw e; };
  for (var fi = 0; fl = fs.length;
        fi &amp;lt; fl; fi++) {
      s.push(safe(fs[fi], on_miss));
  }
  return s;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;choice&#34;&gt;11. choice&lt;/h3&gt;
&lt;p&gt;This operator works similarly to pipe (&lt;code&gt;|&lt;/code&gt;) operator in regular expressions – it tries to execute the given operators one by one, returning (actually, without advancing) the parsing position back in the end of each iteration.  If there was a success when one of these operators was executed, &lt;code&gt;choice&lt;/code&gt; immediately exits with the successful result. If all operators failed, &lt;code&gt;choice&lt;/code&gt; throws a &lt;code&gt;MatchFailed&lt;/code&gt; exception.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;expression_1&amp;gt; / &amp;lt;expression_2&amp;gt; / ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = . (&amp;#39;aa&amp;#39; / &amp;#39;oo&amp;#39; / &amp;#39;ee&amp;#39;) .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(ch(), choice(match(&amp;#39;aa&amp;#39;), match(&amp;#39;oo&amp;#39;), match(&amp;#39;ee&amp;#39;)), ch());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function choice(&amp;#x2F;*f...*&amp;#x2F;) {
  var fs = arguments,
      missed = 0,
      my_e = null,
      on_miss = function(e) { my_e = e; missed = 1; };
  for (var fi = 0, fl = fs.length;
      fi &amp;lt; fl; fi++) {
    var res = safe(fs[fi], on_miss);
    if (!missed) return res;
    missed = 0;
  }
  throw my_e;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;action&#34;&gt;12. action&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;peg.js&lt;/code&gt; any rule or sequence may have some javascript code assigned to it, so it will be executed on a successful match event, and in latter case this code has the ability to manipulate the match result it receives and to return the caller something completely different instead.&lt;/p&gt;

&lt;p&gt;Commonly the operators which themselves execute some other, inner operators, (and weren&amp;rsquo;t overriden) return the array containing their result values, if succeeded. Other operators return plain values. With &lt;code&gt;action&lt;/code&gt;, both these types of results may be replaced with any crap developer will like.&lt;/p&gt;

&lt;p&gt;By the way, the code also receives all the values returned from labelled operators (on the same nesting level and above) as the variables with the names equal to the labels. See more information on labelling below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;expression&amp;gt; { &amp;lt;javascript-code&amp;gt; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = &amp;#39;fo&amp;#39; (. { return offset(); })&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(match(&amp;#39;fo&amp;#39;), action(ch(), function() { return offset(); }));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function action(f, code) {
  function inctx(function() {
    ppos = pos; var res;
    f(); res = code(cctx);
    if (res === null) { pos = ppos;
      failed(SOMETHING, NOTHING); }
    return res;
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;pre&#34;&gt;13. pre&lt;/h3&gt;
&lt;p&gt;The rule in &lt;code&gt;peg.js&lt;/code&gt; also may be prefixed/precessed with some JavaScript code which is executed before running all the inner rule operators. This JavaScript code may check some condition(s) and decide, if it&amp;rsquo;s ever has sense to run this rule, with returning a boolean value. Of course, this code does not advances the parser position.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;amp; { &amp;lt;javascript-code&amp;gt; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = &amp;amp;{ return true; } &amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(pre(function() { return true; }), match(&amp;#39;foo&amp;#39;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function pre(code) {
  ppos = pos;
  return code(cctx) ? &amp;#x27;&amp;#x27; : failed(cc(), EOI);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xpre&#34;&gt;14. xpre&lt;/h3&gt;
&lt;p&gt;Same as &lt;code&gt;pre&lt;/code&gt; operator, but in this case, reversely, &lt;code&gt;false&lt;/code&gt; returned says it&amp;rsquo;s ok to execute the rule this operator precedes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;! { &amp;lt;javascript-code&amp;gt; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = !{ return false; } &amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = seqnc(xpre(function() { return false; }), match(&amp;#39;foo&amp;#39;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function xpre(code) {
  ppos = pos;
  return code(cctx) ? failed(cc(), EOI) : &amp;#x27;&amp;#x27;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;label&#34;&gt;15. label&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;label&lt;/code&gt; operator allows to tag some expression with a name, which makes it&amp;rsquo;s result to be accessible to the JavaScript code through variable having the exact same name. Since you may execute JavaScript code in the end of any sequence operator &lt;code&gt;sqnc&lt;/code&gt; by wrapping it with &lt;code&gt;action&lt;/code&gt; operator, you may get access to these values from everywhere, and only bothering if current nesting level has access to the label you want to use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;name&amp;gt;:&amp;lt;expression&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start = a:. &amp;#39;oo&amp;#39; { return a + &amp;#39;bb&amp;#39;; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = action(seqnc(label(&amp;#39;a&amp;#39;, ch()), match(&amp;#39;oo&amp;#39;)), function(a) { return a + &amp;#39;bb&amp;#39;});&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function label(lbl, f) {
  return cctx[lbl] = f();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;rule&#34;&gt;16. Rule&lt;/h3&gt;
&lt;p&gt;This operator is different from others, because it just wraps a rule and calls its first wrapping operator immediately and nothing more. It only used to provide better readibility of parser code, so you (as well as parser itself) may link to any rule using &lt;code&gt;rules.&amp;lt;your_rule&amp;gt;&lt;/code&gt; reference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;rule_name&amp;gt; = &amp;lt;expression&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt;
&lt;code&gt;space = &amp;quot; &amp;quot;&lt;/code&gt;
&lt;code&gt;foo &amp;quot;three symbols&amp;quot; = . . .&lt;/code&gt;
&lt;code&gt;start = !space foo !space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt;
&lt;code&gt;rules.space = function() { return (match(&amp;#39; &amp;#39;))(); };&lt;/code&gt;
&lt;code&gt;rules.foo = function() { return (as(&amp;#39;three symbols&amp;#39;, seqnc(ch(), ch(), ch())))(); };&lt;/code&gt;
&lt;code&gt;rules.start = function() { return (seqnc(not(ref(rules.space)), ref(rules.foo), not(ref(rules.space))))(); };&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;rules.&amp;lt;rule_name&amp;gt; = function() {
  return (&amp;lt;root_operator_code&amp;gt;)();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ref&#34;&gt;17. ref&lt;/h3&gt;
&lt;p&gt;&amp;hellip;And if we plan to call some rule from some operator with &lt;code&gt;rules.&amp;lt;rule_name&amp;gt;&lt;/code&gt; reference, we need to make current context accessible from the inside. Context is those variables who accessible at this nesting level and above (nesting level is determined with brackets in grammar). This provided with some complex tricks, but we&amp;rsquo;ll keep them for those who want to know all the details – if you&amp;rsquo;re one of them, the next chapter is completely yours.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;rule_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt;
&lt;code&gt;fo_rule = &amp;#39;fo&amp;#39;&lt;/code&gt;
&lt;code&gt;start = fo_rule &amp;#39;o&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt;
&lt;code&gt;rules.fo_rule = function() { return (match(&amp;#39;fo&amp;#39;))(); };&lt;/code&gt;
&lt;code&gt;rules.start = function() { return (seqnc(ref(rules.fo_rule), match(&amp;#39;o&amp;#39;))(); };&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function ref = inctx;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;as&#34;&gt;18. as&lt;/h3&gt;
&lt;p&gt;The final operator creates an alias for a rule so it will be referenced with another name in error messages. And it&amp;rsquo;s the only purpose of this one, the last one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;code&gt;&amp;lt;rule_name&amp;gt; &amp;quot;&amp;lt;alias&amp;gt;&amp;quot; = &amp;lt;expression&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;example:&lt;/strong&gt; &lt;code&gt;start &amp;quot;blah&amp;quot; = &amp;#39;bar&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code:&lt;/strong&gt; &lt;code&gt;rules.start = function() { return (as(&amp;#39;blah&amp;#39;, match(&amp;#39;bar&amp;#39;)))(); };&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;function as(name, f) {
  alias = name; var res = f();
  alias = &amp;#x27;&amp;#x27;; return res;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here you go, the list is finished and I hope you now have the vision of a generated parser code as a LEGO-bricks, all types and kinds listed here. By the way, here&amp;rsquo;s the Gist with all operators code from above with no meaningless wrapping text: &lt;a href=&#34;https://gist.github.com/shamansir/40eaffb802beaefd9443&#34;&gt;click here&lt;/a&gt;. If you want to dig into details and tricks, the next chapter will cover them, but it is completely optional and on your own will.&lt;/p&gt;
&lt;h2 id=&#34;details&#34;&gt;Details&lt;/h2&gt;
&lt;p&gt;If you are reading this chapter, then seems you are interested in the deepest secrets of a generated parser. Please remember, that you are totally not ought to! And, to be honest, there are not secrets at all there, just a boring, almost bureaucratic, stuff. So if you accidentally started from this chapter (this article is huge, so I suppose it&amp;rsquo;s rather easy to get lost here – no panic&amp;hellip;), just head to the top and start from the beginning, go straight, and try to reach this very point from different direction – this way you&amp;rsquo;ll find yourself in much more comfortable situation.&lt;/p&gt;

&lt;p&gt;For those who haven&amp;rsquo;t left us – let&amp;rsquo;s start.&lt;/p&gt;

&lt;p&gt;A generated parser consists of several parts, in given order (later we will inspect each of them separately):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Global variables&lt;/em&gt;, just &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;pos&lt;/code&gt; (current parsing position) &amp;amp; &lt;code&gt;p_pos&lt;/code&gt;(previous parsing position) are here. And parsing &lt;code&gt;options&lt;/code&gt;. Four of them, and it&amp;rsquo;s actually enough. They&amp;rsquo;re accessible both to user code and parser code;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;User code&lt;/em&gt; from a parser grammar, wrapped in it&amp;rsquo;s own closure, so it will only have access to functions defined in this closure and global variables. It has no access to internal parser code, which is itself isolated in another closure. Though we store user code in an object, so parser will have access to it. Oh, if you wonder where from we got this code, it&amp;rsquo;s the one user may write in grammar prelude, inside &lt;code&gt;action&lt;/code&gt;s and for &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;xpre&lt;/code&gt; operator;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Parser closure&lt;/em&gt;, which, in its turn, consists of:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Rules&lt;/em&gt;, those ones, which were defined in a parser grammar and were converted to javascript code, same way as in examples for operators above, like &lt;code&gt;rules.space = function() { return (match(&amp;#39; &amp;#39;))(); };&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Operators&lt;/em&gt; code, presented exactly as above, but, of course, there are only the ones included, that were used in the rules above, at least once;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Internal parser variables&lt;/em&gt;, &lt;em&gt;Context management functions&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;parse()&lt;/code&gt; function&lt;/em&gt;, the only one exported to user;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;MatchFailed&lt;/code&gt;, &lt;code&gt;SyntaxError&lt;/code&gt; exceptions&lt;/em&gt; definition, &lt;em&gt;parse error handling code&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A call of the parser closure defined above, to prepare its variables only once for several parsing sessions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/shamansir/7348144&#34;&gt;Here&amp;rsquo;s the gist&lt;/a&gt; with the complete code of a parser generated using some simple grammar (also included).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s briefly look into every mentioned block and then finish with this impermissibly vast article:&lt;/p&gt;
&lt;h3 id=&#34;global-variables&#34;&gt;Global Variables&lt;/h3&gt;
&lt;p&gt;As it was said before, there&amp;rsquo;s only four of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input&lt;/code&gt; – contains the string that was passed to a &lt;code&gt;parse()&lt;/code&gt; function, so here it stays undefined and just provides global access to it, but surely it&amp;rsquo;s initialized with new value on every call to &lt;code&gt;parse()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pos&lt;/code&gt; – current parsing position in the &lt;code&gt;input&lt;/code&gt; string, it resets to 0 on every &lt;code&gt;parse()&lt;/code&gt; call and keeps unevenly increasing until reaches the length of current &lt;code&gt;input&lt;/code&gt; minus one, except the cases when any of fall-back operators were met (like &lt;code&gt;choice&lt;/code&gt; or  &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;pre&lt;/code&gt; or &lt;code&gt;xpre&lt;/code&gt; or &amp;hellip;), then it moves back a bit or stays at one place for some time, but still returns to increasing way just after that;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_pos&lt;/code&gt; (notice the underscore) – previous parsing position, a position in &lt;code&gt;input&lt;/code&gt; string where parser resided just before the execution of current operator. So for matching operators (&lt;code&gt;match&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;some&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;, &amp;hellip;), a string chunk between &lt;code&gt;input[p_pos]&lt;/code&gt; and &lt;code&gt;input[pos]&lt;/code&gt; is always a matched part of an input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; – options passed to &lt;code&gt;parse()&lt;/code&gt; function;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;user-code&#34;&gt;User Code&lt;/h3&gt;
&lt;p&gt;What is the user code, you ask? The user code is every piece of Javascript code user may specify in his grammar, collected in one place. Think of grammar prelude, &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;xpre&lt;/code&gt; operators. The complex problem here is that user should be able to access the results of labeled operators in current scope and only in current scope, and these labeled results should be converted to variables under the very same name. So:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;peg&#34;&gt;some_rule = a:&amp;#x27;a&amp;#x27; x:(z:&amp;#x27;z&amp;#x27; { return func_az(a, z); })
                  (b:&amp;#x27;b&amp;#x27; c:&amp;#x27;c&amp;#x27; { return func_axbc(a, x, b, c); })
                  (d:&amp;#x27;d&amp;#x27; (e:&amp;#x27;e&amp;#x27; { return func_axde(a, x, d, e); })
                         f:&amp;#x27;f&amp;#x27; { return func_axdf(a, x, d, f); })
            g:&amp;#x27;g&amp;#x27; { return func_axg(a, x, g); }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in this rule user code for every action should &amp;ldquo;see&amp;rdquo; only the variables mentioned in function title (so &lt;code&gt;func_az&lt;/code&gt; should only see labeled results &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;, and so on) and of course they should contain a proper result. In other words, every brackets pair creates a deeper level of context which &amp;ldquo;sees&amp;rdquo; all the values in contexts from the levels above, and two contexts on the same level can&amp;rsquo;t see each other, since they can not intersect. Plus, the code may &amp;ldquo;see&amp;rdquo; only the labels on the left, in its context, on the same level and above, since they are already calculated, since parser goes through rule from left to right.&lt;/p&gt;

&lt;p&gt;JavaScript is actually not very friendly to perversions like named parameters (Python, you are cool!), and, for the non-expandable parser code, like the one we describe in the article. We need to store the values and later pass them under required names to the wrapper of user code, but we can&amp;rsquo;t predict their names until we start parsing. But we want to isolate user code in functions aside from parser code, so everything private will not be visible to user not bacause of underscores, but thankfully to closures. Named parameters seem the only way to provide user with this functionality from the first sight.&lt;/p&gt;

&lt;p&gt;Same for the second sight, though. Same for the third.&lt;/p&gt;

&lt;p&gt;Still seems the only way. Or we&amp;rsquo;d should pass an object to every code block and ask user to refer to them as &lt;code&gt;some_obj.a&lt;/code&gt;, &lt;code&gt;some_obj.z&lt;/code&gt; etc., which is ugly and dishonest. May be we should drop this idea?&lt;/p&gt;

&lt;p&gt;But JS actually hides inside another ability we may use for the good – prototypes. This one is helpful to easily go up and down through user contexts. When user JS function is called, some object will already contain all current-level values, and hold the parent-context values in prototypes chain. When we go out of a nested context, we drop the last created object and switch to a parent prototype to be a current context object.&lt;/p&gt;

&lt;p&gt;So labels problem was solved another way, I decided to do the very same prototype travelling during conversion of a grammar to AST tree. And then I know which labels should be visible to user, I inject them directly into user function calls as properties of an object which holds current parsing-time context under known labels.&lt;/p&gt;

&lt;p&gt;Woof, seems we got it not so briefly here. But anyway this will help to explain some things below and you&amp;rsquo;re stll with me, so I&amp;rsquo;ll try to demonstrate it with an excerpt from Gist with parser example mentioned above:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;  &amp;#x2F;&amp;#x2F; This code encloses all of the user blocks (initializer and&amp;#x2F;or
  &amp;#x2F;&amp;#x2F; actions) in their own sandbox, so if there is an initializer,
  &amp;#x2F;&amp;#x2F; its inner variables will [only] be accessible to actions.
  &amp;#x2F;&amp;#x2F; This, however, requires an initializer not to have any
  &amp;#x2F;&amp;#x2F; first-level return statements (which has no sense, in its
  &amp;#x2F;&amp;#x2F; turn). Also, this approach keeps parser inner variables
  &amp;#x2F;&amp;#x2F; safe from user access, except the ones defined above.
  var __user_blocks = (function() {

    &amp;#x2F;&amp;#x2F; functions accessible only to user code
    function offset() { return p_pos; };
    function text() { return input.substring(p_pos, pos); };

    &amp;#x2F;* ########### USER CODE ########### *&amp;#x2F;

    &amp;#x2F;* ----------- INITIALIZER ----------- *&amp;#x2F;

    var user_var = 0;

    &amp;#x2F;* ----------- BLOCKS ----------- *&amp;#x2F;

    &amp;#x2F;&amp;#x2F; Blocks are grouped by rule name and id;
    &amp;#x2F;&amp;#x2F; they all get access to current context through `ctx`
    &amp;#x2F;&amp;#x2F; variable which they expand into their arguments.
    &amp;#x2F;&amp;#x2F; Arguments&amp;#x27; names are pre-calculated during
    &amp;#x2F;&amp;#x2F; parser generation process.

    return {
      &amp;quot;additive&amp;quot;: [
        function($ctx) {
          &amp;#x2F;&amp;#x2F; additive[0]
          return (function(left,right) {
             return left + right;
          })($ctx.left,$ctx.right);
        }
      ],
      &amp;quot;multiplicative&amp;quot;: [
        function($ctx) {
          &amp;#x2F;&amp;#x2F; multiplicative[0]
          return (function(left,right) {
             return left * right;
          })($ctx.left,$ctx.right);
        }
      ],
      &amp;quot;primary&amp;quot;: [
        function($ctx) {
          &amp;#x2F;&amp;#x2F; primary[0]
          return (function(additive) {
             return additive;
          })($ctx.additive);
        }
      ],
      &amp;quot;integer&amp;quot;: [
        function($ctx) {
          &amp;#x2F;&amp;#x2F; integer[0]
          return (function(digits) {
             return parseInt(digits, 10);
          })($ctx.digits);
        }
      ]
    };

  } })();

  &amp;#x2F;&amp;#x2F; ...

  &amp;#x2F;&amp;#x2F; this expression is evaluated before every parsing cycle
  var $f = __user_blocks();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All user code blocks are grouped by rule name, so each rule has it&amp;rsquo;s own array. We already traveled the grammar AST here, when we generated this parsing code, so we knew all the labels names and injected them to proper places. When user parses some input, we know an index of user block to call, so we pass current context to a function and call it, i.e. &lt;code&gt;__user_blocks.additive[0](cctx)&lt;/code&gt; (&lt;code&gt;cctx&lt;/code&gt;  variable holds current context).&lt;/p&gt;
&lt;h3 id=&#34;parser-closure&#34;&gt;Parser Closure&lt;/h3&gt;
&lt;p&gt;It just isolates parser code from user code. That&amp;rsquo;s it. Let&amp;rsquo;s move deeper.&lt;/p&gt;
&lt;h4 id=&#34;rules&#34;&gt;Rules&lt;/h4&gt;
&lt;p&gt;Every rule from grammar is encoded using operators (that stuff described in previous part), so this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;peg&#34;&gt;... other rules ...
additive
  = left:multiplicative &amp;quot;+&amp;quot; right:additive { return left + right; }
  &amp;#x2F; multiplicative
... some more rules ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;var rules = {}; (function() {

    &amp;#x2F;&amp;#x2F; ... other rules here ...

    rules.additive = function() {
      var _code = $f.additive;
      return (
        choice(
          action(
            seqnc(
              label(&amp;quot;left&amp;quot;,
                ref(rules.multiplicative)
              ),
              match(&amp;quot;+&amp;quot;),
              label(&amp;quot;right&amp;quot;,
                ref(rules.additive)
              )
            ),
            _code[0])
            &amp;#x2F;*{ return left + right; }*&amp;#x2F;,
          ref(rules.multiplicative)
        )
      ());
    }

    &amp;#x2F;&amp;#x2F; ... some more rules ...

})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$f&lt;/code&gt; is given a value of &lt;code&gt;__user_blocks()&lt;/code&gt; on every call to &lt;code&gt;parse()&lt;/code&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;operators&#34;&gt;Operators&lt;/h4&gt;
&lt;p&gt;All the operators were covered in details above, even with code examples, so for now you only should know that exceptionally the operators actually mentioned in rules are included here.&lt;/p&gt;

&lt;p&gt;Ok, there&amp;rsquo;s one more subtlety I need to tell you about. May be you recall I mentioned that operators are postponed functions. So every operator here is wrapped so that it&amp;rsquo;s first call only stores arguments passed and second call actually performs the function code with the stored data. This may be done in different ways, like using &lt;code&gt;Function.bind&lt;/code&gt;, for example. You may take a look at the Gist code to see which way it&amp;rsquo;s implemented in my case, but the way actually has no matter here, only the result matters. This, however is the clockwork which makes everything tick &lt;em&gt;in functional way&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cc()&lt;/code&gt; and &lt;code&gt;ref()&lt;/code&gt; functions mentioned in &lt;em&gt;&lt;a href=&#34;#Operators&#34;&gt;Operators&lt;/a&gt;&lt;/em&gt; chapter are also defined here.&lt;/p&gt;
&lt;h4 id=&#34;internal-parser-variables&#34;&gt;Internal Parser Variables&lt;/h4&gt;
&lt;p&gt;Parser needs to store some private things, of course. Each of this variables below resets to initial state at the start of each parsing cycle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache&lt;/code&gt; object stores the rules results by position in the &lt;code&gt;input&lt;/code&gt; string, so in cases of backtracking there will be no special need in recalculating. Every rule wrapped the way it checks the cache before execution and if position matches, returns the result from cache. Caching may be disabled on parser generation;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; variable holds the vey root of context, the topmost level of it (see above in &lt;em&gt;&lt;a href=&#34;#User-Code&#34;&gt;User Code&lt;/a&gt;&lt;/em&gt; section regarding prototype chains for context levels);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cctx&lt;/code&gt; points to current context level;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctxl&lt;/code&gt; holds current context level index, the deeper the level, the higher index is stored here;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current&lt;/code&gt; is the name of the rule in process of execution;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias&lt;/code&gt; is the alias (see &lt;code&gt;as()&lt;/code&gt; operator) of current rule, if it is defined;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ilen&lt;/code&gt; is the length of an input;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;context-management-functions&#34;&gt;Context Management Functions&lt;/h4&gt;
&lt;p&gt;Actually, everything about context structure was described in &lt;em&gt;&lt;a href=&#34;#User-Code&#34;&gt;User Code&lt;/a&gt;&lt;/em&gt; section. I&amp;rsquo;ll just remind you that new, deeper, context levels are just new JS objects which hold pointer to previous (higher) level of context in their &lt;code&gt;prototype&lt;/code&gt;. And yeah, context is where labeled results are stored for &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;xpre&lt;/code&gt; operators, which may contain JS code intended to have access to these labels. Deeper level of context is marked in grammar with parentheses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctx_level(parent)&lt;/code&gt; creates a deeper level of context below a &lt;code&gt;parent&lt;/code&gt; and returns it;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;din()&lt;/code&gt; moves &lt;code&gt;cctx&lt;/code&gt; (current context level) pointer to a deeper level, parallelly with creating it if requred;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dout()&lt;/code&gt; moves &lt;code&gt;cctx&lt;/code&gt; (current context level) pointer to a higher level;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inctx(f)&lt;/code&gt; goes a level deeper, performs the passed function &lt;code&gt;f&lt;/code&gt; and then immediately goes out;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parse-function&#34;&gt;&lt;code&gt;parse()&lt;/code&gt; Function&lt;/h4&gt;
&lt;p&gt;It is the function called with evey new &lt;code&gt;input&lt;/code&gt; to parse. It resets all the variables to their default values, clears the cache and does &lt;code&gt;$f = __user_blocks()&lt;/code&gt; (see &lt;a href=&#34;#User-Code&#34;&gt;User Code&lt;/a&gt; section), for example, then searches for the starting rule and executes it in a &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block. If &lt;code&gt;MatchFailed&lt;/code&gt; exception was fired during the execution, it collects all the necessary information about the failure and fires it further to user (since it reached the top level and wasn&amp;rsquo;t suppressed, for suppressed exceptions no information that should have belonged to user is collected).&lt;/p&gt;
&lt;h4 id=&#34;matchfailed-syntaxerror-error-handling&#34;&gt;&lt;code&gt;MatchFailed&lt;/code&gt;, &lt;code&gt;SyntaxError&lt;/code&gt;, Error Handling&lt;/h4&gt;
&lt;p&gt;Errors handing mechanics are driven by Exceptions in Pegjs-fn. &lt;code&gt;safe()&lt;/code&gt; function suppresses exceptions fired from operators called inside it, but stores them anyway, to allow parser find the last one happened in special cases.&lt;/p&gt;

&lt;p&gt;Some variables are used to manage error data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;failures&lt;/code&gt; object to store all the failures found, suppressed or not, gruped by postion in &lt;code&gt;input&lt;/code&gt; string;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmfpos&lt;/code&gt; stores the position of the right-most failure;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nr&lt;/code&gt; turns the failure reporting mechanics off (sometimes &lt;code&gt;safe&lt;/code&gt; function is not enough to have);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MatchError&lt;/code&gt; is fired when parser found any mismatch between grammar and input,  it stores what actually failed, the expected chunk and found chunk (or a marker, see just below), failure position as offset and two-dimensional position (line and column number) in &lt;code&gt;input&lt;/code&gt;string (which may have line breaks and it&amp;rsquo;s not a problem for a parser).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SyntaxError&lt;/code&gt; is fired when grammar used to generate the parser contained some unexpected error, i.e. if it had no start rule clearly known.&lt;/p&gt;
&lt;h4 id=&#34;markers&#34;&gt;Markers&lt;/h4&gt;
&lt;p&gt;There are few special cases, when &lt;code&gt;MatchFailed&lt;/code&gt; exception may contain marker instead of string chunk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EOI&lt;/code&gt;, &lt;em&gt;end-of-input&lt;/em&gt;, if the final character of &lt;code&gt;input&lt;/code&gt; string was unawarely reached during parsing;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOMETHING&lt;/code&gt;, if it wasn&amp;rsquo;t concretely known what to expect, but there required to be something instead of end-of-input, for example. &lt;code&gt;action&lt;/code&gt; operator uses this marker  to describe what was expected if the user JS code informed that rule failed (returned &lt;code&gt;false&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOTHING&lt;/code&gt;, is a marker &lt;code&gt;action&lt;/code&gt; operator uses to describe what was found when &lt;code&gt;SOMETHING&lt;/code&gt; was expected. Sad story;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;parser-closure-call&#34;&gt;Parser Closure Call&lt;/h3&gt;
&lt;p&gt;This call builds the &lt;code&gt;Parser&lt;/code&gt; instance and returns it to a user. Parser instance has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toSource()&lt;/code&gt; function which returns it&amp;rsquo;s own code as a string;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatchFailed&lt;/code&gt; exception description;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyntaxError&lt;/code&gt; exception description;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse(input[, options])&lt;/code&gt; function, the one that user may use to triggers the parsing process on the given &lt;code&gt;input&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope you found this article interesting and discovered a new approach to parser generation. And thank you for being patient and reaching the very end.&lt;/p&gt;

&lt;p&gt;P.S. Parsing this article with non-legal parsers or parsers built on a base of non-legal grammars is strictly forbidden.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Mastering Functional JavaScript Lecture Slides</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/mastering-functional-javascript-slides/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/mastering-functional-javascript-slides/</id>
                <updated>2013-02-16T23:14:00Z</updated>
                
                <summary type="html">In JavaScript, like, say, in Python, functions are also objects. It gives developer the opportunity to write pure (or not so, since there are no native monads support ;) ) functional code. Most people among us do easily forget about this fact, but it is still true and, what&amp;rsquo;s truly great, it was true from the start.</summary>
                <content type="html">&lt;p&gt;In JavaScript, like, say, in Python, functions are also objects. It gives developer the opportunity to write pure (or not so, since there are no native monads support ;) ) functional code. Most people among us do easily forget about this fact, but it is still true and, what&amp;rsquo;s truly great, it was true from the start.&lt;/p&gt;

&lt;p&gt;These slides are supposed to re-introduce to you the mighty power of functions in JS. No &lt;em&gt;map&lt;/em&gt; / &lt;em&gt;filter&lt;/em&gt;, since they&amp;rsquo;re trivial, but it&amp;rsquo;s more about &lt;em&gt;deferring&lt;/em&gt;, &lt;em&gt;queueing&lt;/em&gt; and &lt;em&gt;composing&lt;/em&gt; functions with few-lined chunks of code, plus some general tricks with them, and also what profit you may take out of all of this stuff. No techniques that will only come in new versions or, instead, just were introduced: totally plain old [good] JavaScript.&lt;/p&gt;

&lt;p&gt;However, a bit of basics at the start are also there, of course.&lt;/p&gt;

&lt;p&gt;OK, Here we go:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/shamansir/mastering-functional-javascript&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/mastering-functional-javascript-slides/first_slide.png&#34; alt=&#34;Slides&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;Links to the examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deferred functions:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codepen.io/shamansir/pen/HskmE&#34;&gt;codepen.io/shamansir/pen/HskmE&lt;/a&gt; &lt;em&gt;(parser example)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codepen.io/shamansir/pen/kBzJe&#34;&gt;codepen.io/shamansir/pen/kBzJe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Partial applications:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codepen.io/shamansir/pen/xCrgz&#34;&gt;codepen.io/shamansir/pen/xCrgz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Queues of functions:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codepen.io/shamansir/pen/AaHqy&#34;&gt;codepen.io/shamansir/pen/AaHqy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Composed functions:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codepen.io/shamansir/pen/Funwt&#34;&gt;codepen.io/shamansir/pen/Funwt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lyfe.js: &lt;a href=&#34;http://bitbucket.org/balpha/lyfe&#34;&gt;bitbucket.org/balpha/lyfe&lt;/a&gt;&lt;br/&gt;
Article on lyfe.js: &lt;a href=&#34;http://balpha.de/2011/06/introducing-lyfe-yield-in-javascript&#34;&gt;Introducing Lyfe: yield in JavaScript&lt;/a&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>GWT + mvp4g Lecture Slides</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/gwt-mvp4g-slides/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/gwt-mvp4g-slides/</id>
                <updated>2011-05-04T23:14:00Z</updated>
                
                <summary type="html">April 29, I&amp;rsquo;ve presented a lecture on Web-development with &lt;a href=&#34;http://code.google.com/intl/ru/webtoolkit/&#34;&gt;GWT&lt;/a&gt; and &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt; Framework, at &lt;a href=&#34;http://addconf.ru&#34;&gt;Application Developer Days&lt;/a&gt; 2011 Conference. Here are the slides.</summary>
                <content type="html">&lt;p&gt;April 29, I&amp;rsquo;ve presented a lecture on Web-development with &lt;a href=&#34;http://code.google.com/intl/ru/webtoolkit/&#34;&gt;GWT&lt;/a&gt; and &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt; Framework, at &lt;a href=&#34;http://addconf.ru&#34;&gt;Application Developer Days&lt;/a&gt; 2011 Conference. Here are the slides.&lt;/p&gt;
&lt;h3 id=&#34;slides&#34;&gt;Slides&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B9lKUPDNyz1vYzAzMzQxMzItYmQyMy00NjdhLWFiYzQtZDRjMjZkNTc2MDEy&amp;amp;hl=en&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/gwt-mvp4g-slides/gdocs.en.png&#34; alt=&#34;Slides&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&#34;http://www.scribd.com/doc/54956722&#34;&gt;Also on Scribd&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Briefly about GWT. A brief history and examples of GWT usage.&lt;/li&gt;
&lt;li&gt;GWT Conceptions

&lt;ol&gt;
&lt;li&gt;JSNI&lt;/li&gt;
&lt;li&gt;Code Splitting&lt;/li&gt;
&lt;li&gt;MVP, RMVP, EventBus&lt;/li&gt;
&lt;li&gt;Deferred Binding&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;Remote Services&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;mvp4g

&lt;ol&gt;
&lt;li&gt;What Helps? Differences and Dignity&lt;/li&gt;
&lt;li&gt;Annotation System&lt;/li&gt;
&lt;li&gt;RMVP, EventBus Realization&lt;/li&gt;
&lt;li&gt;History, &lt;code&gt;#!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Multimodularity&lt;/li&gt;
&lt;li&gt;Remarks&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;GWT UI Components

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UiBinder&lt;/code&gt;, Standard Components&lt;/li&gt;
&lt;li&gt;Developing Custom Components&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Our Development of Layouting-system with GWT+mvp4g&lt;/li&gt;
&lt;li&gt;Working with Non-Java Server-Side API&lt;/li&gt;
&lt;li&gt;i18n in GWT&lt;/li&gt;
&lt;li&gt;Conclusion. Examples links.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;links-from-the-slides&#34;&gt;Links from the slides&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://goo.gl/DKYzc&#34;&gt;Slides in PDF&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Briefly оn GWT

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://quake2-gwt-port.appspot.com&#34;&gt;Quake 2 in browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GWT Conception

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://geekswithblogs.net/kobush/archive/2006/01/09/65305.aspx&#34;&gt;Article on difference between MVC and MVP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=PDuhR18-EdM&#34;&gt;Ray Ryan about GWT-application architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tv.jetbrains.net/videocontent/gwt-event-bus-basics&#34;&gt;Video about EventBus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.docstoc.com/docs/53396874/Deferred-Binding-The-Magic-of-GWT&#34;&gt;Presentation on Deferred Binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/google-guice/wiki/Motivation?tm=6&#34;&gt;Guice wiki-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developerlife.com/tutorials/?p=125&#34;&gt;Tutorial on creating Remote Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linux.org.ru/forum/talks/4497412&#34;&gt;Talks on GWT drawbacks&lt;/a&gt; (ru)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://galak-sandbox.blogspot.com/2010/10/gwt.html&#34;&gt;GWT-code optimization summary&lt;/a&gt; (ru)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mvp4g

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g framework web-page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mvp4gshowcase.appspot.com&#34;&gt;mvp4g framework showcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/mvp4g/wiki/Mvp4g_vs_GWTP&#34;&gt;Comparison between native GWT-code and a code written with mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cambiatablog.wordpress.com/2010/12/04/gwt-and-mvp4g-tutorial-1/&#34;&gt;Short tutorial on creating project with mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UI components

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/webtoolkit/doc/latest/RefWidgetGallery.html&#34;&gt;GWT component library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Layouting

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/shamansir/gwt-mvp4g-layouting-demo&#34;&gt;Layouting demonstration (in progress) with GWT+mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Non-Java API

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/google-web-toolkit-doc-1-5/wiki/GettingStartedJSON&#34;&gt;The point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shamansir.tumblr.com/post/1728720550/deferred-api-gwt-rpc&#34;&gt;Description, including source code&lt;/a&gt; (ru)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;i18n&lt;/li&gt;
&lt;li&gt;Conclusion

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://experika.com&#34;&gt;Experika site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/vgashock&#34;&gt;Vitaly Gashock twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vurt.ru&#34;&gt;Mikhail Kashkin site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emdev.ru&#34;&gt;EmDev company site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://profiles.google.com/shaman.sir&#34;&gt;My Google-profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            </entry>
        
            <entry>
                <title>LimeJS: Writing a cross-platform game in HTML5 with touch support</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/limejs-writing-a-game/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/limejs-writing-a-game/</id>
                <updated>2011-02-15T23:14:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;http://www.limejs.com&#34;&gt;LimeJS&lt;/a&gt; is 2D Open Source HTML5-engine for game development with touch-events support and it works (following to the description on the site) with most of mobile platfroms. I have found it not by myself, but last week I&amp;rsquo;ve got a letter with a proposition to tell community about the engine [in russian, this is an english version] and I&amp;rsquo;ve decided - so if this is the case, why waste time on trifles, why not to try this engine in action. Among with that, I have agreed in advance with engine authors that I will tell both advantages and disadvantages, so I hope to clear the advertisment halo from the article with that (though, what means advertisment to open-source)..?</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;http://www.limejs.com&#34;&gt;LimeJS&lt;/a&gt; is 2D Open Source HTML5-engine for game development with touch-events support and it works (following to the description on the site) with most of mobile platfroms. I have found it not by myself, but last week I&amp;rsquo;ve got a letter with a proposition to tell community about the engine [in russian, this is an english version] and I&amp;rsquo;ve decided - so if this is the case, why waste time on trifles, why not to try this engine in action. Among with that, I have agreed in advance with engine authors that I will tell both advantages and disadvantages, so I hope to clear the advertisment halo from the article with that (though, what means advertisment to open-source)..?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Open Source&lt;/em&gt;, &lt;em&gt;cross-platform&lt;/em&gt; and &lt;em&gt;HTML5&lt;/em&gt; - are the things I like most - they are freedom and innovations :). And more, the engine is written with &lt;a href=&#34;http://code.google.com/closure/&#34;&gt;Closure&lt;/a&gt; and it supports &lt;em&gt;chaining&lt;/em&gt; - these facts bring an additional bright colors to the engine features and to a programming process with its usage. For sure, a comfort in games development by itself is also required, so we&amp;rsquo;ll test LimeJS on it together in this article. The engine is presented as working cross-platform. Two example games located on the site home page work good on iPad, a little bit slowly, but quiet playable. And what about my Hero/Android2.1 (HTML5 is not so cool, may be), they are buggy a lot for sure - so literally, it is not very possible to play them.
However, almost all of the objects look and act correctly even on smartphone - so we&amp;rsquo;ll hope that it will work great even on a weak smartphones like mine with further optimizations.&lt;/p&gt;

&lt;p&gt;By the way, the engine is positioned as a substitute for Flash-technologies in games. It is a painful theme for a lot of us, in connection with the current anti-flash terror on the one hand and a great games existing and recently created on the other. (And I personally think that the comfort of the very animation creating process mechanics in Flash is still not reconstructed even for HTML5/SVG neither for alternatives). So, may be this engine is having a change to fight out a love from Flash developers and make them love with HTML5. They are and you are who decide. &lt;em&gt;A major difference&lt;/em&gt; in &lt;a href=&#34;http://www.limejs.com&#34;&gt;LimeJS&lt;/a&gt; from &lt;a href=&#34;http://processingjs.org/&#34;&gt;ProcessingJS&lt;/a&gt; (for example) is a targeting - not to state machine and not to each frame manual control but to the &lt;em&gt;timeline&lt;/em&gt; - the event-driven mechanics in the game script.&lt;/p&gt;

&lt;p&gt;By the way, here is a code example: &lt;a href=&#34;http://paste.pocoo.org/show/336927/&#34;&gt;&lt;code&gt;javascript&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://paste.pocoo.org/show/336929/&#34;&gt;&lt;code&gt;html&lt;/code&gt;&lt;/a&gt; - to let you make a some preliminary conclusion - I treated the engine a little skeptically at start, but now I think that I certainly was wrong.&lt;/p&gt;
&lt;h3 id=&#34;how-the-result-will-look-like&#34;&gt;How The Result Will Look Like&lt;/h3&gt;
&lt;p&gt;During the article we will develop the very simplified version of ping-pong virtual game with the help of LimeJS. Here is how the result will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/stage-designed.png&#34; alt=&#34;Men in blue shorts on a green soccer field playing with a children-styled ball&#34;&gt;&lt;/p&gt;

&lt;p&gt;There will be videos demonstrating the game we will write running on iPad, iPhone and Android in the end of the article.&lt;/p&gt;
&lt;h3 id=&#34;preparation&#34;&gt;Preparation&lt;/h3&gt;
&lt;p&gt;The engine have a sort of CLI, Command Line Interface. It is written in Python and it gets a required packages using &lt;code&gt;git&lt;/code&gt; when installing, so you need to install &lt;a href=&#34;http://python.org/download/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;http://git-scm.com/download&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-svn.html&#34;&gt;&lt;code&gt;git-svn&lt;/code&gt;&lt;/a&gt; to work with engine, if you haven&amp;rsquo;t them already installed. (Seems, developers using Windows will need to do &lt;a href=&#34;http://stackoverflow.com/questions/350907/git-svn-on-windows-where-to-get-binaries&#34;&gt;some tricks&lt;/a&gt;). Then we get the sources &lt;a href=&#34;http://github.com/digitalfruit/limejs&#34;&gt;from github&lt;/a&gt; or &lt;a href=&#34;https://github.com/digitalfruit/limejs/zipball/master&#34;&gt;by downloading zip&lt;/a&gt; and unpack. This how it can be done on Ubuntu:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python git-core git-svn
$ wget https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;digitalfruit&amp;#x2F;limejs&amp;#x2F;zipball&amp;#x2F;master -no-check-certificate
$ unzip .&amp;#x2F;master .&amp;#x2F;digitalfruit-limejs
$ cd .&amp;#x2F;digitalfruit-limejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install all the other packages required for development (including Closure), we run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;bin&amp;#x2F;lime.py init
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;let39s-start&#34;&gt;Let&amp;rsquo;s Start&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;bin&amp;#x2F;lime.py create pingpong
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, let it be the ping-pong, a little bit similar to that shown by Dominic in &lt;a href=&#34;http://vimeo.com/17161851&#34;&gt;making a game with Impact HTML5 Engine&lt;/a&gt; tutorial. Later I discovered that in &lt;a href=&#34;https://github.com/digitalfruit/limejs/tree/master/lime/demos/pong&#34;&gt;demo-sources&lt;/a&gt; there is something like that, but let our variant will be much simpler.&lt;/p&gt;

&lt;p&gt;There will &lt;code&gt;pingpong.html&lt;/code&gt; and &lt;code&gt;pingpong.js&lt;/code&gt; files created in &lt;code&gt;pinpong&lt;/code&gt; directory. You may open the &lt;code&gt;.html&lt;/code&gt; file in the browser, it is pretty interesting by itself - you&amp;rsquo;ll see a nice circle in the center and you may drag it with mouse or finger. There is also a lot of interesting things in &lt;code&gt;.js&lt;/code&gt;-file - you can mention how scene is created and how events handling is managed. The code remains quite understandable and readable. I will not analyze it in details, it is just a stub-example, and you can inspect its &amp;ldquo;internals&amp;rdquo; by following the links in the beginning of the article.&lt;/p&gt;
&lt;h3 id=&#34;the-main-classes-and-concept&#34;&gt;The Main Classes and Concept&lt;/h3&gt;
&lt;p&gt;A brief summary of &lt;a href=&#34;http://www.limejs.com/0-getting-started&#34;&gt;Programming guide&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Director&lt;/code&gt; - is, literally, a director of the game, it holds the scenes, manages transitions between them and keeps the general game settings;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scene&lt;/code&gt; - is a separate screen of the game, you can add child objects and layers to it;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Layer&lt;/code&gt; - is any rectangular part of the screen, it is useful to split screen parts in layers and layers can also be a containers for children objects. Though, the layers can overlap each other, like in Photoshop;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScheduleManager&lt;/code&gt; - is a planning tool, it helps to call certain functions either in every frame either after some amount of time will pass;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node&lt;/code&gt; - any entity in the game, has its own position, size, scale factor, rotation angle and local coordinate system, so it can be translated (moved), rotated, scaled and animated;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sprite&lt;/code&gt; - is the ancestor of &lt;code&gt;Node&lt;/code&gt;, it has all its properties/possibilities and can represent an image and/or geometric shape (startin from circle to any polygon); sprites can be masked from each other, filled with gradients and their collisions can be tested with &lt;code&gt;hitTest&lt;/code&gt; method;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Engine is oriented on timeline, not on the things that required to be shown in current frame;&lt;/li&gt;
&lt;li&gt;All the different events related to controllers are handled through Closure mechanisms;&lt;/li&gt;
&lt;li&gt;Animations - translation, rotation, scaling, and fading - can be applied to a single object or to several at once and also can be joined in chains (sequential, simultaneous, looped);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOM&lt;/code&gt;- and &lt;code&gt;Canvas&lt;/code&gt;-rendering is supported. &lt;code&gt;WebGL&lt;/code&gt;-rendering is planned;&lt;/li&gt;
&lt;li&gt;If the animation is applied to DOM-element, it is translated to CSS3-property;&lt;/li&gt;
&lt;li&gt;The out script can be hardly optimized;&lt;/li&gt;
&lt;li&gt;There is an &lt;code&gt;Audio&lt;/code&gt; class to play sounds;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-a-scene&#34;&gt;Building a scene&lt;/h3&gt;
&lt;p&gt;Let we leave just a several lines from the &lt;code&gt;pingpong.start&lt;/code&gt; function given us by developers:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
&amp;#x2F;&amp;#x2F; entrypoint
pingpong.start = function(){

    var director = new lime.Director(document.body),
        scene = new lime.Scene();

    director.makeMobileWebAppCapable();

    &amp;#x2F;&amp;#x2F; set current scene active
    director.replaceScene(scene);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don not forget to remove the unneсessary &lt;code&gt;goog.require&lt;/code&gt; lines. I will not remind you further about it, you can always take a look at a resulting file header in the end of the article. Let&amp;rsquo;s add three layers to the scene - &lt;code&gt;floor_&lt;/code&gt; (means background), &lt;code&gt;walls_&lt;/code&gt; and a board that will have all the action happening on it:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var director = new lime.Director(document.body),
    scene = new lime.Scene(),

    floor_ = new lime.Layer().setPosition(0,0),
    walls_ = new lime.Layer().setPosition(0,0),
    board_ = new lime.Layer().setPosition(0,0);

scene.appendChild(floor_);
scene.appendChild(walls_);
scene.appendChild(board_);

. . .

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;player-blank&#34;&gt;Player blank&lt;/h4&gt;
&lt;p&gt;In a separate &lt;code&gt;player.js&lt;/code&gt; file we describe a player class - it will be the polygon in a shape of skateboard (to check how collisions work):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
goog.provide(&amp;#x27;pingpong.Player&amp;#x27;);

goog.require(&amp;#x27;lime.Polygon&amp;#x27;);

pingpong.Player = function() {
    goog.base(this);

    &amp;#x2F;&amp;#x2F; ... polygon construction
}
goog.inherits(pingpong.Player, lime.Polygon);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the place of the comment we will describe a polygon vertices and will fill it with half-transparent blue. Here is how the player will look like (in the tutorial, there are fractional numbers from -1 to 1 are used to describe vertices coordinates (relatively to the polygon center), but in the current version I failed to make them work):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
&amp;#x2F;&amp;#x2F; -1,-2.5, 0,-3.5, 1,-2.5, 1,2.5, 0,3.5, -1,2.5, 0,1.5, 0,-1.5
this.addPoints(-50,-125, 0,-175, 50,-125, 50,125, 0,175, -50,125, 0,75, 0,-75)
    .setFill(0,0,210,.7)
    .setScale(.4);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/player.png&#34; alt=&#34;Player&#34;&gt;&lt;/p&gt;

&lt;p&gt;The red dot on a picture is an &lt;code&gt;anchorPoint&lt;/code&gt;, it is calculated automatically for polygon. This point is a reference point of local coordinates system of the sprite - all the relative sizes and distances related to polygon are calculated starting from this point.&lt;/p&gt;

&lt;p&gt;For the moment, the code is equivalent to the call:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var playerOne = new lime.Polygon().addPoints(...).setFill(...);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But later we will add some behavior to the player and it will be obvious that it was a wise decision to create a special class. Let&amp;rsquo;s check if player is displayed correctly on the scene - let&amp;rsquo;s return back to &lt;code&gt;pingpong.js&lt;/code&gt; file&amp;hellip; though, why waste a time, let&amp;rsquo;s add both players to the board and mirror a first one to make them stand face-to-face:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
. . .
goog.require(&amp;#x27;pingpong.Player&amp;#x27;);

. . .
    board_ = new lime.Layer().setPosition(0,0),

    playerOne = new pingpong.Player().setPosition(50,150).setRotation(180),
    playerTwo = new pingpong.Player().setPosition(400,150);

board_.appendChild(playerOne);
board_.appendChild(playerTwo);

. . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before we run it in a browser we need to make one manipulation more - to update dependencies for Closure (it allows you to include just &lt;code&gt;base.js&lt;/code&gt; with Closure utilities and &lt;code&gt;pingpong.js&lt;/code&gt; in your &lt;code&gt;.html&lt;/code&gt;, and all other files are loaded automatically using &lt;code&gt;goog.require&lt;/code&gt;). However there is a little bug in the current version of engine - when you create a project, its name is not added to &lt;code&gt;./bin/projects&lt;/code&gt; file. So you need to define &lt;code&gt;pingpong&lt;/code&gt; line in your &lt;code&gt;./bin/projects&lt;/code&gt; file before, and after that you can update the dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim .&amp;#x2F;bin&amp;#x2F;projects   # add `pingpong` line
$ .&amp;#x2F;bin&amp;#x2F;lime.py update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, this is what you can see on the screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/stage1.png&#34; alt=&#34;Beach-boys wearing blue shorts&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ball-blank&#34;&gt;Ball blank&lt;/h4&gt;
&lt;p&gt;Now let&amp;rsquo;s make a &lt;code&gt;ball.js&lt;/code&gt; file with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
goog.provide(&amp;#x27;pingpong.Ball&amp;#x27;);

goog.require(&amp;#x27;lime.Circle&amp;#x27;);

pingpong.Ball = function() {
    goog.base(this);

    this.setFill(255,0,0,.7)
        .setSize(20,20);
}
goog.inherits(pingpong.Ball, lime.Circle);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then update dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;bin&amp;#x2F;lime.py update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add the ball to the board in &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
. . .
goog.require(&amp;#x27;pingpong.Ball&amp;#x27;);
. . .

    playerOne = new pingpong.Player().setPosition(50,150).setRotation(180),
    playerTwo = new pingpong.Player().setPosition(400,150),
    ball = new pingpong.Ball().setPosition(275,150);

board_.appendChild(playerOne);
board_.appendChild(playerTwo);
board_.appendChild(ball);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/stage2.png&#34; alt=&#34;Beach-boys wearing blue shorts playing with a ball&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;background&#34;&gt;Background&lt;/h4&gt;
&lt;p&gt;Now let&amp;rsquo;s create a field with a players, every player will have a half of the field with its own color. We will say &lt;code&gt;Director&lt;/code&gt; what are the game screen size parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var director = new lime.Director(document.body,600,480),

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This dimensions are not related to any pixels, by no means - the game canvas is automatically resized and maximized to the screen when required, but these dimensions allow us to use relative positions of elements on the canvas. Correct the ball position and players positions relatively to new screen size:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
playerOne = new pingpong.Player().setPosition(40,240).setRotation(180),
playerTwo = new pingpong.Player().setPosition(600,240),
ball = new pingpong.Ball().setPosition(320,240);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, at last, the background. Yep, it will be just two sprites, splitting the screen in half - no indirect logic.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
floor_.appendChild(new lime.Sprite().setPosition(160,240)
                                    .setSize(320,480)
                                    .setFill(100,100,100));
floor_.appendChild(new lime.Sprite().setPosition(480,240)
                                    .setSize(320,480)
                                    .setFill(200,200,200));

board_.appendChild(...);
. . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/stage3.png&#34; alt=&#34;Beach-boys wearing blue shorts playing on a asphalt&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;wall-blank&#34;&gt;Wall blank&lt;/h4&gt;
&lt;p&gt;Wall will not have a lot of logic, but as a tradition we will also place it in a separate class. Walls will have 20x20 size. Create a file &lt;code&gt;wall.js&lt;/code&gt; with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
goog.provide(&amp;#x27;pingpong.Wall&amp;#x27;);

goog.require(&amp;#x27;lime.Sprite&amp;#x27;);

pingpong.Wall = function() {
    goog.base(this);

    this.setFill(255,255,0)
        .setSize(20,20);
}
goog.inherits(pingpong.Wall, lime.Sprite);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;bin&amp;#x2F;lime.py update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And place the walls along the canvas edges in &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
. . .
goog.require(&amp;#x27;pingpong.Wall&amp;#x27;);
. . .

floor_.appendChild(...);

&amp;#x2F;&amp;#x2F; horizontal walls
for (x = 10; x &amp;lt;= 630; x += 20) {
    walls_.appendChild(new pingpong.Wall().setPosition(x, 10));
    walls_.appendChild(new pingpong.Wall().setPosition(x, 470));
}
&amp;#x2F;&amp;#x2F; vertical walls
for (y = 30; y &amp;lt;= 450; y += 20) {
    walls_.appendChild(new pingpong.Wall().setPosition(10, y));
    walls_.appendChild(new pingpong.Wall().setPosition(630, y));
}

board_.appendChild(...);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s all, the game board is complete - we can start to program logic!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/stage4.png&#34; alt=&#34;Beach-boys wearing blue shorts with a ball over a grey rectangles surrounded with yellow crates&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;players-logic&#34;&gt;Players logic&lt;/h4&gt;
&lt;p&gt;Player sprite must move vertically towards the touched or clicked point, omitting the walls. Moving is done easy:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
. . .

director.makeMobileWebAppCapable();

goog.events.listen(floor_,[&amp;#x27;mousedown&amp;#x27;,&amp;#x27;touchstart&amp;#x27;],function(e){
    var player_ = (e.position.x &amp;lt;= 320) ? playerOne : playerTwo;
    player_.runAction(
            new lime.animation.MoveTo(player_.getPosition().x,
                                      e.position.y).setDuration(1));
});

director.replaceScene(scene);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But with this behaviour the players are moving through walls. Keep each wall instance to test on collisions with player is not a best way for us, so we will let a programmer to determine what rectangular bounds are restricted for player. Thus we will need two methods in the end of &lt;code&gt;player.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
pingpong.Player.prototype.setMovementBounds = function(top,right,bottom,left) {
    this._moveBounds = new goog.math.Box(top,right,bottom,left);
    return this;
}

pingpong.Player.prototype.alignBounds = function(x, y) {
    if (this._moveBounds === undefined) return new goog.math.Coordinate(x, y);
    var size_ = new goog.math.Size(this.getSize().width * this.getScale().x,
                                   this.getSize().height * this.getScale().y);
    var newX = x, newY = y;
    if (x &amp;lt; (this._moveBounds.left + (size_.width &amp;#x2F; 2)))
                  newX = this._moveBounds.left + (size_.width &amp;#x2F; 2);
    if (x &amp;gt; (this._moveBounds.right - (size_.width &amp;#x2F; 2)))
                  newX = this._moveBounds.right - (size_.width &amp;#x2F; 2);
    if (y &amp;lt; (this._moveBounds.top + (size_.height &amp;#x2F; 2)))
                  newY = this._moveBounds.top + (size_.height &amp;#x2F; 2);
    if (y &amp;gt; (this._moveBounds.bottom - (size_.height &amp;#x2F; 2)))
                  newY = this._moveBounds.bottom - (size_.height &amp;#x2F; 2);
    return new goog.math.Coordinate(newX, newY);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first one allows to set rectangular boundaries for player&amp;rsquo;s movement and the second one - returns the position aligned to the edges of this bounds. Note that scale vector is taken into account in calculation process.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s update the players&amp;#39; definitions in &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
playerOne = new pingpong.Player().setPosition(40,240)
                                 .setRotation(180)
                                 .setMovementBounds(20,620,460,20),
playerTwo = new pingpong.Player().setPosition(600,240)
                                 .setMovementBounds(20,620,460,20),

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And let&amp;rsquo;s correct the event where the movement happens:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
goog.events.listen(floor_,[&amp;#x27;mousedown&amp;#x27;,&amp;#x27;touchstart&amp;#x27;],function(e){
    var player_ = (e.position.x &amp;lt;= 320) ? playerOne : playerTwo;
    player_.runAction(
            new lime.animation.MoveTo(
                    player_.alignBounds(player_.getPosition().x,
                                        e.screenPosition.y))
                              .setDuration(1));
});

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;ball-logic&#34;&gt;Ball logic&lt;/h4&gt;
&lt;p&gt;We will also need some additional functions for a ball. The first one, as for player, allows to set ball movement bounds, the second one allows to set ball velocity and the third one allows to set &amp;ldquo;reset position&amp;rdquo; - a position where the ball will returned when if one of the players misses it (&lt;code&gt;ball.js&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
pingpong.Ball = function() {
    goog.base(this);

    this.setFill(255,0,0,.7)
        .setSize(20,20);

    this._xCoef = 1;
    this._yCoef = 1;

    this._resetPos = new goog.math.Coordinate(0, 0);
    this._velocity = 2;
}
goog.inherits(pingpong.Ball,lime.Circle);

pingpong.Ball.prototype.setMovementBounds = function(top,right,bottom,left) {
    this._moveBounds = new goog.math.Box(top,right,bottom,left);
    return this;
}

pingpong.Ball.prototype.setVelocity = function(velocity) {
    if (velocity) this._velocity = velocity;
    return this;
}

pingpong.Ball.prototype.setResetPosition = function(x, y) {
    this._resetPos = new goog.math.Coordinate(x, y);
    return this;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we also describe the main detection function, it will test if one of the players catched the ball and will reset ball position if not. If the vertical wall was hit, funtion returns the position of hit to let the outer function to determine which player to blame, judging by theirs position.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
pingpong.Ball.prototype.updateAndCheckHit = function(dt,playerOne,playerTwo) {
    var newPos_ = this.getPosition();
    var size_ = new goog.math.Size(this.getSize().width * this.getScale().x,
                                   this.getSize().height * this.getScale().y);
    newPos_.x += this._xCoef * this._velocity * dt;
    newPos_.y += this._yCoef * this._velocity * dt;
    var hitVBounds_ = false; &amp;#x2F;&amp;#x2F; vertical bounds were hit
    if (this._moveBounds !== undefined) {
        if (newPos_.x &amp;lt;= (this._moveBounds.left + (size_.width &amp;#x2F; 2)))
                         { this._xCoef = 1; hitVBounds_ = true; }
        if (newPos_.x &amp;gt;= (this._moveBounds.right - (size_.width &amp;#x2F; 2)))
                         { this._xCoef = -1; hitVBounds_ = true; }
        if (newPos_.y &amp;lt;= (this._moveBounds.top + (size_.height &amp;#x2F; 2)))
                         this._yCoef = 1;
        if (newPos_.y &amp;gt;= (this._moveBounds.bottom - (size_.height &amp;#x2F; 2)))
                         this._yCoef = -1;
    }
    var p1catched_ = playerOne.catched(this.getParent().localToScreen(newPos_));
    var p2catched_ = playerTwo.catched(this.getParent().localToScreen(newPos_));
    if (hitVBounds_ &amp;amp;&amp;amp; !p1catched_ &amp;amp;&amp;amp; !p2catched_) {
        this.setPosition(this._resetPos.x,this._resetPos.y);
        return newPos_;
    } else if (p1catched_) { this.xCoef = 1; return null; }
      else if (p2catched_) { this.xCoef = -1; return null; }
    this.setPosition(newPos_.x, newPos_.y);
    return null;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In such functions you will need to monitor the current coordinate system, you work with, closely and to convert it properly when it is required. In this case &lt;code&gt;parnet&lt;/code&gt; - is the layer that holds the ball and the ball position is the position relative to this layer coordinate system. Thereby we convert the ball position defined in layer coordinate system into the screen coordinate system before passing it to the &lt;code&gt;catched&lt;/code&gt; method, and inside the &lt;code&gt;catched&lt;/code&gt; method described below, we convert the passed ball position defined in screen coordinate system into the player local coordinate system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we need to add the &lt;code&gt;catched&lt;/code&gt; method which is used in previous function to &lt;code&gt;player.js&lt;/code&gt; file. Using all the polygon vertices coordinates + scale and rotation, it returns if passed position is inside the area of polygon:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
pingpong.Player.prototype.catched = function(pos) {
    var p = this.getPoints(),
        s = this.getScale(),
        r = this.getRotation(),
        plen = p.length,
        coord = this.screenToLocal(pos),
        inPoly = false;

    var rsin = Math.sin(r * Math.PI &amp;#x2F; 180),
        rcos = Math.cos(r * Math.PI &amp;#x2F; 180),
        csx = coord.x * s.x,
        csy = coord.y * s.y,
        crx = (csx * rcos) - (csy * rsin),
        cry = (csx * rsin) + (csy * rcos);
        crx = coord.x, cry = coord.y;

    if (plen &amp;gt; 2) {
        var i, j, c = 0;

        for (i = 0, j = plen - 1; i &amp;lt; plen; j = i++) {
            var pix_ = p[i].x, piy_ = p[i].y,
                pjx_ = p[j].x, pjy_ = p[j].y;

            if (((piy_ &amp;gt; cry) != (pjy_ &amp;gt; cry)) &amp;amp;&amp;amp;
                (crx &amp;lt; (pjx_ - pix_) * (cry - piy_) &amp;#x2F;
                    (pjy_ - piy_) + pix_)) {
                    inPoly = !inPoly;
                }
        }
    }

    return inPoly;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;New setting are required to be set when initializing the ball in &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
ball = new pingpong.Ball().setPosition(320,240)
                          .setMovementBounds(20,620,460,20)
                          .setVelocity(.2)
                          .setResetPosition(320,240);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the main thing, checking the events that happened with the ball. We will use &lt;code&gt;schedule&lt;/code&gt; method from &lt;code&gt;scheduleManager&lt;/code&gt;, it calls the given function in each frame, telling it how much time passed from the previous frame. Currently we will blame the player who missed the ball in console and in the next subchapter we will make a &lt;code&gt;Label&lt;/code&gt; for it:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
goog.events.listen(. . .);

var hitPos_;
lime.scheduleManager.schedule(function(dt){
    if (hitPos_ = ball.updateAndCheckHit(dt, playerOne, playerTwo)) {
       console.log(&amp;#x27;player&amp;#x27;,(hitPos_.x &amp;lt;= 320) ? 1 : 2,&amp;#x27;is a loser&amp;#x27;);
    };
},ball);

director.replaceScene(scene);

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;blaming-message&#34;&gt;Blaming Message&lt;/h4&gt;
&lt;p&gt;Now will add a label which will tell us who failed to catch the ball. Just an information about who failed, we will not waste time on counting the score:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
ball = . . .
       .setResetPosition(320,240),

label = new lime.Label().setPosition(280,30)
                        .setText(&amp;#x27;&amp;#x27;).setFontFamily(&amp;#x27;Verdana&amp;#x27;)
                        .setFontColor(&amp;#x27;#c00&amp;#x27;).setFontSize(18)
                        .setFontWeight(&amp;#x27;bold&amp;#x27;).setSize(150,30);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&amp;rsquo;t forget to add the label the to board layer:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
board_.appendChild(ball);
board_.appendChild(label);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, replace the output target from console to label:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
goog.events.listen(. . .);

var hitPos_ = null, defDelay_ = 500, delay_ = defDelay_;
lime.scheduleManager.schedule(function(dt){
    delay_ -= dt;
    if (delay_ &amp;lt;= 0) label.setText(&amp;#x27;&amp;#x27;);
    if (hitPos_ = ball.updateAndCheckHit(dt, playerOne, playerTwo)) {
       label.setText(&amp;#x27;player &amp;#x27; + ((hitPos_.x &amp;lt;= 320) ? 1 : 2) + &amp;#x27; is a loser&amp;#x27;);
       delay_ = defDelay_;
    };
},ball);

director.replaceScene(scene);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s all. the ball is flying over the board, bounces from players, the one who missed it is blamed with the evil red label - I think it is enough for demonstration game.&lt;/p&gt;
&lt;h4 id=&#34;make-up&#34;&gt;Make-up&lt;/h4&gt;
&lt;p&gt;Great, let&amp;rsquo;s do some make-up to demonstrate how gradients and textures work.&lt;/p&gt;

&lt;p&gt;Let out background will have a nice grass-greeny color - we will change a background sprites initialization in &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
floor_.appendChild(new lime.Sprite().setPosition(160,240)
                                    .setSize(321,480)
                                    .setFill(new lime.fill.LinearGradient()
                                                     .setDirection(0,1,1,0)
                                                     .addColorStop(0,0,92,0,1)
                                                     .addColorStop(1,134,200,105,1)));
floor_.appendChild(new lime.Sprite().setPosition(480,240)
                                    .setSize(320,480)
                                    .setFill(new lime.fill.LinearGradient()
                                                     .setDirection(1,1,0,0)
                                                     .addColorStop(0,0,92,0,1)
                                                     .addColorStop(1,134,200,105,1)));

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For players (&lt;code&gt;player.js&lt;/code&gt;) we will give a little bit transparent sea-like blue gradient:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
this.addPoints(-50,-125, 0,-175, 50,-125, 50,125, 0,175, -50,125, 0,75, 0,-75)
    .setFill(new lime.fill.LinearGradient()
                          .setDirection(0,1,1,0)
                          .addColorStop(0,0,0,210,.7)
                          .addColorStop(1,0,0,105,.7))
    .setScale(.4);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ball (&lt;code&gt;ball.js&lt;/code&gt;) will have a texture:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
this.setFill(&amp;#x27;.&amp;#x2F;ball.png&amp;#x27;)
    .setSize(20,20);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wall (&lt;code&gt;wall.js&lt;/code&gt;) will be painted with concrete blue color and inherited from &lt;code&gt;RoundedRect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
pingpong.Wall = function() {
    goog.base(this);

    this.setFill(109,122,181)
        .setSize(20,20)
        .setRadius(3);
}
goog.inherits(pingpong.Wall, lime.RoundedRect);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now everything looks much prettier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/stage-designed.png&#34; alt=&#34;Men in blue shorts on a soccer field playing with children ball&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;compilation&#34;&gt;Compilation&lt;/h4&gt;
&lt;p&gt;So, the demonstration game is complete. Here are the sources I&amp;rsquo;ve got:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://paste.pocoo.org/show/338943/&#34;&gt;&lt;code&gt;pingpong.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338944/&#34;&gt;&lt;code&gt;player.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338945/&#34;&gt;&lt;code&gt;ball.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338946/&#34;&gt;&lt;code&gt;wall.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://dl.dropbox.com/u/928694/test-pingpong/ball.png&#34;&gt;&lt;code&gt;ball.png&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338948/&#34;&gt;&lt;code&gt;pingpong.html&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now please re-check all &lt;code&gt;goog.require&lt;/code&gt; lines - delete the calls that were not used then update the dependencies and collect all the resulting things in one script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;bin&amp;#x2F;lime.py update
$ .&amp;#x2F;bin&amp;#x2F;lime.py build pingpong -o pingpong&amp;#x2F;compiled&amp;#x2F;pp.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can copy a &lt;code&gt;pingpong.html&lt;/code&gt; file into &lt;code&gt;compiled&lt;/code&gt; folder and change the Javascript calls in the header:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
&amp;lt;!DOCTYPE HTML&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;pingpong&amp;lt;&amp;#x2F;title&amp;gt;
    &amp;lt;script type=&amp;quot;text&amp;#x2F;javascript&amp;quot; src=&amp;quot;pp.js&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;script&amp;gt;
&amp;lt;&amp;#x2F;head&amp;gt;

&amp;lt;body onload=&amp;quot;pingpong.start()&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;body&amp;gt;

&amp;lt;&amp;#x2F;html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;resume&#34;&gt;Resume&lt;/h3&gt;
&lt;p&gt;I felt skeptical to the engine at first, (just) two games presented at the site are too casual for me. There are not a lot of example and details in documention, and there is a lot of things required for installation. And an acid square as &lt;code&gt;favicon&lt;/code&gt;&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;But then I&amp;rsquo;ve played in the game with numbers, it appeared to be quiet exciting (its principles are similar to &lt;code&gt;Super 7 HD&lt;/code&gt; for iPad - but it is a simple one, event though it a demo). But then, when I&amp;rsquo;ve trained while writing a game from the article, everything appeared to be convenient, comfortable, considered and even minimalistic. There are minor tweaks and dampness and things not covered in documentation, but if the resulting code is forward-compatible, why not - right now guys are fixing all this stuff. So the final opinion is definitely positive.&lt;/p&gt;

&lt;p&gt;The main thing - it is not a state-machine-based engine that is fashionable now - you can build on game script and bind to events, not to time or current frame, you don&amp;rsquo;t need to think how to optimize drawing a lot of objects in next frame - yes, it almost Flash, it is sad that there is no editor :).&lt;/p&gt;
&lt;h3 id=&#34;video&#34;&gt;Video&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/19973495&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/19973495&#34;&gt;LimeJS Engine demonstation on iPhone - PingPong game&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&#34;http://player.vimeo.com/video/19973601&#34; width=&#34;400&#34; height=&#34;706&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/19973601&#34;&gt;LimeJS Engine demonstation on Android - PingPong game&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&#34;http://player.vimeo.com/video/19973167&#34; width=&#34;400&#34; height=&#34;225&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/19973167&#34;&gt;LimeJS Engine demonstation on iPad - PingPong game&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;(Videos are recorded with the help of engine authors)&lt;/p&gt;
&lt;h3 id=&#34;to-play&#34;&gt;To play&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://shamansir.madfire.net/_pingpong/pingpong.html&#34;&gt;Here you can try to play&lt;/a&gt; (it can be a little buggy, because it is a very simplified version, please compare the platform-related experience you get with what you see on video)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/limejs-writing-a-game/qrcode.png&#34; alt=&#34;QRCode&#34;&gt;&lt;/p&gt;

&lt;p&gt;P.S. Special thanks to &lt;a href=&#34;http://www.lazio.com.ua/&#34;&gt;lazio_od&lt;/a&gt;, he helped me with testing among with engine authors.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>3 Tiny JavaScript Snippets</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/3-tiny-javascript-snippets/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/3-tiny-javascript-snippets/</id>
                <updated>2011-02-03T23:14:00Z</updated>
                
                <summary type="html">Currently I am doing some stuff in JavaScript and I need to have just a tiny amounts of code to work with. As tiny as this article. But there are some things I really need to make the development comfortable for myself. So I require them to be tiny too.</summary>
                <content type="html">&lt;p&gt;Currently I am doing some stuff in JavaScript and I need to have just a tiny amounts of code to work with. As tiny as this article. But there are some things I really need to make the development comfortable for myself. So I require them to be tiny too.&lt;/p&gt;
&lt;h3 id=&#34;two-liner-each-one-function&#34;&gt;Two-Liner Each (one function)&lt;/h3&gt;
&lt;p&gt;Works just with objects and arrays. For objects, callback takes key and value. For arrays, callback takes element.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
&amp;#x2F;**
 * Tiny each
 * @param {Array, Object} iterable the iterable to iterate through
 * @param {Function} func to call on each iteration, in array-mode gets an element (func(elem)),
                                                     in object-mode gets a key and value (func(v, k))
 *&amp;#x2F;
function each(iterable, func) {
    if (iterable instanceof Array) for (var i = 0; i &amp;lt; iterable.length; i++) func.call(iterable, iterable[i]);
    else if (iterable instanceof Object) for (field in iterable) func.call(iterable, iterable[field], field);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;quick-class-construction-single-inheritance-one-function&#34;&gt;Quick Class Construction (Single Inheritance, one function)&lt;/h3&gt;
&lt;p&gt;This is just a slightly modified version from &lt;a href=&#34;http://www.willmcgugan.com/blog/tech/2009/12/5/javascript-snippets/&#34;&gt;this nice article&lt;/a&gt;. Also, &lt;code&gt;bind&lt;/code&gt; function is useful to make stuff like this: &lt;code&gt;var catMeow = bind(cat, Cat.meow);&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function class_(def) {
    var _proto = def;
    if (def[&amp;#x27;_extends&amp;#x27;] !== undefined) {
        var _ex = def[&amp;#x27;_extends&amp;#x27;];
        if (typeof _ex === &amp;#x27;function&amp;#x27;) {
            each(_ex.prototype, function(v, k){
                if (_proto[k] === undefined) {
                    _proto[k] = v;
                } else {
                    _proto[&amp;#x27;_s_&amp;#x27;+k] = v;
                }
            });
        } else throw new Error(&amp;#x27;Wrong _extends field&amp;#x27;);
    }

    var _init = def[&amp;#x27;_init&amp;#x27;];
    if (_init === undefined) {
        _init = function() {
            if (this.prototype[&amp;#x27;_s__init&amp;#x27;]) this._init_super();
        }
    }
    _init.prototype = _proto;

    def[&amp;#x27;hasOwnProperty&amp;#x27;] = function(k) {
        return (k !== &amp;#x27;hasOwnProperty&amp;#x27;)
               &amp;amp;&amp;amp; (Object.prototype.hasOwnProperty.call(this, k)
                  || Object.prototype.hasOwnProperty.call(_proto, k));
    }

    return _init;
}

function bind(obj, method) {
    return function() { return method.apply(obj, arguments); }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var Base = class_({

    _init: function(a, b) {
        this.a = a;
        this.b = b;
    }

    someMethod: function() {
        console.log(&amp;#x27;parent&amp;#x27;);
    }

});

var Child = class_({

    _extends: Base,

    _init: function(c) {
        this._s__init(5, 6);
        this.c = 7;
        console.log(this.a);
        console.log(this.b);
        console.log(this.c);
    },

    someMethod: function() {
        this._s_someMethod();
        console.log(&amp;#x27;child&amp;#x27;);
    }

});

var b = new Base();
var c = new Child();

b.someMethod();
c.someMethod();

console.log(b instanceof Base);
console.log(b instanceof Child);
console.log(c instanceof Base);
console.log(c instanceof Child);

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;easy-assertions-mechanism-one-or-two-functions&#34;&gt;Easy assertions mechanism (one or two functions)&lt;/h3&gt;
&lt;p&gt;Just for quick TDD, if you like it. If you need only assertions, not a tests suites, take just &lt;code&gt;AssertException&lt;/code&gt; and &lt;code&gt;assert&lt;/code&gt; function - they are everything you need. Else, &lt;code&gt;runTests&lt;/code&gt; allows you to run &lt;code&gt;JUnit&lt;/code&gt;-like tests suites, even with proper &lt;code&gt;setUp&lt;/code&gt; and &lt;code&gt;tearDown&lt;/code&gt;. (Uses console to inform about tests results so in the presented form it may work only in Firefox / WebKit browsers)&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function AssertException(result, expectation) { this.result = result;
                                                this.expectation = expectation; }
AssertException.prototype.toString = function () {
    if (this.expectation) return (&amp;#x27;AssertException: Expected: &amp;#x27; + this.expectation + &amp;#x27; Got: &amp;#x27; + this.result);
    else return (&amp;#x27;AssertException: Got: &amp;#x27; + this.result);
}

&amp;#x2F;**
 * Tiny assert
 * @param {Boolean} test the expression to test
 * @param {String} [_expectation] what was expected
 * @throws {AssertException} if assertion was failed
 *&amp;#x2F;
function assert(test, _expectation) {
    if (!test) throw new AssertException(test, _expectation);
}

function _assert(test, val, expectation) {
    if (!test) throw new AssertException(val, expectation);
}

function assertNotNull(test) { _assert(test !== null, test + &amp;#x27; == null&amp;#x27;, &amp;#x27;not null&amp;#x27;); }
function assertDefined(test) { _assert(test !== undefined, test + &amp;#x27; !== undefined&amp;#x27;, &amp;#x27;defined&amp;#x27;); }
function assertTrue(test) { _assert(test, test + &amp;#x27; != true&amp;#x27;, &amp;#x27;true&amp;#x27;); }
function assertFalse(test) { _assert(!test, test + &amp;#x27; != false&amp;#x27;, &amp;#x27;false&amp;#x27;); }
function assertEquals(first, second) { _assert(first === second, first + &amp;#x27; != &amp;#x27; + second, second + &amp;#x27; == &amp;#x27; + second); }
function assertInstance(test, cls) { _assert(test instanceof cls, test + &amp;#x27; not instance of &amp;#x27; + cls, test + &amp;#x27; instance of &amp;#x27; + cls); }
function assertType(test, typename) { _assert(typeof test == typename, test + &amp;#x27; is not of type &amp;#x27; + typename, test + &amp;#x27; has type &amp;#x27; + typename); }

&amp;#x2F;**
 * Tests runner
 * @param {Object, Function} suite for function-typed parameter,
                                       calls a function and informs through Firebug console about assertions
                                   for object-typed parameter,
                                       works like JUnit, calls every method which name starts with &amp;#x27;test...&amp;#x27;
                                       also calls &amp;#x27;setUp&amp;#x27; and &amp;#x27;tearDown&amp;#x27; in the proper moments
                                       informs through Firebug console about assertions and passed&amp;#x2F;failed methods
 * @param {String} [_name] some name for test case or test suite (used only in logs to help you determine what failed)
 * @param {String} [_stopWhenFailed] for object-mode, stops testing when first assertion is failed in some method
 * @returns {AssertException} first failed exception for function-mode, nothing for object-mode
 *
 * runTests(new SomeClass());
 * runTests(someFunc(), &amp;#x27;someFunc&amp;#x27;);
 *&amp;#x2F;
var __tCount = 0,
    __fCount = 0;
function runTests(suite, _name, _stopWhenFailed) {
    if (typeof suite === &amp;#x27;function&amp;#x27;) { __fCount++;
        var field = (_name ? _name : (&amp;#x27;Function &amp;#x27; + __fCount));
        try { suite();
              console.info(&amp;#x27;%s: %s&amp;#x27;, field, &amp;#x27;OK&amp;#x27;);
        } catch (ex) {
            if (ex instanceof AssertException) {
                var info_ = &amp;#x27;(&amp;#x27; + field;
                if (ex.lineNumber) info_ += &amp;#x27;:&amp;#x27; + ex.lineNumber;
                if (ex.expectation)  console.error(&amp;#x27;Assertion failed. Expected:&amp;#x27;, ex.expectation,
                                                    &amp;#x27;. Got:&amp;#x27;, ex.result, info_ + &amp;#x27;)&amp;#x27;);
                else console.error(&amp;#x27;Assertion failed. Got:&amp;#x27;, ex.result, info_ + &amp;#x27;)&amp;#x27;);
                console.error(ex);
                console.warn(&amp;#x27;%s: %s&amp;#x27;, field, &amp;#x27;FAILED&amp;#x27;);
                return ex;
            } else {
                throw new Error(ex.toString());
            }
        }
    } else if (typeof suite === &amp;#x27;object&amp;#x27;) { __tCount++;
        var title = _name || (&amp;quot;Suite &amp;quot; + __tCount);
        console.group(title);
        for (var field in suite) {
            if ((typeof suite[field] === &amp;#x27;function&amp;#x27;) &amp;amp;&amp;amp;
                (field.indexOf(&amp;#x27;test&amp;#x27;) === 0) &amp;amp;&amp;amp; suite.hasOwnProperty(field)) {
                console.log(&amp;#x27;Running&amp;#x27;, title + &amp;#x27; &amp;#x2F; &amp;#x27; + field);
                if (suite.setUp) suite.setUp();
                var result = runTests(bind(suite, suite[field]), field);
                var passed = (result === null);
                if (_stopWhenFailed &amp;amp;&amp;amp; (result !== null)) return result;
                if (suite.tearDown) suite.tearDown();
            }
        }
        console.groupEnd();
    } else {
        throw new Exception(&amp;#x27;Passed var has invalid type&amp;#x27;);
    }
    return null;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var T1 = class_({

   _init: function() {  },

   setUp: function() { },

   test1: function() {
       assert(null == null);
       assert(12 == null, &amp;#x27;12 == null&amp;#x27;);
       assert(&amp;#x27;a&amp;#x27; == null);
       assertTrue(true);
       assertFalse(false);
       assertTrue(false);
       assertFalse(true);
       assertEquals(5, 5.1);
       assertEquals(5, 5);
       assertEquals(&amp;#x27;a&amp;#x27;, &amp;#x27;ab&amp;#x27;);
       assertEquals(&amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27;);
       assertType(12, &amp;#x27;integer&amp;#x27;);
       assertType(12, &amp;#x27;string&amp;#x27;);
       assertType(&amp;#x27;12&amp;#x27;, &amp;#x27;string&amp;#x27;);
       assertInstance(this, T1);
       assertInstance(this, Object);
       assertInstance(null, Object);
       assertNotNull(this);
       assertNotNull(null);
   },

   test2: function() {
       &amp;#x2F;&amp;#x2F;throw new Error(&amp;#x27;Alala&amp;#x27;);
       assertEquals(6, 7.2);
   },

   tearDown: function() { }

});

var _f = function() {
    assertTrue(true);
    assertEquals(&amp;#x27;12&amp;#x27;, true);
}

runTests(new T1());
runTests(_f, &amp;#x27;_f&amp;#x27;);

new T1().test1();

_f();

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;snippets-tests&#34;&gt;Snippets tests&lt;/h3&gt;
&lt;p&gt;Using TDD-snippet, I wrote a general Test Suite for all of three snippets to demonstrate their interaction.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://paste.pocoo.org/show/344963/&#34;&gt;Test Suite&lt;/a&gt; | &lt;a href=&#34;http://pastie.org/pastes/1585157&#34;&gt;All snippets&lt;/a&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Modelling a Solar System in Fluxus</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/fluxus-solar-system/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/fluxus-solar-system/</id>
                <updated>2010-12-06T23:14:00Z</updated>
                
                <summary type="html">Some time ago I &lt;a href=&#34;#post-about-fluxus&#34;&gt;wrote a post&lt;/a&gt; about &lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;fluxus&lt;/a&gt;, livecoding and 3D-prototyping system. Now I want to demonstrate some of its features and describe how you may use them in pseudo(;))scientific needs. For example, you can create a model of a simplified solar system and make it fit in only 125 lines of code (including comments) &amp;ndash; it is the advantage of &lt;a href=&#34;http://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; language with graphic steroids, the core of fluxus and a descendant of PLT Scheme. Here how the result will look like:</summary>
                <content type="html">&lt;p&gt;Some time ago I &lt;a href=&#34;#post-about-fluxus&#34;&gt;wrote a post&lt;/a&gt; about &lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;fluxus&lt;/a&gt;, livecoding and 3D-prototyping system. Now I want to demonstrate some of its features and describe how you may use them in pseudo(;))scientific needs. For example, you can create a model of a simplified solar system and make it fit in only 125 lines of code (including comments) &amp;ndash; it is the advantage of &lt;a href=&#34;http://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; language with graphic steroids, the core of fluxus and a descendant of PLT Scheme. Here how the result will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.io/blog/figures/fluxus-solar-system/screen04.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/fluxus-solar-system/screen04-thumb.png&#34; alt=&#34;Screenshot 01&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.io/blog/figures/fluxus-solar-system/screen05.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/fluxus-solar-system/screen05-thumb.png&#34; alt=&#34;Screenshot 02&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are sources in the post, a short desription of code structure, tutorial movies in Slavic English, examining in detail the whole process of writing this complicated (;)) code.&lt;/p&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://paste.pocoo.org/show/301220/&#34;&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Since it was lost with the Poocoo, I&amp;rsquo;ll try to restore it from video.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;Fluxus uses a term of state machine for scene construction. If you have programmed in OpenGL already, you are familiar with this principle - every next function in the code either modifies the matrix of scene state or changes the content of the scene (i.e. draws an object). You may construct the required scene objects just before any rendering will happen and then change their conditions later or just draw a new primitives in every frame (OpenGL understands that it may cache the objects which state is not changed a lot between frames). I am using the both ways of these, so I prepare the text labels and planets&amp;#39; orbits before rendering process but I draw planets in every new frame.&lt;/p&gt;

&lt;p&gt;I have taken all the data about equatorial diameters, orbital radiuses and orbital periods of the planets from the single one table in &lt;a href=&#34;http://en.wikipedia.org/wiki/Planet#Solar_System&#34;&gt;Wikipedia article&lt;/a&gt;. It is very handy that all parameters are presented relatively to Earth properties (that is how astronomical units are calculated), so the Earth diameter and Earth year can be used as system of units in our model.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you know that distance from mass center of Earth to mass center of Sun is approximately equal to 11740 Earth diameters? It is the astronomical unit (&lt;code&gt;astro-unit&lt;/code&gt; constant) and the distances from Sun to planets are measured relativey to it. And more, 109 Earth diameters fits the diameter of Sun (the Earth diameter is represented with &lt;code&gt;diameter-factor&lt;/code&gt; constant in the model).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we know this data, we can calculate the angles for planets positions (the orbital eccentricities are not taken in account in the model, it&amp;rsquo;s a homework) and place them appropriately in the model.&lt;/p&gt;
&lt;h3 id=&#34;examining-code&#34;&gt;Examining code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;star&lt;/code&gt;, &lt;code&gt;planet&lt;/code&gt; and planetary system (it is called &lt;code&gt;star-system&lt;/code&gt; because the center of it is a star), consisting of star and planets, structures are defined&lt;/li&gt;
&lt;li&gt;defined functions of

&lt;ul&gt;
&lt;li&gt;getting translate vector (&lt;code&gt;qtv&lt;/code&gt; - &lt;em&gt;quick translate vector&lt;/em&gt;) for planet using its orbital radius and orbital period&lt;/li&gt;
&lt;li&gt;getting scale vector (&lt;code&gt;qsv&lt;/code&gt; - &lt;em&gt;quick scale vector&lt;/em&gt;) of planet using its diameter&lt;/li&gt;
&lt;li&gt;fast calculation of planet position angle (&lt;code&gt;curang&lt;/code&gt;), relatively to (Sun) (0, 0) point, using planet&amp;rsquo;s orbital period&lt;/li&gt;
&lt;li&gt;building orbit primitive (&lt;code&gt;build-orbit&lt;/code&gt;) using its orbital radius&lt;/li&gt;
&lt;li&gt;building label primitive (&lt;code&gt;qto&lt;/code&gt; - _quick text object`) for planet using the passed string&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the star of Sun is created, planets and all of them are put into &amp;ldquo;solar system&amp;rdquo; instance (&lt;code&gt;solar-system&lt;/code&gt;). while filling planets structures, the labels primitives are built for each one.&lt;/li&gt;
&lt;li&gt;using the planets data the orbits are built&lt;/li&gt;
&lt;li&gt;functions are defined

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;draw-star&lt;/code&gt;, it draws a star&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draw-planet&lt;/code&gt;, it draws a planet in the required position depending on current time and moving the text label in the same position&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render&lt;/code&gt; function is defined, it draws sun and planets one by one, calling &lt;code&gt;draw-star&lt;/code&gt; and &lt;code&gt;draw-planet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render&lt;/code&gt; is assigned to be a function executed for each frame&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/17502661&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/17502661&#34;&gt;Fluxus Livecoding: Building 3D Solar System / Part 1&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/17515694&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/17515694&#34;&gt;Fluxus Livecoding: Building 3D Solar System / Part 2&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/17516078&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/17516078&#34;&gt;Fluxus Livecoding: Building 3D Solar System / Part 3&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Sandwitch Tumblr Theme</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/tumblr-sandwitch-theme/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/tumblr-sandwitch-theme/</id>
                <updated>2010-12-02T23:14:00Z</updated>
                
                <summary type="html">Have created &lt;a href=&#34;http://www.tumblr.com/theme/18012&#34;&gt;Tumblr theme&lt;/a&gt; named &lt;a href=&#34;http://uncyclopedia.wikia.com/wiki/Sandwitch&#34;&gt;Sandwitch&lt;/a&gt;. I was going to make tumblr-blog look like &lt;a href=&#34;http://code.google.com/p/showdown-blog/&#34;&gt;showdown blog&lt;/a&gt;-engine style I&amp;rsquo;ve made, and seems the result in the end is even better!</summary>
                <content type="html">&lt;p&gt;Have created &lt;a href=&#34;http://www.tumblr.com/theme/18012&#34;&gt;Tumblr theme&lt;/a&gt; named &lt;a href=&#34;http://uncyclopedia.wikia.com/wiki/Sandwitch&#34;&gt;Sandwitch&lt;/a&gt;. I was going to make tumblr-blog look like &lt;a href=&#34;http://code.google.com/p/showdown-blog/&#34;&gt;showdown blog&lt;/a&gt;-engine style I&amp;rsquo;ve made, and seems the result in the end is even better!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/tumblr-sandwitch-theme/screen.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;

&lt;p&gt;You can turn on tweets translation, allow &lt;a href=&#34;http://disqus.com&#34;&gt;Disqus&lt;/a&gt; comments and&amp;hellip; write posts with source code highlighting!&lt;/p&gt;

&lt;p&gt;To use source code highlighting it is required to make first line in your code blocks to be something like &lt;code&gt;#!xml&lt;/code&gt;, so I recommend to write them using &lt;code&gt;Markdown&lt;/code&gt;-edtior (it can be selected in your &lt;a href=&#34;http://www.tumblr.com/preferences&#34;&gt;profile preferences&lt;/a&gt;). &lt;a href=&#34;http://shjs.sourceforge.net/&#34;&gt;SHJS&lt;/a&gt; (copied to &lt;code&gt;static.tumblr&lt;/code&gt;) is used to make it work. You also must specify programming languages used in blog manually (not just by checking &amp;ldquo;Highlight code&amp;rdquo; checkbox) in the sort of: &lt;code&gt;[&amp;#39;html&amp;#39;,&amp;#39;css&amp;#39;,&amp;#39;xml&amp;#39;,&amp;#39;javascript&amp;#39;,&amp;#39;java&amp;#39;,&amp;#39;python&amp;#39;,&amp;#39;sh&amp;#39;]&lt;/code&gt;. The languages you can enable are: &lt;code&gt;html&lt;/code&gt; (HTML), &lt;code&gt;xml&lt;/code&gt; (XML), &lt;code&gt;css&lt;/code&gt; (CSS), &lt;code&gt;javascript&lt;/code&gt; (JavaScript), &lt;code&gt;python&lt;/code&gt; (Python), &lt;code&gt;java&lt;/code&gt; (Java), &lt;code&gt;ruby&lt;/code&gt; (Ruby), &lt;code&gt;sql&lt;/code&gt; (SQL), &lt;code&gt;sh&lt;/code&gt; (Unix Shell), &lt;code&gt;php&lt;/code&gt; (PHP), &lt;code&gt;cpp&lt;/code&gt; (C++), &lt;code&gt;csharp&lt;/code&gt; (C#).&lt;/p&gt;

&lt;p&gt;To translate tweets, set your &amp;ldquo;Twitter username&amp;rdquo; at &lt;a href=&#34;http://www.tumblr.com/customize&#34;&gt;theme customization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To turn on &lt;a href=&#34;http://disqus.com&#34;&gt;Disqus&lt;/a&gt;, set your &amp;ldquo;Disqus shortname&amp;rdquo; at the &lt;a href=&#34;http://www.tumblr.com/customize&#34;&gt;very same settings&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Easy as Sandwich: Blog Engine in JavaScript and XML</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/easy-as-sandwich-blog-engine/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/easy-as-sandwich-blog-engine/</id>
                <updated>2010-11-17T23:14:00Z</updated>
                
                <summary type="html">Say you suddenly needed a personal blog. I already have some puny free hosting, and it hosting is puny for real, so it has no PHP and it even has no possibilities to set up any server-side at all. Or even worse, you have only a Dropbox account and in this very moment, suddenly, the personal blog is needed.</summary>
                <content type="html">&lt;p&gt;Say you suddenly needed a personal blog. I already have some puny free hosting, and it hosting is puny for real, so it has no PHP and it even has no possibilities to set up any server-side at all. Or even worse, you have only a Dropbox account and in this very moment, suddenly, the personal blog is needed.&lt;/p&gt;

&lt;p&gt;And more, may be you prefer to write you posts in Markdown-syntax instead of writing a heavy sad posts using dull HTML. The more, Markdown is now supported at a lot of places (excluding MSDN articles, may be). And there wouldn&amp;rsquo;t be out of place to store separate posts in separate files, so you can take one and copy-paste it in Tumblr or somewhere else. And it gives you a possibility to push files in some repository and to make your articles versioned this way&amp;hellip;&lt;/p&gt;

&lt;p&gt;And more, you&amp;rsquo;d like to have two versions of your blog in one entry point. English and russian, for example.&lt;/p&gt;

&lt;p&gt;I think you now feel what I mean: I have a proposal for you abou this all. It&amp;rsquo;d be better to give more than one link already but I am an evil geek so I&amp;rsquo;ll put one in the end of article.&lt;/p&gt;
&lt;h3 id=&#34;picture&#34;&gt;Picture&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/easy-as-sandwich-blog-engine/screenshot-small.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;components&#34;&gt;Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jquery.com&#34;&gt;JQuery&lt;/a&gt;, for bread&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.attacklab.net/showdown/&#34;&gt;Showdown&lt;/a&gt;, for a sausage&lt;/li&gt;
&lt;li&gt;And a dates parser for a mustard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not to make things to hard, I&amp;rsquo;ve taken &lt;a href=&#34;http://jquery.com&#34;&gt;JQuery&lt;/a&gt; (I use only DOM-operations and a helper to load XML files asynchronously from it, so for the cruel need it can be accurately excised). Then I&amp;rsquo;ve taken  &lt;a href=&#34;http://www.attacklab.net/showdown/&#34;&gt;Showdown&lt;/a&gt;, it is Markdown syntax parser moved to JavaScript. Then I&amp;rsquo;ve taken some strange dates parser (to display them nicely). And I&amp;rsquo;ve mixed all these stuff into one solid thing, so I&amp;rsquo;ve got a crazy little thing called JS/XML-driven blog engine. Easy as sandwich.&lt;/p&gt;
&lt;h3 id=&#34;receipt&#34;&gt;Receipt&lt;/h3&gt;
&lt;p&gt;To write your first post in a blog, get &lt;a href=&#34;http://code.google.com/p/showdown-blog/downloads/detail?name=swblog.zip&#34;&gt;this package&lt;/a&gt;, unpack. Update your preferences (&lt;code&gt;prefs.xml&lt;/code&gt;), create some post (&lt;code&gt;posts/&amp;lt;post-id&amp;gt;.xml&lt;/code&gt;), add &lt;code&gt;&amp;lt;post-id&amp;gt;&lt;/code&gt; in &lt;code&gt;posts.xml&lt;/code&gt;. That&amp;rsquo;s all, you&amp;rsquo;re ready, post is published. For the next posts just repeat only last two steps. (In &lt;code&gt;./create.html&lt;/code&gt; you&amp;rsquo;ll find an editor that is ripped out from Showdown, and it will help your phantasy to imagine what Markdown-syntax parsing result will look like).&lt;/p&gt;

&lt;p&gt;Now, once more&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set up ising &lt;code&gt;prefs.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put &lt;code&gt;some-post.xml&lt;/code&gt; in &lt;code&gt;posts&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;some-post&lt;/code&gt; to &lt;code&gt;posts.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat steps 2 and 3 for next posts&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;advantages&#34;&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimalism.&lt;/li&gt;
&lt;li&gt;No server side. At all.&lt;/li&gt;
&lt;li&gt;Posts are written with Markdown-syntax.&lt;/li&gt;
&lt;li&gt;One post - one XML file&lt;/li&gt;
&lt;li&gt;Configuration-over-XML&lt;/li&gt;
&lt;li&gt;Styles-over-CSS&lt;/li&gt;
&lt;li&gt;Tags, tags cloud and tags navigation&lt;/li&gt;
&lt;li&gt;Permalink for every post&lt;/li&gt;
&lt;li&gt;Supports mobile browsers (some)&lt;/li&gt;
&lt;li&gt;Several entry-points are supported&lt;/li&gt;
&lt;li&gt;RSS-generating script is included out-of-the-box&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disadvantages&#34;&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No commenting support&lt;/li&gt;
&lt;li&gt;No indexing with search engines&lt;/li&gt;
&lt;li&gt;Only for JavaScript-powered browsers&lt;/li&gt;
&lt;li&gt;Javascript and JQuery sometimes go slowly in slow networks&lt;/li&gt;
&lt;li&gt;If you have no &lt;code&gt;.htaccess&lt;/code&gt;, user must name &lt;code&gt;index.html&lt;/code&gt; explicitly&lt;/li&gt;
&lt;li&gt;Things to optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;may-be-later&#34;&gt;May be later&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Paging&lt;/li&gt;
&lt;li&gt;Templates support&lt;/li&gt;
&lt;li&gt;More Nice RSS / RSS Automation&lt;/li&gt;
&lt;li&gt;Calendar&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://showdown-blog.googlecode.com/hg/index.html&#34;&gt;Path to example&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;source-code&#34;&gt;Source code&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://showdown-blog.googlecode.com/&#34;&gt;Googlecode project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; Advantages and disadvatages had a bit changed through time, visit the project page to see how exactly they&amp;rsquo;ve changed.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Way of the Rainbow: Fingers Motion Detection Algorythm Based on a Colors Differentiation (Driven by LISP)</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/nijiato-detection-of-fingers-motion-algorithm/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/nijiato-detection-of-fingers-motion-algorithm/</id>
                <updated>2010-08-12T23:14:00Z</updated>
                
                <summary type="html">I am crazy a little bit, so in my spare time I&amp;rsquo;ve started to study Lisp and, to make my studying more interesting, I&amp;rsquo;ve tried to make a realization of my own algorithm. &amp;ldquo;Algorythm&amp;rdquo;, for sure, is spoken too loudly, it has no matrix multiplication, no arrays sorting, no bubbles and no hard work in optimization (even no colors calibration, I sorry myself with the fact that this version if for learning). And yes, there are a lot of pictures in the article, and in the end there even will be a video.</summary>
                <content type="html">&lt;p&gt;I am crazy a little bit, so in my spare time I&amp;rsquo;ve started to study Lisp and, to make my studying more interesting, I&amp;rsquo;ve tried to make a realization of my own algorithm. &amp;ldquo;Algorythm&amp;rdquo;, for sure, is spoken too loudly, it has no matrix multiplication, no arrays sorting, no bubbles and no hard work in optimization (even no colors calibration, I sorry myself with the fact that this version if for learning). And yes, there are a lot of pictures in the article, and in the end there even will be a video.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/nijiato&#34;&gt;Link to the sources, in advance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal is simple: Detect the positions of all ten finger in 2D-space (position coordinates and the tilt angle of each in discrete moment), translate these data through &lt;code&gt;stdout&lt;/code&gt; or using socket to another application, so the last will have a possibility to make assumptions about &amp;ldquo;gestures&amp;rdquo; which user do and react appropriately in user interface. The inspiration for me was in the &lt;a href=&#34;http://www.ted.com/talks/lang/eng/john_underkoffler_drive_3d_data_with_a_gesture.html&#34;&gt;John Underkoffler talk about future interfaces&lt;/a&gt; and the fact that &lt;a href=&#34;http://www.cliki.net/CL-V4L2&#34;&gt;video4linux bindings for Common Lisp&lt;/a&gt; by Vitaly Mayatskih were caught by the arm and they could not have come at a better time. Here I present you only the first part - a program that detects coordinates and pinch of fingers. I dont&amp;rsquo;t know if I&amp;rsquo;ll make myself implement the other parts and make an enterprise condition of this part, if no-one will be interested.&lt;/p&gt;

&lt;p&gt;The distinctive feature of this way is that it, with the proper courage, can be reproduced in the home conditions. To detect fingers positions in space no sensors or euristic algorithms or pattern-matching like in OpenCV is used. What is used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Lisp-interpreter, SBCL is preferred&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/nijiato/wiki/RequiredCLpackages&#34;&gt;A bunch of Common-Lisp packages&lt;/a&gt; (but may be you already have installed lot of them if you are working with Lisp)&lt;/li&gt;
&lt;li&gt;video4linux driver (&lt;code&gt;v4l2convert.so&lt;/code&gt;) and GTK support&lt;/li&gt;
&lt;li&gt;Any web-camera compatible with video4linux (mine is Genius iSlim 300)&lt;/li&gt;
&lt;li&gt;Ten slips of paper which you can put on fingers: two of red, two of orange, two of yellow, two of green and two of blue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These slips are the base of this crazy-little-algorithm, you can implement it without other parts in any programming language and in eny environment. &lt;a href=&#34;http://code.google.com/p/nijiato/source/browse/nijiato-recognition.lisp&#34;&gt;Algorythm source code is located here&lt;/a&gt;, you can follow the code and the description simultaneously. Lisp is considered self-documenting language so I hope everything will be clear :).&lt;/p&gt;
&lt;h3 id=&#34;koo.-initial-data&#34;&gt;Koo. Initial data&lt;/h3&gt;
&lt;p&gt;In the beginning we need to define which colors a program will discover and understand that &lt;em&gt;possibly&lt;/em&gt; there is a finger located in this place. There is no sence to make them exact, we need to determine some delta, a small span of possible values to get both areas, a lighter and a darker one, approximately one color, in our &amp;ldquo;suspicious&amp;rdquo; region. I gave the own delta for each color, just because each of them usually behaves diffrently in respect of other ones. All my values are &amp;ldquo;hardcoded&amp;rdquo; - I found them through several experiments for concrete illumination and for concrete time of the day (a program works good in my house with the lights turned on from 8PM to the late night with the default camera brightness - it matches the most times and conditions when I have returned back from work). Let we consider it the learning version and that will excuse me. We may add some pre-calibration or general frame illumination analysis and make a colors correction in accordance with this value, but the everyones&amp;#39; slips themselves will be differently shaded anyway, if just we dont start the mass production of them with identical colors inoculated to tomorrow.&lt;/p&gt;

&lt;p&gt;So, let us put the slips on our fingers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/nijiato-detection-of-fingers-motion-algorithm/colors.png&#34; alt=&#34;Color values&#34;&gt;&lt;/p&gt;

&lt;p&gt;The RGB-components on a picture are presented in the range from 0 to 1, the overflow when adding/subtracting is ignored. More of that, this colors are individual for my case, that&amp;rsquo;s whay they look like not ideal.&lt;/p&gt;
&lt;h3 id=&#34;koo.-first-pass.-detecting-possible-fingers39-locations-areas.&#34;&gt;Koo. First pass. Detecting possible fingers&amp;#39; locations areas.&lt;/h3&gt;
&lt;p&gt;The main array in the program is &lt;code&gt;*fingers-values*&lt;/code&gt; which length is (frame width * frame height). Its every cell corresponds to concrete frame pixel and will contain the number in range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;200&lt;/code&gt;. This array is re-filled with new values (calculated using pixels&amp;#39; RGB-components) in every next frame.&lt;/p&gt;

&lt;p&gt;So, while the algorithm cycle goes on, the &lt;code&gt;*fingers-values*&lt;/code&gt; array will contain values like these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; value - pixel does not match any color plus-minus&lt;/li&gt;
&lt;li&gt;Values in range from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;49&lt;/code&gt; - these values are for expected areas of left hand fingers locations, with &lt;code&gt;9-10&lt;/code&gt; per every finger&lt;/li&gt;
&lt;li&gt;Values in range from &lt;code&gt;50&lt;/code&gt; tо &lt;code&gt;99&lt;/code&gt; - these values are for expected areas of right hand fingers locations, with &lt;code&gt;10&lt;/code&gt; per every finger&lt;/li&gt;
&lt;li&gt;Values greater than &lt;code&gt;100&lt;/code&gt; and less than &lt;code&gt;200&lt;/code&gt; - the exact location of the according finger, to discover which one - subtract &lt;code&gt;100&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No let&amp;rsquo;s get back to the algorithm, we&amp;rsquo;re running first pass, analysing current video frame pixel by pixel.&lt;/p&gt;

&lt;p&gt;If pixel does not filled with any color defined before plus-minus delta, we write &lt;code&gt;0&lt;/code&gt; to the corresponding &lt;code&gt;*fingers-values*&lt;/code&gt; array cell. If here is &lt;em&gt;may be&lt;/em&gt; some concrete finger (color of pixel matches to one of predefined colors plus-minus delta), we write the correnponding number to the corresponding cell - &lt;code&gt;1-9&lt;/code&gt; for thumb, &lt;code&gt;10-19&lt;/code&gt; for index, &lt;code&gt;20-29&lt;/code&gt; for middle, &lt;code&gt;30-39&lt;/code&gt; for ring-finger and &lt;code&gt;40-49&lt;/code&gt; for little one. Currently I write only &lt;code&gt;9&lt;/code&gt;,&lt;code&gt;19&lt;/code&gt;, &lt;code&gt;29&lt;/code&gt;, &lt;code&gt;39&lt;/code&gt;, &lt;code&gt;49&lt;/code&gt; values in the cells - I expected to make an additional gradation depending on how close was the value to the &amp;ldquo;middle&amp;rdquo; color, but this proved unnecessary (but ranges of &lt;code&gt;10&lt;/code&gt; are making great help in future). It is expected that fingers of left hand are found by default. The number of detected areas of same color are not controlled or regulated any way at this step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/nijiato-detection-of-fingers-motion-algorithm/values.png&#34; alt=&#34;Сorrespondence of colors and fingers&#34;&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all, the frame was scanned, but it is just a first step: &lt;em&gt;there are values less than &lt;code&gt;50&lt;/code&gt; in our array&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;koo.-second-pass.-detecting-coordinates-and-angles.&#34;&gt;Koo. Second pass. Detecting coordinates and angles.&lt;/h3&gt;
&lt;p&gt;Before second pass over the frame the temporary array of 10 booleans named &lt;code&gt;hits&lt;/code&gt; is created. We control what fingers are already detected with this array. No we are going over every cell of main &lt;code&gt;*fingers-values*&lt;/code&gt; array, one by one. If the value of current cell is greater than zero and less than &lt;code&gt;100&lt;/code&gt; then we check if that finger was already detected, if was- we skip this cell, if not - we&amp;rsquo;re trying to make decision on what hand can it be using the &lt;code&gt;x&lt;/code&gt; coodinate for this cell. If the same finger for left hand was found and its &lt;code&gt;x&lt;/code&gt; coordinate was greater than current (but not too close to current, I check if no closer than &lt;code&gt;80px&lt;/code&gt;) so we, seems, got the right hand - so we add &lt;code&gt;50&lt;/code&gt; to current value and work with already updated one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/nijiato-detection-of-fingers-motion-algorithm/distance.png&#34; alt=&#34;Distance between fingers&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now we now which hand it is and the estimated finger location area, it is left to detect its coordinates. So we save &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of current pixel and then in cycle through angles from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;pi&lt;/code&gt; with a &lt;code&gt;pi / 20&lt;/code&gt; step (for example) we calculate the pixels&amp;#39; coords for each beam with the corresponding angle which extends from the saved point (in a non-learning version we can make a cache for relative values of these), the beams length is set to the predefined value, in my case it is &lt;code&gt;31px&lt;/code&gt; (including current pixel, 15 to the end and 15 to the start), and their center is located in current point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/nijiato-detection-of-fingers-motion-algorithm/angles.png&#34; alt=&#34;Angles detection algorithm&#34;&gt;&lt;/p&gt;

&lt;p&gt;The pixels&amp;#39; coordinates of each beam are uniquely correspond with indexes of neigbour cells in &lt;code&gt;*fingers-values*&lt;/code&gt; array. While staying in current point with cursor we count pixel-by-pixel for every beam the number of matched values (those whos value between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;50&lt;/code&gt;, adding &lt;code&gt;50&lt;/code&gt; if the current hand is right) and if this number is acceptable for this length (I grant it to have error in 4 pixels, so for minimum 27 pixels of 31 must match) then bingo - &lt;strong&gt;we have detected the angle and finger position&lt;/strong&gt;: finger coordinates (relative) - it is the start and end points of the beam and the finger pinch is the angle of matched beam. We can write to &lt;code&gt;*hits*&lt;/code&gt; that finger is found and pass this data to the screen (or to &lt;code&gt;stdout&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/nijiato-detection-of-fingers-motion-algorithm/smile.png&#34; alt=&#34;Smile&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;koo.-possible-applications.&#34;&gt;Koo. Possible applications.&lt;/h3&gt;
&lt;p&gt;When we know fingers coordinates and their tilt angles, we can identify almost any gesture. But the analysator need to have the ability of &amp;ldquo;prediction&amp;rdquo; of fingers position using the previous states - if the finger was suddenly lost in the center of frame so may be a hand was tightened into a fist or else, if it was lost at the edge of the frame, may be it was a fast outward movement. There is a solvable problem about detecting the hand that owns a single finger - it can be solved using additional markers for palms (if marker is not seen and a fingers are in back order on the frame - it is the backside), there are navy blue and violet colors left (I&amp;rsquo;ve added them to pictures for clarity). Or it even may be ignored what hand it is for gestures if there is insuffiecient amount of data (only two fingers are visible from camera). These gestures may be used to manipulate interfaces (as in the &lt;a href=&#34;http://www.ted.com/talks/lang/eng/john_underkoffler_drive_3d_data_with_a_gesture.html&#34;&gt;mentioned video&lt;/a&gt; - to move windows, watching images in albums, making all like in Minority Report, and there&amp;rsquo;s only web-camera and psychological barrier overcome (to put the colored slips or the similar controllers on the fingers) required). Currently it is cheaper than densors and more funny than current applications of Microsoft Kinect :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; The people gave me &lt;a href=&#34;http://blog.makezine.com/archive/2010/07/gestural_interface_via_flamboyant_g.html&#34;&gt;this video&lt;/a&gt;, the idea seems similar but my version is more attic anyway :). And time had passed and Microsoft Kinect does much more iterensting thing now, so sorry me, Microsoft Kinect :)&lt;/p&gt;
&lt;h3 id=&#34;koo.-what-to-improve&#34;&gt;Koo. What to improve&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add calibration, detect illumination/brightness level, make &amp;ldquo;Nijiato, colored slip of paper&amp;rdquo; a mass production item.&lt;/li&gt;
&lt;li&gt;Detect what hand we see in camera with more intelligent way, using additional marker on a hand, for example)&lt;/li&gt;
&lt;li&gt;Much of optimization:

&lt;ul&gt;
&lt;li&gt;relative coordinates of the beams may be cached&lt;/li&gt;
&lt;li&gt;calculations may be threaded&lt;/li&gt;
&lt;li&gt;we may scan not every frame but every tenth and to presume fast movements using gestures data&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;koo.-readme&#34;&gt;Koo. README&lt;/h3&gt;
&lt;p&gt;Currently it is required to install Linux packages named &lt;code&gt;libv4l-dev&lt;/code&gt; and &lt;code&gt;libgtkglext&lt;/code&gt; and register in ADSF the CLisp packages from &lt;a href=&#34;http://code.google.com/p/nijiato/source/browse/requirements&#34;&gt;this list&lt;/a&gt; (the repositories and required commands are indicated). Also you can install &lt;code&gt;rlwrap&lt;/code&gt; to make yor work with interpretor easier. If you have 64bit system, you need to remove a hack from CL-V4L2 bindings, it is also described in &lt;a href=&#34;http://code.google.com/p/nijiato/source/browse/requirements&#34;&gt;requirements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whene these operations are done, the launch is simple as that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ LD_PRELOAD=&amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;libv4l&amp;#x2F;v4l2convert.so [rlwrap] sbcl
* (load &amp;quot;nijiato-demo-load.lisp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;code&gt;.so&lt;/code&gt;-file may be placed somewhere else depending on a bitness and structure of your OS)&lt;/p&gt;

&lt;p&gt;The program in fact is the hardly revised demo-example from &lt;code&gt;CL-V4L2&lt;/code&gt; that shows GTK-window and projects an OpenGL-texture with camera image in it and also allows to get current pixels in every frame. FASL-version can fail to start, I am fighting with this problem. (&lt;strong&gt;Upd.&lt;/strong&gt; No way, I&amp;rsquo;ve forgot)&lt;/p&gt;
&lt;h3 id=&#34;koo.-video&#34;&gt;Koo. Video&lt;/h3&gt;
&lt;p&gt;And finally a video that show program in work. It loads a lot of libraries at start, you can skip first 30 seconds approximately. &amp;ldquo;Detected&amp;rdquo; positions of fingers are shown with slim 1-pixel black line (those matched beams) and shown in the console in readable form. In the middle of video two thumbs of both hands are not detected, that is because the distance between them is less than 80 pixels that I have set to be minimal width between hands. The window from camera is intentionally small to ease the calculations for a program :).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vimeo.com/14073181&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/nijiato-detection-of-fingers-motion-algorithm/vimeo-video-frame.png&#34; alt=&#34;Link to Vimeo video&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Some (not a lot of) phrases in this article are related to the Russian epic sci-fi movie named &lt;a href=&#34;http://www.imdb.com/title/tt0091341/&#34;&gt;Kin-dza-dza&lt;/a&gt;, so I promote it with this article :)&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Fluxus — Prototyping OpenGL graphics and games on-the-fly (add Scheme to taste)</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/post-about-fluxus/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/post-about-fluxus/</id>
                <updated>2010-07-10T23:14:00Z</updated>
                
                <summary type="html">The internet for a programmer who insterested in 3D-graphics for several years is full of videos where people programming music visualizers, complex color-morphing effects or even more tricky things working at the intersection of technology - literally the author writes code and somewhere on background it is compiled and executed and the author sees the result - this process named &lt;em&gt;livecoding&lt;/em&gt;. Most recently the programs like these are written in lisp-family languages, the similar editor exists for ProcessingJS, it renders code immediately in browser, but its not about it.</summary>
                <content type="html">&lt;p&gt;The internet for a programmer who insterested in 3D-graphics for several years is full of videos where people programming music visualizers, complex color-morphing effects or even more tricky things working at the intersection of technology - literally the author writes code and somewhere on background it is compiled and executed and the author sees the result - this process named &lt;em&gt;livecoding&lt;/em&gt;. Most recently the programs like these are written in lisp-family languages, the similar editor exists for ProcessingJS, it renders code immediately in browser, but its not about it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;&lt;strong&gt;Fluxus&lt;/strong&gt;&lt;/a&gt; - it is a cross-platform 3D-engine for games drafts based on &lt;a href=&#34;http://www.toplap.org&#34;&gt;livecoding&lt;/a&gt; principles and simultaneously the prototyping tool for 3D-graphics and interactive things. And there is &lt;a href=&#34;http://www.pawfal.org/fluxus/documentation&#34;&gt;pretty detailed documentation exist&lt;/a&gt;. Programming language is extended with graphic functions []PLT Scheme](&lt;a href=&#34;http://racket-lang.org&#34;&gt;http://racket-lang.org&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However, &lt;a href=&#34;http://www.youtube.com/watch?v=aTt8r3LhCFM&#34;&gt;see for yourself&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;object width=&#34;480&#34; height=&#34;385&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/aTt8r3LhCFM?fs=1&amp;amp;hl=en_US&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/aTt8r3LhCFM?fs=1&amp;amp;hl=en_US&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;480&#34; height=&#34;385&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;When application launched, it is started in interpretor mode. To switch to code editor mode, which is used in the most of the videos, press &lt;code&gt;Ctrl+1&lt;/code&gt;. To render current defined scene - press &lt;code&gt;F5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hereis, for example, two rotating spheres that change their colors through time:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;scheme&#34;&gt;
(define (animate)
    (let* ((t (* (time) 2))
           (x (sin t))
           (y (cos t)))

    (with-state
        (translate (vector x y 0))
        (colour (vector (+ 1.5 (sin (time))) 0 0))
        (draw-sphere))

    (with-state
        (translate (vmul (vector x y 0) 3))
        (colour (vector 0 0 (- 1.5 (sin (time)))))
        (draw-sphere))))

(every-frame (animate))

&lt;/code&gt;&lt;/pre&gt;</content>
            </entry>
        
            <entry>
                <title>Ant JUnit Nice Output Formatter</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/ant-junit-one-liner-output-formatter/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/ant-junit-one-liner-output-formatter/</id>
                <updated>2010-04-08T23:14:00Z</updated>
                
                <summary type="html">I&amp;rsquo;ve seached for nice Apache Ant formatter which do not writes full stack trace in console/file and just writes what methods are passed, what methods are failed, and if failed - where and why they failed (and only trace about methods from test class). I haven&amp;rsquo;t found any. So I&amp;rsquo;ve written one.</summary>
                <content type="html">&lt;p&gt;I&amp;rsquo;ve seached for nice Apache Ant formatter which do not writes full stack trace in console/file and just writes what methods are passed, what methods are failed, and if failed - where and why they failed (and only trace about methods from test class). I haven&amp;rsquo;t found any. So I&amp;rsquo;ve written one.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[junit] ----------------------------------------------------------
[junit] Testsuite: com.undefined.MyTest
[junit] Ran [0.322] testMethodOne ... OK
[junit] Ran [0.023] testMethodOne... OK
[junit] Ran [0.333] testMethodTwo ... FAILED
[junit] Ran [0.343] testMethodThree ... FAILED
[junit]
[junit] Testcase: testMethodTwo(com.undefined.MyTest):  FAILED
[junit]     (AssertionFailedError): expected:&amp;lt;Bender&amp;gt; but was:&amp;lt;null&amp;gt;
[junit]     (MyTest) assertEqualsInfo: 887
[junit]     (MyTest) testGetUserInfoByUserId: 188
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is ant task for this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;xml&#34;&gt;
&amp;lt;target name=&amp;quot;easy-test&amp;quot; depends=&amp;quot;test-clean, compile&amp;quot;&amp;gt;
    &amp;lt;mkdir dir=&amp;quot;out&amp;#x2F;junit&amp;quot;&amp;#x2F;&amp;gt;

    &amp;lt;junit printsummary=&amp;quot;off&amp;quot; fork=&amp;quot;on&amp;quot;
           failureproperty=&amp;quot;test.failed&amp;quot; showoutput=&amp;quot;off&amp;quot; dir=&amp;quot;out&amp;quot;
           outputtoformatters=&amp;quot;false&amp;quot; filtertrace=&amp;quot;on&amp;quot; &amp;gt;

        &amp;lt;classpath&amp;gt;

            ....

        &amp;lt;&amp;#x2F;classpath&amp;gt;

        &amp;lt;formatter classname=&amp;quot;com.undefined.testing.OneLinerFormatter&amp;quot; usefile=&amp;quot;false&amp;quot; &amp;#x2F;&amp;gt;

        &amp;lt;batchtest fork=&amp;quot;on&amp;quot; todir=&amp;quot;out&amp;#x2F;junit&amp;quot; filtertrace=&amp;quot;on&amp;quot;&amp;gt;
            &amp;lt;fileset dir=&amp;quot;src&amp;#x2F;java&amp;#x2F;test&amp;quot;&amp;gt;
                &amp;lt;include name=&amp;quot;**&amp;#x2F;*Test.java&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;fileset&amp;gt;
        &amp;lt;&amp;#x2F;batchtest&amp;gt;

    &amp;lt;&amp;#x2F;junit&amp;gt;

    &amp;lt;fail if=&amp;quot;test.failed&amp;quot;&amp;gt;tests.failed=${test.failed}&amp;lt;&amp;#x2F;fail&amp;gt;

&amp;lt;&amp;#x2F;target&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, the implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
package com.undefined.testing;

import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.text.NumberFormat;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import junit.framework.AssertionFailedError;
import junit.framework.Test;

import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelper;

import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.util.StringUtils;

&amp;#x2F;**
 * Prints a single lines of tests to a specified Writer.
 * Inspired by the BriefJUnitResultFormatter and
 * XMLJUnitResultFormatter.
 *
 * @see FormatterElement
 * @see BriefJUnitResultFormatter
 * @see XMLJUnitResultFormatter
 *&amp;#x2F;

public class OneLinerFormatter implements JUnitResultFormatter {

    private final String TAB_STR = &amp;quot;    &amp;quot;;

    private final boolean showCausesLines = true;
    &amp;#x2F;&amp;#x2F; (\w+\.)+(\w+)\((\w+).(?:\w+):(\d+)\)
    private final Pattern traceLinePattern = Pattern.compile(&amp;quot;(\\w+\\.)+(\\w+)\\((\\w+).(?:\\w+):(\\d+)\\)&amp;quot;);

    &amp;#x2F;**
     * Where to write the log to.
     *&amp;#x2F;
    private OutputStream out;

    &amp;#x2F;**
     * Used for writing the results.
     *&amp;#x2F;
    private PrintWriter output;

    &amp;#x2F;**
     * Used as part of formatting the results.
     *&amp;#x2F;
    private StringWriter results;

    &amp;#x2F;**
     * Used for writing formatted results to.
     *&amp;#x2F;
    private PrintWriter resultWriter;

    &amp;#x2F;**
     * Formatter for timings.
     *&amp;#x2F;
    private NumberFormat numberFormat = NumberFormat.getInstance();

    &amp;#x2F;**
     * Output suite has written to System.out
     *&amp;#x2F;
    private String systemOutput = null;

    &amp;#x2F;**
     * Output suite has written to System.err
     *&amp;#x2F;
    private String systemError = null;

    &amp;#x2F;**
     * tests that failed.
     *&amp;#x2F;
    private Hashtable failedTests = new Hashtable();
    &amp;#x2F;**
     * Timing helper.
     *&amp;#x2F;
    private Hashtable testStarts = new Hashtable();

    &amp;#x2F;**
     * Constructor for OneLinerFormatter.
     *&amp;#x2F;
    public OneLinerFormatter() {
        results = new StringWriter();
        resultWriter = new PrintWriter(results);
    }

    &amp;#x2F;**
     * Sets the stream the formatter is supposed to write its results to.
     * @param out the output stream to write to
     *&amp;#x2F;
    public void setOutput(OutputStream out) {
        this.out = out;
        output = new PrintWriter(out);
    }

    &amp;#x2F;**
     * @see JUnitResultFormatter#setSystemOutput(String)
     *&amp;#x2F;
    public void setSystemOutput(String out) {
        systemOutput = out;
    }

    &amp;#x2F;**
     * @see JUnitResultFormatter#setSystemError(String)
     *&amp;#x2F;
    public void setSystemError(String err) {
        systemError = err;
    }

    &amp;#x2F;**
     * The whole testsuite started.
     * @param suite the test suite
     *&amp;#x2F;
    public void startTestSuite(JUnitTest suite) {
        if (output == null) {
            return; &amp;#x2F;&amp;#x2F; Quick return - no output do nothing.
        }
        StringBuffer sb = new StringBuffer(StringUtils.LINE_SEP);
        sb.append(&amp;quot;----------------------------------------------------------&amp;quot;);
        sb.append(StringUtils.LINE_SEP);
        sb.append(&amp;quot;Testsuite: &amp;quot;);
        sb.append(suite.getName());
        sb.append(StringUtils.LINE_SEP);
        output.write(sb.toString());
        output.flush();
    }

    &amp;#x2F;**
     * The whole testsuite ended.
     * @param suite the test suite
     *&amp;#x2F;
    public void endTestSuite(JUnitTest suite) {
        StringBuffer sb = new StringBuffer(&amp;quot;Tests run: &amp;quot;);
        sb.append(suite.runCount());
        sb.append(&amp;quot;, Failures: &amp;quot;);
        sb.append(suite.failureCount());
        sb.append(&amp;quot;, Errors: &amp;quot;);
        sb.append(suite.errorCount());
        sb.append(&amp;quot;, Time elapsed: &amp;quot;);
        sb.append(numberFormat.format(suite.getRunTime() &amp;#x2F; 1000.0));
        sb.append(&amp;quot; sec&amp;quot;);
        sb.append(StringUtils.LINE_SEP);
        sb.append(StringUtils.LINE_SEP);

        &amp;#x2F;&amp;#x2F; append the err and output streams to the log
        if (systemOutput != null &amp;amp;&amp;amp; systemOutput.length() &amp;gt; 0) {
            sb.append(&amp;quot;------------- Standard Output ---------------&amp;quot;)
              .append(StringUtils.LINE_SEP)
              .append(systemOutput)
              .append(&amp;quot;------------- ---------------- ---------------&amp;quot;)
              .append(StringUtils.LINE_SEP);
        }

        if (systemError != null &amp;amp;&amp;amp; systemError.length() &amp;gt; 0) {
            sb.append(&amp;quot;------------- Standard Error -----------------&amp;quot;)
              .append(StringUtils.LINE_SEP)
              .append(systemError)
              .append(&amp;quot;------------- ---------------- ---------------&amp;quot;)
              .append(StringUtils.LINE_SEP);
        }

        if (output != null) {
            try {
                output.write(sb.toString());
                resultWriter.close();
                output.write(results.toString());
                output.flush();
            } finally {
                if (out != System.out &amp;amp;&amp;amp; out != System.err) {
                    FileUtils.close(out);
                }
            }
        }
    }

    &amp;#x2F;**
     * A test started.
     * @param test a test
     *&amp;#x2F;
    public void startTest(Test test) {
        testStarts.put(test, new Long(System.currentTimeMillis()));
    }

    &amp;#x2F;**
     * A test ended.
     * @param test a test
     *&amp;#x2F;
    public void endTest(Test test) {
        &amp;#x2F;&amp;#x2F; Fix for bug #5637 - if a junit.extensions.TestSetup is
        &amp;#x2F;&amp;#x2F; used and throws an exception during setUp then startTest
        &amp;#x2F;&amp;#x2F; would never have been called
        if (!testStarts.containsKey(test)) {
            startTest(test);
        }

        boolean failed = failedTests.containsKey(test);

        Long l = (Long) testStarts.get(test);

        output.write(&amp;quot;Ran [&amp;quot;);
        output.write(((System.currentTimeMillis() - l.longValue()) &amp;#x2F; 1000.0) + &amp;quot;] &amp;quot;);
        output.write(getTestName(test) + &amp;quot; ... &amp;quot; + (failed ? &amp;quot;FAILED&amp;quot; : &amp;quot;OK&amp;quot;));
        output.write(StringUtils.LINE_SEP);
        output.flush();
    }

    &amp;#x2F;**
     * Interface TestListener for JUnit &amp;gt;= 3.4.
     *
     * &amp;lt;p&amp;gt;A Test failed.
     * @param test a test
     * @param t    the exception thrown by the test
     *&amp;#x2F;
    public void addFailure(Test test, Throwable t) {
        formatError(&amp;quot;\tFAILED&amp;quot;, test, t);
    }

    &amp;#x2F;**
     * Interface TestListener for JUnit &amp;amp;gt; 3.4.
     *
     * &amp;lt;p&amp;gt;A Test failed.
     * @param test a test
     * @param t    the assertion failed by the test
     *&amp;#x2F;
    public void addFailure(Test test, AssertionFailedError t) {
        addFailure(test, (Throwable) t);
    }

    &amp;#x2F;**
     * A test caused an error.
     * @param test  a test
     * @param error the error thrown by the test
     *&amp;#x2F;
    public void addError(Test test, Throwable error) {
        formatError(&amp;quot;\tCaused an ERROR&amp;quot;, test, error);
    }

    &amp;#x2F;**
     * Get test name
     *
     * @param test a test
     * @return test name
     *&amp;#x2F;
    protected String getTestName(Test test) {
        if (test == null) {
            return &amp;quot;null&amp;quot;;
        } else {
            return &amp;#x2F;* JUnitVersionHelper.getTestCaseClassName(test) + &amp;quot;: &amp;quot; + *&amp;#x2F;
                      JUnitVersionHelper.getTestCaseName(test);
        }
    }

    &amp;#x2F;**
     * Get test case full class name
     *
     * @param test a test
     * @return test full class name
     *&amp;#x2F;
    protected String getTestCaseClassName(Test test) {
        if (test == null) {
            return &amp;quot;null&amp;quot;;
        } else {
            return JUnitVersionHelper.getTestCaseClassName(test);
        }
    }

    &amp;#x2F;**
     * Format the test for printing..
     * @param test a test
     * @return the formatted testname
     *&amp;#x2F;
    protected String formatTest(Test test) {
        if (test == null) {
            return &amp;quot;Null Test: &amp;quot;;
        } else {
            return &amp;quot;Testcase: &amp;quot; + test.toString() + &amp;quot;:&amp;quot;;
        }
    }

    &amp;#x2F;**
     * Format an error and print it.
     * @param type the type of error
     * @param test the test that failed
     * @param error the exception that the test threw
     *&amp;#x2F;
    protected synchronized void formatError(String type, Test test,
                                            Throwable error) {
        if (test != null) {
            failedTests.put(test, test);
            endTest(test);
        }

        resultWriter.println(formatTest(test) + type);
        resultWriter.println(TAB_STR + &amp;quot;(&amp;quot; + error.getClass().getSimpleName() + &amp;quot;): &amp;quot; +
                    ((error.getMessage() != null) ? error.getMessage() : error));

        if (showCausesLines) {
            &amp;#x2F;&amp;#x2F; resultWriter.append(StringUtils.LINE_SEP);
            resultWriter.println(filterErrorTrace(test, error));
        }

        resultWriter.println();

        &amp;#x2F;* String strace = JUnitTestRunner.getFilteredTrace(error);
           resultWriter.println(strace);
           resultWriter.println(); *&amp;#x2F;
    }

    protected String filterErrorTrace(Test test, Throwable error) {
        String trace = StringUtils.getStackTrace(error);
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        StringReader sr = new StringReader(trace);
        BufferedReader br = new BufferedReader(sr);

        String line;
        try {
            while ((line = br.readLine()) != null) {
                if (line.indexOf(getTestCaseClassName(test)) != -1) {
                    Matcher matcher = traceLinePattern.matcher(line);
                    &amp;#x2F;&amp;#x2F; pw.println(matcher + &amp;quot;: &amp;quot; + matcher.find());
                    if (matcher.find()) {
                        pw.print(TAB_STR);
                        pw.print(&amp;quot;(&amp;quot; + matcher.group(3) + &amp;quot;)&amp;quot;);
                        pw.print(matcher.group(2) + &amp;quot;: &amp;quot;);
                        pw.println(matcher.group(4));
                    } else {
                        pw.println(line);
                    }
                }
            }
        } catch (Exception e) {
            return trace; &amp;#x2F;&amp;#x2F; return the trace unfiltered
        }

        return sw.toString();

    }

}

&lt;/code&gt;&lt;/pre&gt;</content>
            </entry>
        
            <entry>
                <title>10 Useful Solutions for Android Developer</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/10-useful-solutions-for-android-developer/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/10-useful-solutions-for-android-developer/</id>
                <updated>2010-01-09T23:14:00Z</updated>
                
                <summary type="html">This post contains several useful solutions for Android developers. If you are starting to dive in it, I think the detailed description of the problems I solved will help you in your Android adventures.</summary>
                <content type="html">&lt;p&gt;This post contains several useful solutions for Android developers. If you are starting to dive in it, I think the detailed description of the problems I solved will help you in your Android adventures.&lt;/p&gt;
&lt;h3 id=&#34;contents&#34;&gt;Contents&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;About list adapters with sections (to group elements in the lists)&lt;/li&gt;
&lt;li&gt;About lists containing some actions (list elements do something complex or change themselves when selected)&lt;/li&gt;
&lt;li&gt;About list views manual invalidation&lt;/li&gt;
&lt;li&gt;About caching images in &lt;code&gt;ListView&lt;/code&gt; (for lists with remote images)&lt;/li&gt;
&lt;li&gt;About adapters that iterate over cursors (to support pagination in lists)&lt;/li&gt;
&lt;li&gt;About OAuth autorization in Android&lt;/li&gt;
&lt;li&gt;About using &lt;code&gt;MediaPlayer&lt;/code&gt; to play remote video received using HTTP&lt;/li&gt;
&lt;li&gt;About queues containing several &lt;code&gt;AsyncTask&lt;/code&gt;s (to execute background tasks sequentially)&lt;/li&gt;
&lt;li&gt;About changing the list element selection style&lt;/li&gt;
&lt;li&gt;About adding &lt;a href=&#34;http://www.londatiga.net/it/how-to-create-quickaction-dialog-in-android/&#34;&gt;QuickActions&lt;/a&gt; to your project&lt;/li&gt;
&lt;li&gt;Three more mini-solutions&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;introduction&#34;&gt;1. Introduction&lt;/h3&gt;
&lt;p&gt;Last summer I had ignited the desire to write an Android client for &lt;a href=&#34;http://vimeo.com&#34;&gt;vimeo&lt;/a&gt; web-service. I like this service and I think it would be cool to monitor updates on video subscriptions from your communicator.&lt;/p&gt;

&lt;p&gt;I сonceived &lt;a href=&#34;http://code.google.com/p/vimeoid&#34;&gt;this project&lt;/a&gt; to be learning one (means I am learning), however as a result I&amp;rsquo;ve found that a valuable part was done (you can check out &lt;a href=&#34;http://code.google.com/p/vimeoid/wiki/Screenshots&#34;&gt;screenshots of the finished things&lt;/a&gt;), but it is still in progress. Almost simultaneously with me, being first, &lt;a href=&#34;http://vimeo.com/makotosan&#34;&gt;makotosan&lt;/a&gt; started to write his &lt;a href=&#34;http://www.androlib.com/android.application.com-makotosan-vimeodroid-qmBCn.aspx&#34;&gt;own version&lt;/a&gt; of client aimed at video upload and he is also has not finished it yet, but his version can do things that my version can not (and converse is also true, seems).&lt;/p&gt;

&lt;p&gt;Anyway, through programming process I&amp;rsquo;ve got some knowledge base which I want to share. Not all the themes are exclusive but some tricks are hidden in the web or even not covered there. &lt;em&gt;I will also give examples from vimeoid source code, so it will allow you to spy how the paragraph subject works in real-time&lt;/em&gt; (&lt;em&gt;NB&lt;/em&gt;: some achors point to concrete lines in code).&lt;/p&gt;
&lt;h3 id=&#34;lists-with-subsections&#34;&gt;2. Lists with subsections&lt;/h3&gt;
&lt;p&gt;Among with the regular &lt;code&gt;ListView&lt;/code&gt; usage, it is frequently required to make a list with elements grouped in sections like this: section header, item, item, item, &amp;hellip;, section header, item, item, item, &amp;hellip;, section header, item, item, &amp;hellip;, section header, item, item, &amp;hellip; &amp;amp; s.o. See &amp;ldquo;Statistics&amp;rdquo; and &amp;ldquo;Information&amp;rdquo; sections at the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/guest-channel.png&#34; alt=&#34;List with sections&#34;&gt;&lt;/p&gt;

&lt;p&gt;Headers must not react on selection or press and they must have their own layout. This may be accomplished extending the adapter of this list from &lt;code&gt;BaseAdapter&lt;/code&gt;, for example, and by overriding its &lt;code&gt;getItemViewType&lt;/code&gt;, &lt;code&gt;getViewTypeCount&lt;/code&gt; and &lt;code&gt;isEnabled&lt;/code&gt; methods, among with &lt;code&gt;getView&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public class SectionedItemsAdapter extends BaseAdapter { . . .

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Example from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/SectionedActionsAdapter.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;SectionedActionsAdapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is creating a constants which identify element type, one for header, one for item (so there is a possibility to have more than two types, but it&amp;rsquo;s better to use &lt;code&gt;enum&lt;/code&gt; to store idenitifiers in cases like those):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public static final int ITEM_VIEW_TYPE = 0; &amp;#x2F;&amp;#x2F; item
public static final int SECTION_VIEW_TYPE = 1; &amp;#x2F;&amp;#x2F; section

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then a constant containing a number of element types (there&amp;rsquo;s two in our case):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public static final int VIEW_TYPES_COUNT = SECTION_VIEW_TYPE + 1;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adapter must contain the information about all of the elements inside, so the &lt;code&gt;getCount&lt;/code&gt;, &lt;code&gt;getItem&lt;/code&gt; and &lt;code&gt;getItemId&lt;/code&gt; realizations are depend on your situation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getItemViewType&lt;/code&gt; method must return the constant that conforms with the element type in the passed position. There is a special constant named &lt;code&gt;IGNORE_ITEM_VIEW_TYPE&lt;/code&gt; exist in &lt;code&gt;Adapter&lt;/code&gt; class for the case when type is undefined.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public int getItemViewType(int position) {
    if (. . .) return ITEM_VIEW_TYPE;
    if (. . .) return SECTION_VIEW_TYPE;
    return IGNORE_ITEM_VIEW_TYPE;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I my case I store the list of sections inside the adapter and they contain their items inside. So I can ask any section to tell me how many items it holds inside and to determine the element type using this data.&lt;/p&gt;

&lt;p&gt;This method can be used in overriden &lt;code&gt;getView&lt;/code&gt; now:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public View getView(int position, View convertView, ViewGroup parent) {
    final int viewType = getItemViewType(position);
    if (viewType == IGNORE_ITEM_VIEW_TYPE) throw new IllegalStateException(&amp;quot;Failed to get object at position &amp;quot; + position);
    if (viewType == SECTION_VIEW_TYPE) {
        convertView = . . . &amp;#x2F;&amp;#x2F; here you can get a header layout using LayoutInflater
    } else if (viewType == ITEM_VIEW_TYPE) {
        convertView = . . . &amp;#x2F;&amp;#x2F; here you can get an item layout using LayoutInflater
    }
    return convertView;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;isEnabled&lt;/code&gt; must return &lt;code&gt;false&lt;/code&gt; for elements that can not be pressed or selected and &lt;code&gt;true&lt;/code&gt; for others. Here we can use &lt;code&gt;getItemViewType&lt;/code&gt; again:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public boolean isEnabled(int position) {
    return getItemViewType(position) != SECTION_VIEW_TYPE };

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getViewTypeCount&lt;/code&gt; method returns the very constant determing a number of elements types:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public int getViewTypeCount() { return VIEW_TYPES_COUNT; }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the way, you can keep a pointer to &lt;code&gt;LayoutInflater&lt;/code&gt; in your adapter and get it passed using constructor.&lt;/p&gt;

&lt;p&gt;It is all the required things to make a list with sections, if you need to ensure in something - just look into example, but I&amp;rsquo;ll make some notices before.&lt;/p&gt;

&lt;p&gt;I use separate structures to store the data about sections and items. The section identifier, its title and child items structures are stored within the section structure. A pointer to parent section structure, item title, icon path and click handler (it will be covered in next paragraph) are stored within the item structure. Both structures&amp;#39; constructors are accessible only from adapters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/LActionItem.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;LActionItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I simplified adding sections and items to list using this way. Adapter has methods:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public int addSection(String title);
public LActionItem addItem(int section, int icon, String title);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Method &lt;code&gt;addSection&lt;/code&gt; returns the section identifier so you can use it to add items in this section:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
final int suitsSection = adapter.addSection(&amp;quot;Suits&amp;quot;);
adapter.addItem(suitsSection, R.drawable.heart, &amp;quot;Hearts&amp;quot;);
adapter.addItem(suitsSection, R.drawable.diamond, &amp;quot;Diamonds&amp;quot;);
adapter.addItem(suitsSection, R.drawable.spade, &amp;quot;Spades&amp;quot;);
adapter.addItem(suitsSection, R.drawable.cross, &amp;quot;Crosses&amp;quot;);
final int figuresSection = adapter.addSection(&amp;quot;Figures&amp;quot;);
adapter.addItem(figuresSection, R.drawable.king, &amp;quot;King&amp;quot;);
adapter.addItem(figuresSection, R.drawable.queen, &amp;quot;Queen&amp;quot;);
. . .

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;lists-with-elements-that-react-on-something&#34;&gt;3. Lists with elements that react on something&lt;/h3&gt;
&lt;p&gt;Sometimes it is required to change the list element content and/or switch activity when it is clicked. For example, the list of possible actions with some twitter account may contain &amp;ldquo;follow&amp;rdquo; element with minus icon, if you still do not follow this man and change its icon to plus when click happened and positive response (to following request) is received from twitter server. You can handle the selected element in current &lt;code&gt;ListActivity&lt;/code&gt; and depending on position take a decision, but if your list is inside the general &lt;code&gt;Activity&lt;/code&gt;, so may be it will be easier to handle selection inside the adapter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/SectionedActionsAdapter.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;SectionedActionsAdapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Uses: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/LActionItem.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;LActionItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Used in: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/base/SingleItemActivity_.java?r=85e18485bdda1c526141170f67e65f4e00202f34#49&#34;&gt;&lt;code&gt;SingleItemActivity_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you agree with that, your adapter can implement &lt;code&gt;OnItemClickListener&lt;/code&gt; interface:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public class ActionsAdapter extends . . . implements OnItemClickListener

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And inside the activity that uses this adapter you can do:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
final ListView actionsList = (ListView)findViewById(R.id.actionsList);
final SectionedActionsAdapter actionsAdapter = new ActionsAdapter(. . .);
. . . &amp;#x2F;&amp;#x2F; fill adapter with values
actionsList.setAdapter(actionsAdapter);
actionsList.setOnItemClickListener(actionsAdapter);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case some actions are responsible for each item in the section - they switch the activity or change the corresponding item content after server request. So I decided to create structures with public-access properties for sections and items, and the item structures contain a pointer to &lt;code&gt;OnClick&lt;/code&gt; handler that gets &lt;code&gt;View&lt;/code&gt; to change, so you it is possible to change the view just inside the handler. So it is just required to pass a click action to the appropriate handler inside the adapter:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public void onItemClick(AdapterView&amp;lt;?&amp;gt; parent, View view, int position, long id) {
    final LActionItem item = (LActionItem) getItem(position);
    if (item.onClick != null) item.onClick(view);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;addItem&lt;/code&gt; method described above you can set a handler directly from activity:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
final LActionItem heartsItem = adapter.addItem(suitsSection, R.drawable.heart, &amp;quot;Hearts&amp;quot;);
heartsItem.onClick = new OnClickListener() { public void onClick(View view) { . . . } };

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;manual-invalidation-of-list-views&#34;&gt;4. Manual invalidation of list views&lt;/h3&gt;
&lt;p&gt;As you may know, &lt;code&gt;ListView&lt;/code&gt; in Android has a [little trick inside] named &lt;a href=&#34;http://android.amberfog.com/?p=296&#34;&gt;&lt;em&gt;ListView Recycler&lt;/em&gt;&lt;/a&gt;. Its principle is in reusage of old elements views for elements that not fit the screen instead of creating new views while user scrolls the list like this, this principle is used in adapters&amp;#39; &lt;code&gt;getView&lt;/code&gt; implementations.&lt;/p&gt;

&lt;p&gt;If you need to update (invalidate) concrete known element view (or even its child view) at some moment, when it is visible to user, you may call &lt;code&gt;ListView.invalidate()&lt;/code&gt; or &lt;code&gt;Adapter.notifyDataSetChanged()&lt;/code&gt;, but sometimes these methods update not only the required view but also its neighbours or even all the visible elements (especially when layout is &lt;a href=&#34;http://www.curious-creature.org/2009/02/22/android-layout-tricks-1/&#34;&gt;built incorrectly&lt;/a&gt;). There is a way to get the current view of list element using &lt;code&gt;ListView.getChildAt(position)&lt;/code&gt; method. But &lt;code&gt;position&lt;/code&gt; in this case is not index of the element in a list, as you may considered, but an index relative to visible views on the screen. So a methods like these would help:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public static View getItemViewIfVisible(AdapterView&amp;lt;?&amp;gt; holder, int itemPos) {
    int firstPosition = holder.getFirstVisiblePosition();
    int wantedChild = itemPos - firstPosition;
    if (wantedChild &amp;lt; 0 || wantedChild &amp;gt;= holder.getChildCount()) return null;
    return holder.getChildAt(wantedChild);
}

public static void invalidateByPos(AdapterView&amp;lt;?&amp;gt; parent, int position) {
    final View itemView = getItemViewIfVisible(parent, position);
    if (itemView != null) itemView.invalidate();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;invalidateByPos&lt;/code&gt; updates view only if it is shown on the screen (forcing an adapter&amp;rsquo;s &lt;code&gt;getView&lt;/code&gt; method call), if this element is not visible - adapter&amp;rsquo;s &lt;code&gt;getView&lt;/code&gt; will be called automatically when this view will appear to user after scrolling. To update some child view of an element, you can use &lt;code&gt;getViewIsVisible&lt;/code&gt; method, it will return the element view which gives access to its child views and it returns &lt;code&gt;null&lt;/code&gt; if this element is not visible so update is not required.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Methods are defined in class: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/util/Utils.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Utils&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;caching-remote-images-for-lists&#34;&gt;5. Caching remote images for lists&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/guest-videos.png&#34; alt=&#34;List with remote images&#34;&gt;&lt;/p&gt;

&lt;p&gt;If you are creating &lt;code&gt;ListView&lt;/code&gt; containing images taken from web, this chapter is for you. It would be unwise to get images by URL again each time &lt;code&gt;getView&lt;/code&gt; is called in adapter - it is obvious that it would be better to a) cache them b) ask for them only when view with this image is visible. For the moment this task arose so recently for Android programmers, so there are a lot of &lt;a href=&#34;http://stackoverflow.com/questions/541966/android-how-do-i-do-a-lazy-load-of-images-in-listview&#34;&gt;solutions for it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My variant is also from that list, it is &lt;a href=&#34;http://stackoverflow.com/questions/541966/android-how-do-i-do-a-lazy-load-of-images-in-listview/3068012#3068012&#34;&gt;Fedor Vlasov&lt;/a&gt;&amp;rsquo;s solution, that is corrected for my needs. First, I changed a directory for cached images to be static, so it is created once for application cycle and surely cleaned when calling &lt;code&gt;clearCache&lt;/code&gt; (it is good to call this method in &lt;code&gt;onDestroy()&lt;/code&gt; of &lt;code&gt;Activity&lt;/code&gt; using &lt;code&gt;ImageLoader&lt;/code&gt; or in &lt;code&gt;finalize()&lt;/code&gt; method of adapter using it), also I&amp;rsquo;ve changed a bit a way of this directory creation (see &lt;code&gt;Utils.createCacheDir()&lt;/code&gt;). Secondly, you may pass the drawables IDs to constructor to determine what drawables to show in this place while loading an image and/or if loading image is failed. Thidly, some minor changes. Though, this class can be a singleton and you can just change its options before using it, but it is left for your decision. In my case the instance is created for each &lt;code&gt;ListActivity&lt;/code&gt; started and is passed to adapters of inner &lt;code&gt;ListView&lt;/code&gt;s that need it (or created directly in adapters if &lt;code&gt;ListView&lt;/code&gt;s are inside a regular &lt;code&gt;Activity&lt;/code&gt;). The main method id &lt;code&gt;displayImage(String url, ImageView view)&lt;/code&gt;, its definition speaks for itself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/com/fedorvlasov/lazylist/ImageLoader.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ImageLoader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Uses methods from: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/util/Utils.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Utils&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adapters-iterating-over-cursors&#34;&gt;6. Adapters iterating over cursors&lt;/h3&gt;
&lt;p&gt;This chapter is about pagination in &lt;code&gt;ListView&lt;/code&gt;. So, user gets first &lt;code&gt;n&lt;/code&gt; elements, scrolls list to &lt;code&gt;n&lt;/code&gt;-th element and only after that happen the response for &lt;code&gt;n&lt;/code&gt; elements to DB or server is performed. Then the user scrolls the element &lt;code&gt;2n&lt;/code&gt; and we ask for next package with &lt;code&gt;n&lt;/code&gt; size and so on. In &lt;em&gt;vimeoid&lt;/em&gt; I make a resonse only after &lt;code&gt;footerView&lt;/code&gt; with &amp;lsquo;Load more&amp;hellip;&amp;rsquo; label is clicked, it is not automatic way, but the technique is similar to subject.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading by click on &lt;code&gt;footerView&lt;/code&gt;: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/base/ItemsListActivity_.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ItemsListActivity_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guest implementation: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/guest/ItemsListActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ItemsListActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logged-in user implementation: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/ItemsListActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ItemsListActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The classes hieararchy is a lit bit more complex, each page is loaded with special &lt;code&gt;AsyncTask&lt;/code&gt; that calls Vimeo API in background and notifies the calling activity about are there any elements left or is it the last page, and the activity updates its views according to this data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adapter containing a set of cursors: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/EasyCursorsAdapter.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;EasyCursorsAdapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make a pagination possible, you may just keep a set of page containers (cursors, for example) in adapter and in &lt;code&gt;getView()&lt;/code&gt;, if one of last elements is asked for, run the query for next page (&lt;code&gt;AsyncTask&lt;/code&gt; is preferred), which will add new container to adapter when it will be received, so the adapter will have a possibility to call &lt;code&gt;notifyDataSetChanged()&lt;/code&gt;. Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
private final Page[] pages = new Page[MAX_PAGES_COUNT];

public View getView(final int position, View convertView, ViewGroup parent) {

    if (!waitingNextPage &amp;amp;&amp;amp;
        (pages.length &amp;lt; MAX_PAGES_COUNT) &amp;amp;&amp;amp;
        (position &amp;gt;= ((pages.length * PER_PAGE) - 2))) {

        final AsyncTask&amp;lt;Integer, . . .&amp;gt; nextPageTask = . . .;
        nextPageTask.execute(pages.length);
        &amp;#x2F;&amp;#x2F; nextPageTask calls addSource, when next page is received

        waitingNextPage = true;
    }

    . . .

}

public void addSource(Page page) {
    if (pages.length &amp;gt;= MAX_PAGES_COUNT) return;
    pages[pages.length] = page;
    waitingNextPage = false;
    notifyDataSetChanged();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;EasyCursorsAdapter&lt;/code&gt; is a good example for a case where &lt;code&gt;Cursor&lt;/code&gt; is &lt;code&gt;Page&lt;/code&gt; analogue. I am sure there are several alternative solution exists and I will be glad if someone will mention them in comments.&lt;/p&gt;
&lt;h3 id=&#34;oauth-in-android&#34;&gt;7. OAuth in Android&lt;/h3&gt;
&lt;p&gt;If you are writing a client for a complex web-service - you need to fight with authorization problem and in current moment most web-services use &lt;a href=&#34;http://en.wikipedia.org/wiki/OAuth&#34;&gt;OAuth&lt;/a&gt; for its realization and Vimeo is one of those.&lt;/p&gt;

&lt;p&gt;There is no need to write your own implementation of OAuth, there is very cool library named &lt;a href=&#34;http://code.google.com/p/oauth-signpost/&#34;&gt;signpost&lt;/a&gt; exist, and I do not know any better alternatives for now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/connection/VimeoApi.java?r=85e18485bdda1c526141170f67e65f4e00202f34#101&#34;&gt;&lt;code&gt;VimeoApi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Uses signpost through: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/connection/JsonOverHttp.java?r=85e18485bdda1c526141170f67e65f4e00202f34#164&#34;&gt;&lt;code&gt;JsonOverHttp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Activity that gets user token: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/ReceiveCredentials.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ReceiveCredentials&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Its definition at manifest: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/AndroidManifest.xml?r=85e18485bdda1c526141170f67e65f4e00202f34#22&#34;&gt;&lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start, you need to get the exclusive key for your application from web-service and set a callback URL to return user there after successful authorization (i.e. &lt;code&gt;vimeoid://oauth.done&lt;/code&gt;) (but in case of Android, tou can pass it with call to &lt;code&gt;/request_token&lt;/code&gt;). Recently it is done using service web-interface for programmer.&lt;/p&gt;

&lt;p&gt;The first authorization algorythm for Android is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Point signpost to a service&amp;rsquo;s OAuth entry-points&lt;/li&gt;
&lt;li&gt;Send a request to &lt;code&gt;/request_token&lt;/code&gt;, get a token/secret pair using this key for unauthorized requests of your applization (&lt;code&gt;vimeoid://oauth.done&lt;/code&gt; callback URL is passed here): &lt;code&gt;provider.retrieveRequestToken(Uri callbackUri)&lt;/code&gt;. &lt;em&gt;NB:&lt;/em&gt; &lt;code&gt;retrieveRequestToken&lt;/code&gt; returns not token but &lt;code&gt;Uri&lt;/code&gt; that you need to call in next step at once.&lt;/li&gt;
&lt;li&gt;Launch browser activity, call &lt;code&gt;/authorize&lt;/code&gt; with passing the application token and, optionally, appending additional parameters about required access rights: &lt;code&gt;startActivity(new Intent(Intent.ACTION_VIEW, authUri + ...))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User will see a page in &amp;lsquo;Allow this application to access your account?&amp;rsquo; style (if he is logged out of service, service will ask him to log in). If user grants access, browser will be redirected to callback URL &lt;code&gt;vimeoid://oauth.done?...&lt;/code&gt;, but in case in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; there is a special activity to handle URLs like this, Android will return a user to your application and open this very activity - &lt;code&gt;ReceiveCredentials&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;ReceiveCredentials&lt;/code&gt; activity you get user token in parameters &lt;code&gt;Uri uri = getIntent().getData()&lt;/code&gt;, now you need to get secret using this token by requesting &lt;code&gt;/access_token&lt;/code&gt;: &lt;code&gt;provider.retrieveAccessToken(Uri uri)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now you can save user&amp;rsquo;s token and secret in private &lt;code&gt;SharedPreferences&lt;/code&gt;, for example: &lt;code&gt;consumer.getToken()&lt;/code&gt;, &lt;code&gt;consumer.getTokenSecret()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After all these things done you can just sign every request to web-service API with the token/secret you&amp;rsquo;ve got: &lt;code&gt;consumer.sign(Object request)&lt;/code&gt;. If your application was restarted, before doing any request you can check if you have saved tokens in &lt;code&gt;SharedPreferences&lt;/code&gt;, if you are - just remember &lt;code&gt;signpost&lt;/code&gt; with them: &lt;code&gt;consumer.setTokenWithSecret(String token, String secret)&lt;/code&gt;, in not - request access token again (or just refresh tokens, if web-service allows it).&lt;/p&gt;

&lt;p&gt;Important notice: signpost in Android works only with &lt;code&gt;CommonsHttpOAuthConsumer&lt;/code&gt;/&lt;code&gt;CommonsHttpOAuthProvider&lt;/code&gt;. &lt;code&gt;DefaultOAuth*&lt;/code&gt; classes do not work.&lt;/p&gt;
&lt;h3 id=&#34;getting-video-by-http-and-playing-it-in-mediaplayer&#34;&gt;8. Getting video by HTTP and playing it in MediaPlayer&lt;/h3&gt;
&lt;p&gt;It is very hard to make &lt;a href=&#34;http://developer.android.com/reference/android/media/MediaPlayer.html&#34;&gt;&lt;code&gt;MediaPlayer&lt;/code&gt;&lt;/a&gt; do the things you want in case of playing video, as I discovered. To get a video it was required for me to make an unusual HTTP request with special headers, so I had to implement getting stream and its buffering manually. I could not get stream playing using the &lt;a href=&#34;http://blog.pocketjourney.com/2009/12/27/android-streaming-mediaplayer-tutorial-updated-to-v1-5-cupcake/&#34;&gt;audio-files-related examples&lt;/a&gt; as a pattern, so I download the full video file and start playing just when downloading is finished (if there will be not enough space to get video on SD card, I warn user about it). When player is closed or failed to play, I clear the cache.&lt;/p&gt;

&lt;p&gt;Moreover, &lt;code&gt;VideoView&lt;/code&gt;/&lt;code&gt;SurfaceView&lt;/code&gt; behavior works ambiguously when switching views inside one single layout (black screen from time to time), so I had to just leave a single &lt;code&gt;VideoView&lt;/code&gt; in layout and show  &lt;code&gt;ProgressDialog&lt;/code&gt; on the top of it, while video is loading. Again, if you know something about stream playing videos using &lt;code&gt;MediaPlayer&lt;/code&gt; (or getting chunks manually), write to comments.&lt;/p&gt;

&lt;p&gt;So, if there is enough to call &lt;code&gt;MediaPlayer.setDataSource(Uri uri)&lt;/code&gt; in your case, you can skip some next paragraphs.&lt;/p&gt;

&lt;p&gt;And if you also had to get a stream manually, I will notice a few moments and just demonstrate the code, it must speak for itself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/media/VimeoVideoPlayingTask.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;VimeoVideoPlayingTask&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Called from activity: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/Player.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Player&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Layout: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/layout/player.xml?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;player.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is better to get a stream using &lt;code&gt;AsyncTask&lt;/code&gt;. I just aggregate &lt;code&gt;MediaPlayer&lt;/code&gt; with &lt;code&gt;...PlayingTask&lt;/code&gt; for convenience, you may use any other way you want, but definitely it is better to get a stream using &lt;code&gt;AsyncTask&lt;/code&gt;.
In this case in &lt;code&gt;onPreExecute&lt;/code&gt; method you may set up yout player, in &lt;code&gt;doInBackground&lt;/code&gt; you can get a video stream and return it to &lt;code&gt;onPostExecute&lt;/code&gt; and start playing from there. Also, it is handy to show percentage progress of downloading, because you know an amount of data received in &lt;code&gt;doInBackground&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And if there is an exception was raised while getting a stream, it is required to show a message about in using &lt;code&gt;runOnUiThread&lt;/code&gt;, because task execution was interrupted.&lt;/p&gt;

&lt;p&gt;Calling &lt;code&gt;getWindow().setFormat(PixelFormat.TRANSPARENT);&lt;/code&gt; is aimed to prevent views shown above the player to stay above even when they are closed/hidden. Anyway, when it is required to use &lt;code&gt;ViewSwitcher&lt;/code&gt;, this stuff do not helps.&lt;/p&gt;

&lt;p&gt;Code to get video stream by URL is similar to this one:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public static InputStream getVideoStream(long videoId)
       throws FailedToGetVideoStreamException, VideoLinkRequestException {
    try {
        final HttpClient client = new DefaultHttpClient();
        . . .
        final HttpResponse response = client.execute(request);
        if ((response == null) || (response.getEntity() == null))
            throw new FailedToGetVideoStreamException(&amp;quot;Failed to get video stream&amp;quot;);
        lastContentLength = response.getEntity().getContentLength();
        return response.getEntity().getContent();
    } catch (URISyntaxException use) {
        throw new VideoLinkRequestException(&amp;quot;URI creation failed : &amp;quot; + use.getLocalizedMessage());
    } catch (ClientProtocolException cpe) {
        throw new VideoLinkRequestException(&amp;quot;Client call failed : &amp;quot; + cpe.getLocalizedMessage());
    } catch (IOException ioe) {
        throw new VideoLinkRequestException(&amp;quot;Connection failed : &amp;quot; + ioe.getLocalizedMessage());
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;asynctask-queues&#34;&gt;9. AsyncTask Queues&lt;/h3&gt;
&lt;p&gt;If you need to execute several background tasks sequentially (when one finished - run next), this freestyle pattern (walking by linked list inside) will fir you. For example when your activity started you need to perform several successive calls to some web-server API or database. The main thing is that parameters and result types for all these tasks must be similar.&lt;/p&gt;

&lt;p&gt;Here is a task-that-knows-it-has-next-task inteface:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public interface HasNextTask&amp;lt;Params&amp;gt; {
    public int getId();
    void setNextTask(HasNextTask&amp;lt;Params&amp;gt; task);
    public HasNextTask&amp;lt;Parames&amp;gt; getNextTask();
    public AsyncTask&amp;lt;?, ?, ?&amp;gt; execute(Params... params);
                      &amp;#x2F;&amp;#x2F; must much with AsyncTask&amp;lt;Params, ...&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is an interface that monitors when tasks are performed successfully or not:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public interface PerformHandler&amp;lt;Params, Result&amp;gt; {
    public void onPerfomed(int taskId, Result result, HasNextTask&amp;lt;Params&amp;gt; nextTask);
    public void onError(Exception e, String description);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HasNextTask&lt;/code&gt; interface implementation. The hollows given with three dots, you may move them into child class or make this class abstract to implement &lt;code&gt;doInBackground&lt;/code&gt;/&lt;code&gt;onPostExecute&lt;/code&gt; methods right in &lt;code&gt;createTask&lt;/code&gt; method of queue:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public class TaskInQueue&amp;lt;Params, Result&amp;gt; extends AsyncTask&amp;lt;Params, Void, Result&amp;gt;
                                         implements HasNextTask&amp;lt;Params&amp;gt; {

    private final int taskId;
    private HasNextTask&amp;lt;Params&amp;gt; nextTask = null;
    private final PerformHandler&amp;lt;Params, Result&amp;gt; listener;

    public TaskInQueue(PerformHandler&amp;lt;Params, Result&amp;gt; listener, int taskId) {
        this.taskId = taskId;
        this.listener = listener;
    }

    @Override
    public Result doInBackground(Params... params) { . . . &amp;#x2F;* task execution *&amp;#x2F; }

    @Override
    protected void onPostExecute(Result result) {
        . . . &amp;#x2F;&amp;#x2F; handling a result, if required
        listener.onPerformed(taskId, result, nextTask);
    }

    @Override public int getId() { return taskId; }

    @Override
    public void setNextTask(HasNextTask&amp;lt;Params&amp;gt; nextTask) {
        if (this.nextTask != null)
            throw new IllegalStateException(&amp;quot;Next task is already set&amp;quot;);
        this.nextTask = nextTask;
    }

    @Override
    public HasNextTask&amp;lt;Params&amp;gt; getNextTask() { return nextTask; };

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the main thing, the queue implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public abstract class TasksQueue&amp;lt;Params, Result&amp;gt;
                implements PerformHandler&amp;lt;Params, Result&amp;gt;, Runnable {

    public static final String TAG = &amp;quot;TasksQueue&amp;quot;;

    private HasNextTask&amp;lt;Params&amp;gt; firstTask = null;
    private HasNextTask&amp;lt;Params&amp;gt; lastTask = null;
    private Map&amp;lt;Integer, Params&amp;gt; tasksParams = null;
    private int currentTask = -1;
    private boolean running = false; &amp;#x2F;&amp;#x2F; some task is running now
    private boolean started = false; &amp;#x2F;&amp;#x2F; the whole queue is running now
    private int size = 0;

    protected HasNextTask&amp;lt;Params&amp;gt; createTask(int taskId) { &amp;#x2F;&amp;#x2F; can be overriden
        return new TaskInQueue&amp;lt;Params, Result&amp;gt;(this, taskId);
    }

    @Override
    public HasNextTask&amp;lt;Params&amp;gt; add(int taskId, Params params) {
        Log.d(TAG, &amp;quot;Adding task &amp;quot; + taskId);
        final HasNextTask&amp;lt;Params&amp;gt; = createTask(taskId);
        if (isEmpty()) {
            firstTask = task;
            lastTask = task;
            tasksParams = new HashMap&amp;lt;Integer, Params&amp;gt;();
        } else {
            lastTask.setNextTask(task);
            lastTask = task;
        }
        tasksParams.put(task.getId(), params);
        size += 1;
        return task;
    }

    @Override
    public void run() {
        Log.d(TAG, &amp;quot;Running first task&amp;quot;);
        if (!isEmpty())
            try {
                started = true;
                execute(firstTask);
            } catch (Exception e) {
                onError(e, e.getLocalizedMessage());
                finish();
            }
        else throw new IllegalStateException(&amp;quot;Queue is empty&amp;quot;);
    }

    @Override
    public void onPerfomed(int taskId, Result result, HasNextTask&amp;lt;Params&amp;gt; nextTask) {
        Log.d(TAG, &amp;quot;Task &amp;quot; + taskId + &amp;quot; performed&amp;quot;);
        if (taskId != currentTask)
            throw new IllegalStateException(&amp;quot;Tasks queue desynchronized&amp;quot;);
        running = false;
        try {
            if (nextTask != null) {
                execute(nextTask);
            } else finish();
        } catch (Exception e) {
            onError(e, &amp;quot;Error while executing task &amp;quot; +
                       ((nextTask != null) ? nextTask.getId() : taskId));
            finish();
        }
    }

    protected void execute(HasNextTask&amp;lt;Result&amp;gt; task) throws Exception {
        Log.d(TAG, &amp;quot;Trying to run task &amp;quot; + task.getId());
        if (running) throw new IllegalStateException(&amp;quot;Tasks queue desynchronized&amp;quot;);
        currentTask = task.getId();
        running = true;
        Log.d(TAG, &amp;quot;Running task &amp;quot; + task.getId());
        task.execute(tasksParams.get(task.getId())).get(); &amp;#x2F;&amp;#x2F; wait for result
    }

    protected void finish() {
        firstTask = null;
        lastTask = null;
        if (tasksParams != null) tasksParams.clear();
        tasksParams = null;
        currentTask = -1;
        running = false;
        started = false;
        size = 0;
    }

    public boolean isEmpty() { return (firstTask == null); }

    public boolean started() { return started; }

    public boolean running() { return running; }

    public int size() { return size; }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in your activities you can easily create a queue of background tasks:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
protected final TasksQueue secondaryTasks;

private final int TASK_1 = 0;
private final int TASK_2 = 1;
private final int TASK_3 = 2;

public ...Activity() { &amp;#x2F;&amp;#x2F; constructor

    secondaryTasks = new TasksQueue&amp;lt;..., ...&amp;gt;() {

        &amp;#x2F;&amp;#x2F; here you can override createTask

        @Override public void onPerfomed(int taskId, ... result) throws JSONException {
            super.onPerfomed(taskId, result);
            onSecondaryTaskPerfomed(taskId, result);
        }

        @Override public void onError(Exception e, String message) {
            Log.e(TAG, message + &amp;quot; &amp;#x2F; &amp;quot; + e.getLocalizedMessage());
            Dialogs.makeExceptionToast(ItemsListActivity.this, message, e);
        }

    };

    secondaryTasks.add(TASK_1, ...);
    secondaryTasks.add(TASK_2, ...);
    secondaryTasks.add(TASK_3, ...);

}

protected void someMethod() {
    . . .
    if (!secondaryTasks.isEmpty()) secondaryTasks.run();
    . . .
}

protected void onSecondaryTaskPerfomed(int taskId, ... result) {
    switch (taskId) {
        case TASK_1: . . .
        case TASK_2: . . .
        case TASK_3: . . .
        . . .
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the way, thanks to &lt;code&gt;Runnable&lt;/code&gt; interface you can run queues like this in separate thread:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
new Thread(secondaryTasks, &amp;quot;Tasks Queue&amp;quot;).start();

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Tasks queue in vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/ApiTasksQueue.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ApiTasksQueue&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Created in: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/SingleItemActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#49&#34;&gt;&lt;code&gt;SingleItemActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Filled with tasks in: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/item/UserActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#122&#34;&gt;&lt;code&gt;UserActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handling completed tasks in: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/item/UserActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#301&#34;&gt;&lt;code&gt;UserActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;listview-selection-highlight&#34;&gt;10. ListView selection highlight&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/user-video.png&#34; alt=&#34;Selected element in list&#34;&gt;&lt;/p&gt;

&lt;p&gt;You see a blue line on the image, it is a custom selected element highlight and it has four conditions - pressed, focused, disabled and transition animation from pressed to held condition for long tap. First three and held condition - it is so-called &lt;code&gt;9-patch&lt;/code&gt;, sure you &lt;a href=&#34;http://developer.android.com/guide/developing/tools/draw9patch.html&#34;&gt;heard something about them&lt;/a&gt;, animation is an &lt;code&gt;xml&lt;/code&gt;-file.&lt;/p&gt;

&lt;p&gt;To define the states for selection highlight, set &lt;code&gt;android:listSelector=&amp;quot;@drawable/selector_bg&amp;quot;&lt;/code&gt; for your &lt;code&gt;ListView&lt;/code&gt; in layout. The algorythm is simple, but it to build rules in proper order in not an easy task sometimes. See examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Definition: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/drawable/selector_bg.xml?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;selector_bg.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Animation: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/drawable/selector_bg_transition.xml?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;selector_bg_transition.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Declared at: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/layout/generic_list.xml?r=85e18485bdda1c526141170f67e65f4e00202f34#16&#34;&gt;&lt;code&gt;generic_list.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/draw9patch-norm.png&#34; alt=&#34;9-patch editor&#34;&gt;&lt;/p&gt;

&lt;p&gt;There are also a tricks with 9-patch, each time when there is something wrong in layout, the whole list becomes a mess. Main rule is to check &lt;code&gt;ListView&lt;/code&gt; declaration first of all, ensure that &lt;code&gt;layout_width&lt;/code&gt; and &lt;code&gt;layout_height&lt;/code&gt; are set to &lt;code&gt;fill_parent&lt;/code&gt; and re-check the parent elements higher in the hierarchy. Then, if it has not helped, you may try to correct 9-patches. The thick black lines on top and to the left determine what image areas will be stretched if the content can&amp;rsquo;t fill the image. The thick black lines (optional) on bottom and to the right determine in what image area the content will fit itself. It is also not so easy to get the correct positions at first time, have to experiment. Don&amp;rsquo;t even think about creating 9-patches without editor, it is a brainfuck - content areas and errors are highlighted in editor, but even when everything seems ok, inflater understands a layout as you expect not every time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/selector_bg_disabled.9.png&#34; alt=&#34;Disabled state&#34;&gt; &lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/selector_bg_focus.9.png&#34; alt=&#34;Focused state&#34;&gt; &lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/selector_bg_pressed.9.png&#34; alt=&#34;Pressed state&#34;&gt; &lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/selector_bg_longpress.9.png&#34; alt=&#34;Held state&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-quickactions&#34;&gt;11. Adding QuickActions&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/10-useful-solutions-for-android-developer/user-videos.png&#34; alt=&#34;QuickActions example&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.londatiga.net/it/how-to-create-quickaction-dialog-in-android/&#34;&gt;QuickActions&lt;/a&gt; - is small library for the popping out dialogs with actions like the one shown on the picture (and not just like this, because the design can be changed freely). They became a new trend when official twitter-client appeared. Sure there are another implemantations exists but in &lt;em&gt;vimeoid&lt;/em&gt; I use this one and also changed it a bit for my needs.&lt;/p&gt;

&lt;p&gt;To show a dialog like this instead of context menu when element in list is long-tapped, it is enough to override &lt;code&gt;onCreateContextMenu&lt;/code&gt; method in &lt;code&gt;ListActivity&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
    . . .
    final AdapterView.AdapterContextMenuInfo info = extractMenuInfo(menuInfo);
    final QuickAction quickAction =
          createQuickActions(info.position, getItem(info.position), info.targetView);
    if (quickAction != null) quickAction.show();
}

protected QuickAction createQuickActions(final int position, final ... item, View view) {
    QuickAction qa = new QuickAction(view);
    qa.addActionItem(getString(R.string...),
                     getResources().getDrawable(R.drawable...),
            new QActionClickListener() {
                @Override public void onClick(View v, QActionItem item) {
                    . . .
                }
            });
    . . .
    return qa;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Directory contating a modified version of a library &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/lib-qactions?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;lib-qactions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Used in: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/list/VideosActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#113&#34;&gt;&lt;code&gt;VideosActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding external library to Eclipse project is described &lt;a href=&#34;http://developer.android.com/guide/developing/eclipse-adt.html#libraryProject&#34;&gt;in this article&lt;/a&gt;. To be short, it is enough to create the separate Android project with sources for a library, set &lt;code&gt;isLibrary&lt;/code&gt; checkbox in &lt;code&gt;Android&lt;/code&gt; section in project properties, and in the original project just add the library project using &lt;code&gt;Library&lt;/code&gt; -&amp;gt; &lt;code&gt;Add&lt;/code&gt; button from the same section. &lt;code&gt;R&lt;/code&gt;-file from the library project will be added to the original project after rebuild.&lt;/p&gt;
&lt;h3 id=&#34;three-additional-mini-solutions&#34;&gt;12. Three additional mini-solutions&lt;/h3&gt;&lt;h4 id=&#34;a.-one-entry-point-to-invoke-different-activities&#34;&gt;12a. One entry point to invoke different activities&lt;/h4&gt;
&lt;p&gt;If your application uses a lot of different activities that called similar way, may be it will be useful for you to move this calls to a separate class, including filling &lt;code&gt;Extras&lt;/code&gt; with data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/util/Invoke.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Invoke&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;b.-placeholders-in-localization-strings&#34;&gt;12b. Placeholders in localization strings&lt;/h4&gt;
&lt;p&gt;My be it is obvious, but in strings from &lt;code&gt;strings.xml&lt;/code&gt; you can use placeholders to insert some locale-independent values inside these strings, i.e.: &lt;code&gt;&amp;lt;string name=&amp;quot;image_info&amp;quot;&amp;gt;Image size: {width}x{height}&amp;lt;/string&amp;gt;&lt;/code&gt;. &lt;code&gt;format&lt;/code&gt; function can help you like this: &lt;code&gt;format(getString(R.string.image_info), &amp;quot;width&amp;quot;, String.valueOf(600), &amp;quot;height&amp;quot;, String.valueOf(800))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
public static String format(String source, String... params) {
    String result = source;
    int pos = 0;
    while (pos &amp;lt; params.length) {
        result = result.replaceAll(&amp;quot;\\{&amp;quot; + params[pos++] + &amp;quot;\\}&amp;quot;, params[pos++]);
    }
    return result;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; As I expected, I had missed this method in Android library: there is a standard function &lt;a href=&#34;http://developer.android.com/intl/de/reference/android/content/Context.html#getString%28int,%20java.lang.Object...%29&#34;&gt;&lt;code&gt;getString(int resId, Object... formatArgs)&lt;/code&gt;&lt;/a&gt;. Thanks to &lt;a href=&#34;http://zochek.habrahabr.ru/&#34;&gt;zochek&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;c.-about-wrong-layouts&#34;&gt;12c. About wrong layouts&lt;/h4&gt;
&lt;p&gt;Be sure to read these articles, inflater in Android is very sensitive to complicated structures and if you are writing a complex application, you&amp;rsquo;ll have to fix your layouts sooner or later:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/02/22/android-layout-tricks-1/&#34;&gt;Layout Tricks #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/02/25/android-layout-trick-2-include-to-reuse/&#34;&gt;Layout Tricks #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/03/01/android-layout-tricks-3-optimize-part-1/&#34;&gt;Layout Tricks #3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/03/16/android-layout-tricks-4-optimize-part-2/&#34;&gt;Layout Tricks #4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/03/04/speed-up-your-android-ui/&#34;&gt;Speed up your Android UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My frequently re-rendedered layouts in one moment collapsed and &lt;code&gt;getView&lt;/code&gt; has called approximately once per second (and I also meet this case now, but in much rare moments). After replacing a lot of nested complicated  &lt;code&gt;LinearLayout&lt;/code&gt;s to less-nested and elegant &lt;code&gt;RelativeLayout&lt;/code&gt;, inflater clearly felt itself easier and me too, mysefl, because a hierarchy also became less complicated and it became easier to make changes. I do not had time to fix all of these, but now I am more attentive to layouts. Also check that you use &lt;code&gt;width/height=wrap_content&lt;/code&gt; only for simple elements if possible, using &lt;code&gt;wrap_content&lt;/code&gt; for width/height of &lt;code&gt;LinearLayout&lt;/code&gt;s and other compound views is dangerous and may lead to unexpected consequences. It may not lead, but who is forewarned&amp;hellip;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Google Wave Client as Java Web Application</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/sametimed-google-wave-client/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/sametimed-google-wave-client/</id>
                <updated>2009-10-13T23:14:00Z</updated>
                
                <summary type="html">Zdrawstwooyte.</summary>
                <content type="html">&lt;p&gt;Zdrawstwooyte.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/sametimed&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/sametimed-google-wave-client/logo.png&#34; alt=&#34;sametimed&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;So I wrote a small project in Java, which is a client for Google Wave, which in its turn can be extended with the features you need. Its current visual style is not very presentable &lt;s&gt;(though, why not, a-la Windows 3.1 ;) )&lt;/s&gt;, &amp;lsquo;cause I am not so good in web-design - but for all the project&amp;rsquo;s source code I am responsible with my head :). Then, for example, the required CSS-styles looks the most understandable and the XHTML-structure is the most simplified (not to the detriment of standards) and the real designer can apply his skills in most and make this all look really beautiful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.io/blog/figures/sametimed-google-wave-client/screenshot-full.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/sametimed-google-wave-client/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code and war-package with current condition of the project are located at &lt;a href=&#34;http://code.google.com/p/sametimed&#34;&gt;http://code.google.com/p/sametimed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right now I have no public hosting ready at hand, so I can&amp;rsquo;t show the project in action with ease. However I can, may be, please you with a &lt;a href=&#34;https://vimeo.com/7036141&#34;&gt;video (at vimeo)&lt;/a&gt;, it demonstrates its main possibilities, and perhaps it is pretty enough if you just want to know what the project can do. Anyway, you can run it by yourself, since there are detailed instructions at project site and the detailed source code inspection and concept description are in this very post&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vimeo.com/7036141&#34;&gt;&lt;img src=&#34;http://shamansir.github.io/blog/figures/sametimed-google-wave-client/vimeo.png&#34; alt=&#34;video&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Just four items required to run this client:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client WAR-package, you can take it at &lt;a href=&#34;http://code.google.com/p/sametimed&#34;&gt;googlecode project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wave-protocol server installed with default settings, current version (0.2) (&lt;a href=&#34;http://code.google.com/p/wave-protocol/wiki/Installation&#34;&gt;installation tutorial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Any web-сервер applying Java EE specification (I used Jetty server integrated in Eclipse)&lt;/li&gt;
&lt;li&gt;Firefox browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more detailed instruction on &lt;a href=&#34;http://code.google.com/p/sametimed/wiki/SametimedInstallationInstructions&#34;&gt;how to run the client per se&lt;/a&gt; or &lt;a href=&#34;http://code.google.com/p/sametimed/wiki/CreatingEclipseProject&#34;&gt;as working Eclipse project&lt;/a&gt; are at the project page. Here I will consider the code structure and will describe how it works (sorry, without UML-diagrams).&lt;/p&gt;
&lt;h3 id=&#34;general-concept&#34;&gt;General concept&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Here when I mention «server side» I mean not a wave-protocol server, but a server side of web-application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because there is only console (terminal) client for wave-protocol released now as a simple desktop jar-application, the main question is how to transfer information from web-client to server and back well-timed.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why it&amp;rsquo;s necessary to introduce the two notions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt;: is sent from client to server and asks to &amp;ldquo;open a wave&amp;rdquo;, &amp;ldquo;add a participant&amp;rdquo;, &amp;ldquo;undo some action&amp;rdquo;, &amp;ldquo;say hi&amp;rdquo; &amp;amp; s.o., it is sent after user makes some action to call it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: is sent from server to client and reports/informs that &amp;ldquo;someone has invited to a wave&amp;rdquo;, «sonya replied hi», «participant was added to wave», «error happened» &amp;amp; s.o., it is sent with every update related to current client.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this rules, a command may be sent from client immediately, not much thinking about server load, but the messages about updates are required to be sent only on the fact of the event. However, we have Javascript at server-side and currently it can not handle a things like these. It is the moment when &lt;a href=&#34;http://en.wikipedia.org/wiki/Reverse_Ajax&#34;&gt;Reverse Ajax&lt;/a&gt; was needed, rather its Java realization - &lt;a href=&#34;http://directwebremoting.org/dwr/index.html&#34;&gt;DWR&lt;/a&gt; (Direct Web Remoting) library. It allows to call some client function from the server in the time when server decides but not client. Their site describes all the features which are not limited with this application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd&lt;/strong&gt;: Current source code state is rewriting to &lt;code&gt;cometd&lt;/code&gt; library, this library is more simple and hm&amp;hellip; intuitive. And we&amp;rsquo;re waiting for WebSockets&amp;hellip;&lt;/p&gt;

&lt;p&gt;Commands and messages are sent in XML, and the content of messages about updates is sent in JSON, that&amp;rsquo;s why JavaSvript is the only one who builds a user interface (I&amp;rsquo;ve used JQuery), and a server side is don&amp;rsquo;t even thinks about existence of UI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(there is a &lt;code&gt;Renderer&lt;/code&gt; interface for server-side in project, its realization is called on required updates, but it is just intended for the cases similar to console client)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;current-flow-description&#34;&gt;Current flow description&lt;/h3&gt;
&lt;p&gt;When you run a client, you see a page with text input for username and a single button. Wave-protocol server is required to be running herwith. When you press a button, the username you&amp;rsquo;ve got is passed to servlet (&lt;code&gt;GetClientViewServlet&lt;/code&gt;), which connects you to a wave and returns the complete client model in JSON view. On the client side, JQuery build full wavelet insterface using this info. If you&amp;rsquo;ll press this button again, you&amp;rsquo;ll request another wavelet, they both [wavelets] will differ in internal ID (which is generated automatically) that is shown on a blue bar in brackets. Using this ID both server and client determine which client is owner/target for command or a message.&lt;/p&gt;

&lt;p&gt;At the same time DWR starts to wait for updates, so you can enter one of allowed commands and press &amp;ldquo;send&amp;rdquo;. For example, you can create a wave with &amp;ldquo;&lt;code&gt;\new&lt;/code&gt;&amp;rdquo; command, open it with &amp;ldquo;&lt;code&gt;\open &amp;lt;id&amp;gt;&lt;/code&gt;&amp;rdquo; command and say something just by entering the text (like in Skype). When you press &amp;ldquo;send&amp;rdquo; button, POST request is sent to another servlet (&lt;code&gt;CommandsReceiverServlet&lt;/code&gt;), who gets the generated XML-command and permorms it immediately, passing the data to wave-protocol server.&lt;/p&gt;

&lt;p&gt;Currently the updates are coming from server-side (and from wave-protocol server) in XML-encoded message (there is a callback on a client-side which called when new messages arrive), that includes the alias of the changed model (i.e. &amp;ldquo;chat&amp;rdquo;, &amp;ldquo;inbox&amp;rdquo;, &amp;ldquo;userslist&amp;rdquo;, &amp;ldquo;errors&amp;rdquo; or &amp;ldquo;editor&amp;rdquo;) and its content in JSON view, which is decoded immediately and updates the corresponding wavelet part.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd:&lt;/strong&gt; I really do not remember why I haven&amp;rsquo;t used JSON in JSON packages (without XML).&lt;/p&gt;

&lt;p&gt;As you see, everything is simple.&lt;/p&gt;
&lt;h3 id=&#34;project-structure&#34;&gt;Project structure&lt;/h3&gt;&lt;h4 id=&#34;java&#34;&gt;Java:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;All the classes that lie &amp;ldquo;outside&amp;rdquo; and that are directly related to client&lt;/em&gt;; here are the abstract &lt;code&gt;AUpdatingWavelet&lt;/code&gt; and &lt;code&gt;ADocumentsWavelet&lt;/code&gt; classes, they determine the structure of the according wavelet type (the updating wavelet and its extension, a wavelet containg documents). &lt;code&gt;SimpleWavelet&lt;/code&gt; class is an example of such realization. &lt;code&gt;WavesClient&lt;/code&gt; class handles all the commands and returns the model of wavelet it contains to &lt;code&gt;GetClientViewServlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.messaging&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;All the things related to commands and messages&lt;/em&gt;; Commands/messages identifiers in &lt;code&gt;CommandID&lt;/code&gt;/&lt;code&gt;MessageTypeID&lt;/code&gt;, the &lt;code&gt;Command&lt;/code&gt; and &lt;code&gt;UpdateMessage&lt;/code&gt; classes themselves, and the commands receiving servlet &lt;code&gt;CommandsReceiverServlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Classes that define wavelet model&lt;/em&gt;; They contain each sub-model definition, like a participants list, chat ot text document. And a &lt;code&gt;ModelID&lt;/code&gt; classes that define the possible models with abstract &lt;code&gt;AModel&lt;/code&gt; class. Plus &lt;code&gt;ModelFactory&lt;/code&gt;, model factory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;The models values, something like &amp;ldquo;chat lines set&amp;rdquo;, &amp;ldquo;document text blocks set&amp;rdquo;, &amp;ldquo;list of waves online&amp;rdquo; and so on&lt;/em&gt;; Here in these classes the encoding to JSON is defined.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base.atom&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;What values are consist of, if it is required for their structure — «chat line», «text block», «wave identifier»&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base.chat&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Wavelet with chat extension and its client&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base.editor&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Wavelet with editable document support extenstion, not implemented currently, so disabled&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.render&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Classes related to rendering&lt;/em&gt;; There is the very class &lt;code&gt;JSUpdatesListener&lt;/code&gt; that calls updates callback function at client using DWR.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most logical way to make an extension is to implement &lt;code&gt;ADocumentWavelet&lt;/code&gt; class and to extend &lt;code&gt;WaveletWithChat&lt;/code&gt; class. Since in the most likely case you will operate with a &amp;ldquo;document&amp;rdquo; term (and a chat or anything other in this style is a document), this approach will fit you best. Also you&amp;rsquo;ll need to realize what you document model is (by implementing &lt;code&gt;AModel&lt;/code&gt; with some type, adding model ID in &lt;code&gt;ModelID&lt;/code&gt; enum and adding this model generation in &lt;code&gt;ModelFactory&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If your document will not handle any new commands, then it is enough - you can replace the wavelet that &lt;code&gt;GetClientViewSelvlet&lt;/code&gt; returns with your own and voila!.. Oh yes, do no forget to build UI at the client, but I&amp;rsquo;ll mention it below.&lt;/p&gt;

&lt;p&gt;Else, if you&amp;rsquo;ll need your own commands, strictly related to your document, you need to add these commands to &lt;code&gt;CommandID&lt;/code&gt; type. After that, you need to extend &lt;code&gt;WavesClient&lt;/code&gt; class to support your wavelet and to make it handle and pass new commands to wavelet independently from parent class. And, in this case, replace the &lt;code&gt;WavesClient&lt;/code&gt; implementation in &lt;code&gt;GetClientViewServlet&lt;/code&gt; with your and voila again! (and again, not mentioning the UI)&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need, of course, to handle some tricks when writing commands processing, but in outline it is all the required process for client extension.&lt;/p&gt;
&lt;h4 id=&#34;javascript&#34;&gt;JavaScript&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ui.js&lt;/code&gt;&lt;/strong&gt; is involved in the UI generation, each model block has the corresponding method&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;command.js&lt;/code&gt;&lt;/strong&gt; sends and generates commands, gets updates messages and contains buttons handlers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ajax.js&lt;/code&gt;&lt;/strong&gt; script to be replaced with the appropriate JQuery method, but my hands haven&amp;rsquo;t reached it :). used in &lt;code&gt;command.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add UI generation for your model, you need just to add a line that calls your handling method in &lt;code&gt;createClient&lt;/code&gt; and &lt;code&gt;renderUpdate&lt;/code&gt; methods of &lt;code&gt;ClientRenderer&lt;/code&gt; object in &lt;code&gt;ui.js&lt;/code&gt; and to write that method itself. Everything else will (must to) work on its own.&lt;/p&gt;
&lt;h4 id=&#34;css&#34;&gt;CSS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sametimed-plain.css&lt;/code&gt;&lt;/strong&gt; interface that is even a little bit worse than colored :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sametimed-colored.css&lt;/code&gt;&lt;/strong&gt; Windows-3.11-like, colored interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently the styles that handle positioning and the appearance (coloring) are not separated in different files (just using comments in that files), but may be I plan to.&lt;/p&gt;
&lt;h3 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h3&gt;
&lt;p&gt;I hope there will be a person who will be interested in this project, and if there will be, I plan to improve it more. For this moment, it is just an odd job &amp;ldquo;for interest&amp;rdquo;, but a little more efforts - ant it can become a sterling project.&lt;/p&gt;

&lt;p&gt;I ask those who will test it to send issues and bugs to the &lt;a href=&#34;http://code.google.com/p/sametimed/issues/list&#34;&gt;appropriate place&lt;/a&gt;, within reasonable limits and not about design :).&lt;/p&gt;

&lt;p&gt;Participation in development is welcomed, but only for free license :).&lt;/p&gt;
&lt;h4 id=&#34;an-important-notice&#34;&gt;An important notice&lt;/h4&gt;
&lt;p&gt;If you will test this application simultaneously with wave-protocol console (terminal) client, the messages that you send from terminal client will be received one later. It is not a bug and not an issue, it a way how chat &amp;ldquo;document&amp;rdquo; is generated. In the case of terminal Google had changed the document elements order so that is will be readable in console (as I suppose) - element start, element end and its body next). In my case the document is built in a &amp;ldquo;standard&amp;rdquo; way (start, body, end), this is the reason of discrepancy. If you will correct the way of generation either in my code or in terminal client code to be the same, they will fully comply with each other.&lt;/p&gt;

&lt;p&gt;And yes, no input validation is performed currently at client.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>[g]Vim in Python mode : Recompilation in Windows</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/vim-python-windows-compilation/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/vim-python-windows-compilation/</id>
                <updated>2008-03-15T23:14:00Z</updated>
                
                <summary type="html">Vim editor is best known between the developers who work on Unix systems &amp;ndash; it&amp;rsquo;s a &lt;code&gt;emacs&lt;/code&gt; competitor, something to call IDE-in-a-terminal &amp;ndash; this editor, with proper dexterity and tuning (it seems to me, the amount of required dexterity is a little less and the required efforts for tuning are more obvious than in &lt;code&gt;emacs&lt;/code&gt;, but the last has the real powerful functionality &amp;ndash; it&amp;rsquo;s a programmer&amp;rsquo;s choice what to use) can make most of development processes faster and easier not in the expense of such advantages like auto-completion and project navigation. But if you plan to use it for Python development in Windows with all the advantages like these &amp;ndash; you&amp;#39;&amp;rsquo;ll need to make some efforts, and the main effort is recompilation&amp;hellip;</summary>
                <content type="html">&lt;p&gt;Vim editor is best known between the developers who work on Unix systems &amp;ndash; it&amp;rsquo;s a &lt;code&gt;emacs&lt;/code&gt; competitor, something to call IDE-in-a-terminal &amp;ndash; this editor, with proper dexterity and tuning (it seems to me, the amount of required dexterity is a little less and the required efforts for tuning are more obvious than in &lt;code&gt;emacs&lt;/code&gt;, but the last has the real powerful functionality &amp;ndash; it&amp;rsquo;s a programmer&amp;rsquo;s choice what to use) can make most of development processes faster and easier not in the expense of such advantages like auto-completion and project navigation. But if you plan to use it for Python development in Windows with all the advantages like these &amp;ndash; you&amp;#39;&amp;rsquo;ll need to make some efforts, and the main effort is recompilation&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;Let me present you some links to read about the subject:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mgul.ac.ru/%7Et-alex/Linux/Vim-Color-Editor-HOW-TO/Vim-9.html&#34;&gt;Vim How-To&lt;/a&gt; — &lt;em&gt;(rus.)&lt;/em&gt; About working in Vim. Short, but very good tutorial for beginners. (&lt;a href=&#34;http://mgul.ac.ru/%7Et-alex/Linux/Vim-Color-Editor-HOW-TO/Vim.html&#34;&gt;full contents&lt;/a&gt;, has &lt;a href=&#34;http://mgul.ac.ru/%7Et-alex/Linux/Vim-Color-Editor-HOW-TO/Vim-10.html&#34;&gt;a commands reference&lt;/a&gt; inside)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&#34;&gt;Cheatsheets&lt;/a&gt; to learn key combinations easily and fast.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cachealot.habrahabr.ru/blog/45414.html#habracut&#34;&gt;An article about Vim usage&lt;/a&gt; &lt;em&gt;(rus.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://allaboutvim.blogspot.com/2007/12/vim-python.html&#34;&gt;Setting up Vim to work with Python&lt;/a&gt; - &lt;em&gt;(rus.)&lt;/em&gt; an article with a detailed description about setting up with all the required plugins.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://users.skynet.be/antoine.mechelynck/vim/compile.htm&#34;&gt;Compiling (g)Vim in Windows&lt;/a&gt; - the article that was a basis for the article you read.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://people.smu.edu/jrobinet/howto/compile-vim-on-windows.asp&#34;&gt;An alternative article&lt;/a&gt; about the same - a shorten one, but focusing on Python 2.5.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.petersblog.org/node/461&#34;&gt;Some notes&lt;/a&gt; about working with Python in Vim editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;versions&#34;&gt;Versions&lt;/h3&gt;
&lt;p&gt;A compilation was performed with &lt;code&gt;[g]Vim 7.1&lt;/code&gt;, &lt;code&gt;Python 2.5.2&lt;/code&gt;, &lt;code&gt;Tcl 8.5.1&lt;/code&gt;, &lt;code&gt;Cygwin 1.5.25-11&lt;/code&gt; on &lt;code&gt;Windows XP SP2&lt;/code&gt; but the scenario, in fact, might be mostly independent from any versions numbers.&lt;/p&gt;
&lt;h3 id=&#34;installing-required-software&#34;&gt;Installing required software&lt;/h3&gt;
&lt;p&gt;So let&amp;rsquo;s prepare. We need to install the language first &amp;ndash; &lt;a href=&#34;http://www.python.org/download/&#34;&gt;Python&lt;/a&gt; (if it is not installed) and, in you plan to use Tcl &amp;ndash; &lt;a href=&#34;http://www.tcl.tk/software/tcltk/&#34;&gt;Tcl/Tk&lt;/a&gt; (starting at some moment the Tcl language became a property of ActiveState: you can &lt;a href=&#34;http://www.activestate.com/store/activetcl&#34;&gt;download a free ActiveTcl package&lt;/a&gt;). The dynamic libraries of these languages are used through the compilation process.&lt;/p&gt;

&lt;p&gt;To work with archives and to make a compilation process possible you&amp;rsquo;ll need a Unix-utilities emulator running under Windows - it is &lt;a href=&#34;http://cygwin.com/&#34;&gt;Cygwin&lt;/a&gt;. It includes the the &lt;code&gt;gcc&lt;/code&gt; compiler, the our &amp;ldquo;boss&amp;rdquo; of compilation (there is a way to make it with Borland compiler, but please believe me, this way is much more complicated) and all the secondary stuff that will be required for it. &lt;a href=&#34;http://cygwin.com/setup.exe&#34;&gt;The installer&lt;/a&gt; works in not habitual way &amp;ndash; it downloads files and packages only just after you have selected them (and just if you choose to set everything up using Internet, but it is required for the first time anyway) &amp;ndash; herewith you, possibly, will return to installer to update or reinstall or install some more packages quite often. However, to install just the minimal set of stuff required in our case &amp;ndash; you need to select only several items: just after choosing a way of setting up (for current moment the most stable mirror was &lt;code&gt;ftp://mirror.switch.ch&lt;/code&gt; (but literally in these seconds it was removed from the list of official mirrors): if you&amp;rsquo;ll get download errors &amp;ndash; you will be returned to the mirror selection screen automatically) in the list of the packages, ensure that you are in &lt;code&gt;Category&lt;/code&gt; mode (switch it with &lt;code&gt;View&lt;/code&gt; button at the top, if required), and near the &lt;code&gt;All&lt;/code&gt; item, click &lt;code&gt;Default&lt;/code&gt; label several times to get it read as &lt;code&gt;Uninstall&lt;/code&gt; (not to install the packages you don&amp;rsquo;t need) and select the next items: &lt;code&gt;Utils/patch&lt;/code&gt;, &lt;code&gt;Devel/gcc-g++&lt;/code&gt;, &lt;code&gt;Devel/make&lt;/code&gt;, &lt;code&gt;System/man&lt;/code&gt; and &lt;code&gt;Devel/gcc-mingw&lt;/code&gt; (the last is already selected, may be, and if it&amp;rsquo;s true, then they have fixed the major problem that affected the whole compilation process :) ) &amp;ndash; now some other items will be automatically selected (let&amp;rsquo;s re-check): &lt;code&gt;Shells/bash&lt;/code&gt;, &lt;code&gt;Utils/bzip2&lt;/code&gt; and &lt;code&gt;Devel/mingw-runtime&lt;/code&gt; (the last is immensely important). Also I recommend to install &lt;code&gt;Web/wget&lt;/code&gt; to make the further downloading of patches easier. That&amp;rsquo;s all about &lt;code&gt;Cygwin&lt;/code&gt; at the moment, you can press install.&lt;/p&gt;

&lt;p&gt;Now we need to install &lt;a href=&#34;http://www.vim.org/download.php#pc&#34;&gt;gVim&lt;/a&gt; to dissect. You can tune it up for Python using &lt;a href=&#34;http://allaboutvim.blogspot.com/2007/12/vim-python.html&#34;&gt;this article&lt;/a&gt; I&amp;rsquo;ve mentioned before - but when you&amp;rsquo;ll try to get auto-complete working, Vim will say that it requires to be recompiled with &lt;code&gt;+python&lt;/code&gt; key and it is exactly what we plan to do.&lt;/p&gt;
&lt;h3 id=&#34;preparation&#34;&gt;Preparation&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;cmd&lt;/code&gt; and ensure that you have your name and your computer name set in your &lt;code&gt;USERNAME&lt;/code&gt; and &lt;code&gt;USERDOMAIN&lt;/code&gt; environment variables (&lt;code&gt;echo %username%@%userdomain%&lt;/code&gt;) and your &lt;code&gt;PATH&lt;/code&gt; contains a path to &lt;code&gt;bin&lt;/code&gt; of Cygwin.
&lt;code&gt;HOME&lt;/code&gt; may be set to your &amp;ldquo;My documents&amp;rdquo; folder (the place where your Vim configuration file &lt;code&gt;vimrc&lt;/code&gt; is stored), and &lt;code&gt;VIM&lt;/code&gt; shoul point to the installed working Vim editor, preferrably in &lt;code&gt;8.3&lt;/code&gt; format (i.e.: `&lt;code&gt;C:\PROGRA~1\VIM&lt;/code&gt;). You can change variables values in the dialog located here: &lt;em&gt;My computer → Options → Advanced → Environment Variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is also important to get the sources, so we &lt;a href=&#34;ftp://ftp.vim.org/pub/vim/unix/&#34;&gt;download them&lt;/a&gt; for the current installed version (be careful &amp;ndash; namely the sources for Unix, even when you compile under Win32) (using the previous link you ca also download the debug files, but debugging is not covered in this article so it is not very required). Along with that sources you need to get language (&lt;code&gt;-lang&lt;/code&gt;) and extra files for Windows (&lt;code&gt;-extra&lt;/code&gt;) for the corresponding version &lt;a href=&#34;ftp://ftp.vim.org/pub/vim/extra/&#34;&gt;from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, if you use a stable release and you want to install the newest patches &amp;ndash; follow &lt;a href=&#34;ftp://ftp.vim.org/pub/vim/patches/7.1/&#34;&gt;this link&lt;/a&gt; (correct the version number if you need) to get them. There is a problem gere, because they pack the patches only when their count reaches one hundred (001-100, 101-200 and so on), so for example if their count is 275 - you&amp;rsquo;ll need to download the late 75 files manually or by creating a batch-script which uses &lt;code&gt;telnet&lt;/code&gt;. However, we have Cygwin installed, so we can make an &lt;code&gt;.sh&lt;/code&gt;-script, executing the same functions using &lt;code&gt;wget&lt;/code&gt;, it can look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;bash&#34;&gt;
PATCHES_DOWNLOAD_PATH=ftp:&amp;#x2F;&amp;#x2F;ftp.vim.org&amp;#x2F;pub&amp;#x2F;vim&amp;#x2F;patches
PATCHES_VER=7.1
wget $PATCHES_DOWNLOAD_PATH&amp;#x2F;$PATCHES_VER&amp;#x2F;$PATCHES_VER.001-100.gz
wget $PATCHES_DOWNLOAD_PATH&amp;#x2F;$PATCHES_VER&amp;#x2F;$PATCHES_VER.101-200.gz

for i in `seq 201 278`;
do
    wget $PATCHES_DOWNLOAD_PATH&amp;#x2F;$PATCHES_VER&amp;#x2F;$PATCHES_VER.$i
done

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s sort the sources in order that is required for compilation.&lt;/p&gt;

&lt;p&gt;Source archive, &lt;code&gt;-extra&lt;/code&gt; and &lt;code&gt;-lang&lt;/code&gt; archives are required to be unpacked one by one (replacing the old files, though) in some directory, keeping the structure (let it be &lt;code&gt;C:/devel/vim-src/vim71&lt;/code&gt; in our case): there inside the &lt;code&gt;/doc&lt;/code&gt;,  &lt;code&gt;/nsis&lt;/code&gt;, &lt;code&gt;/src&lt;/code&gt;, &lt;code&gt;/farsi&lt;/code&gt; and s.o. directories must be placed. You can use &lt;code&gt;bzip2&lt;/code&gt; from Cygwin to unpack, or an internal archives plugin of &lt;a href=&#34;http://www.ghisler.com/&#34;&gt;Total Commander&lt;/a&gt; file manager, or a &lt;a href=&#34;http://www.7-zip.org/&#34;&gt;7-zip&lt;/a&gt; archivator or any other archive manager that copes well with &lt;code&gt;.tar.gz&lt;/code&gt;/&lt;code&gt;tar.bz&lt;/code&gt; :).&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/runtime&lt;/code&gt; subdirectory you can place &lt;code&gt;.vim&lt;/code&gt; files, &lt;code&gt;/doc&lt;/code&gt; and &lt;code&gt;/plugins&lt;/code&gt; from your working version of Vim editor - so the patches will also be applied to them accordingly, if you plan to use the patches way. Patches can be placed to &lt;code&gt;/patches&lt;/code&gt; directory, by the way.&lt;/p&gt;
&lt;h3 id=&#34;compilation&#34;&gt;Compilation&lt;/h3&gt;
&lt;p&gt;To install patches, you need to execute &lt;code&gt;patch&lt;/code&gt; command from Cygwin set over every one of them, unpacking the archives with bunches of hundreds of patches, provisionally. In this case I&amp;rsquo;ve used &lt;code&gt;.bat&lt;/code&gt;-files instead of &lt;code&gt;.sh&lt;/code&gt;-script (you need to correct the numbers of patches to apply your variant, of course):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;batch&#34;&gt;
@ECHO off
ECHO changing directory to parent...

CD ..

ECHO -------------------- %Date% -------------------- &amp;gt;&amp;gt; patching-src.log

ECHO %CD%: applying first 200 patches

patch -p0 &amp;lt; patches&amp;#x2F;7.1.001-100 &amp;gt;&amp;gt; patching-src.log 2&amp;gt;&amp;amp;1
patch -p0 &amp;lt; patches&amp;#x2F;7.1.101-200 &amp;gt;&amp;gt; patching-src.log 2&amp;gt;&amp;amp;1

ECHO %CD%: applying the last patches

FOR &amp;#x2F;L %%B IN (201,1,278) DO
    patch -p0 &amp;lt; patches&amp;#x2F;7.1.%%B &amp;gt;&amp;gt; patching-src.log 2&amp;gt;&amp;amp;1

ECHO Finished

PAUSE

@ECHO on

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Place this file in &lt;code&gt;/patches&lt;/code&gt; directory, ensure the directories structure matches the one described above, correct numbers and execute it. In the sources root there will be a &lt;code&gt;patching-src.log&lt;/code&gt; file created, where you can monitor the results of patching procedure. If &lt;code&gt;patch&lt;/code&gt; utility wasn&amp;rsquo;t found, ensure Cygwin path is in you &lt;code&gt;PATH&lt;/code&gt;. If some (small amount of) files has not been found and patched - there is nothing to worry about, they may relate to XWindow-version.&lt;/p&gt;

&lt;p&gt;Now we go directly to the compilation process, from Cygwin console. There is only execution of three commands required &amp;ndash; change to the source directory (Cygwin mounts your drives in &lt;code&gt;/cygdrive/&lt;/code&gt; point: correct the paths to you Python and Tcl installation folder and their concrete versions, but if you compiling a version without Tcl support &amp;ndash; just remove the coinciding parameters) and create &lt;code&gt;vim.exe&lt;/code&gt; (console version) and &lt;code&gt;gvim.exe&lt;/code&gt; (GUI-version) files:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;bash&#34;&gt;
$ cd &amp;#x2F;cygdrive&amp;#x2F;c&amp;#x2F;devel&amp;#x2F;vim-src&amp;#x2F;vim71
$ make -B -f Make_cyg.mak GUI=no \
    PYTHON=&amp;#x2F;cygdrive&amp;#x2F;c&amp;#x2F;devel&amp;#x2F;Python PYTHON_VER=25 DYNAMIC_PYTHON=yes \
    TCL=&amp;#x2F;cygdrive&amp;#x2F;c&amp;#x2F;devel&amp;#x2F;Tcl TCL_VER=85 DYNAMIC_TCL=yes vim.exe
$ make -B -f Make_cyg.mak OLE=yes \
    PYTHON=&amp;#x2F;cygdrive&amp;#x2F;c&amp;#x2F;devel&amp;#x2F;Python PYTHON_VER=25 DYNAMIC_PYTHON=yes \
    TCL=&amp;#x2F;cygdrive&amp;#x2F;c&amp;#x2F;devel&amp;#x2F;Tcl TCL_VER=85 DYNAMIC_TCL=yes gvim.exe

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can ignore warnings and even some of the errors if they relate to Python or Tcl, if process is still going and &lt;code&gt;.exe&lt;/code&gt;-files are created in the end. If everything has ended up successfully, then you&amp;rsquo;ll find both &lt;code&gt;.exe&lt;/code&gt; files in &lt;code&gt;src&lt;/code&gt; directory. Make a backup of existing files in working version of Vim (i.e. &lt;code&gt;vim.exe.bak&lt;/code&gt; and &lt;code&gt;gvim.exe.bak&lt;/code&gt;) and replace them with the ones just compiled. If you&amp;rsquo;ve applied the pathces, then place the &lt;code&gt;*.vim&lt;/code&gt; files, &lt;code&gt;/doc/&lt;/code&gt; and &lt;code&gt;/plugins&lt;/code&gt; directories back from &lt;code&gt;/runtime&lt;/code&gt; directory, making a backup before, replacing the old versions. Now launch Vim or gVim from the working Vim directory and re-check the version and the compilation options in the same place to have &lt;code&gt;+python&lt;/code&gt; key &amp;ndash; it must be ok in most cases.&lt;/p&gt;
&lt;h3 id=&#34;possible-drawbacks&#34;&gt;Possible drawbacks&lt;/h3&gt;
&lt;p&gt;During the process of compiltion I&amp;rsquo;ve met two errors: &lt;code&gt;cannot exec cc1: No such file or directory&lt;/code&gt; and &lt;code&gt;ld: cannot fin -lgcc&lt;/code&gt;. Both of them are &lt;a href=&#34;http://www.mail-archive.com/cygwin@cygwin.com/msg10910.html&#34;&gt;known to the authors&lt;/a&gt; of Cygwin, however in mine versions the were not yet solved. The first one is temporary solved by adding a directory with &lt;code&gt;cc1.exe&lt;/code&gt; executable file in local Cygwin &lt;code&gt;PATH&lt;/code&gt; prior to compilation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ PATH=$PATH:&amp;#x2F;cygdrive&amp;#x2F;c&amp;#x2F;devel&amp;#x2F;cygwin&amp;#x2F;lib&amp;#x2F;gcc&amp;#x2F;i686-pc-cygwin&amp;#x2F;3.4.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second one is solved the same way the first must to &amp;ndash; by installing &lt;code&gt;Devel/gcc-mingw&lt;/code&gt; (they promised to make it automatically when user chooses &lt;code&gt;gcc&lt;/code&gt; in future) while installing Cygwin. It is important to install the packages in same time, so if the error reappears still &amp;ndash; try to select &lt;code&gt;Reinstall&lt;/code&gt; mode in Cygwin installer just in the same place where you&amp;rsquo;ve selected &lt;code&gt;Uninstall&lt;/code&gt; before and re-install all packages again.&lt;/p&gt;
&lt;h3 id=&#34;tuning-up-vim-for-python&#34;&gt;Tuning up Vim for Python&lt;/h3&gt;
&lt;p&gt;(&lt;strong&gt;Upd.&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Basing on &lt;a href=&#34;http://allaboutvim.blogspot.com/2007/12/vim-python.html&#34;&gt;this article&lt;/a&gt; I&amp;rsquo;ve created a pack (you can take it &lt;a href=&#34;http://shaman-sir.by.ru/files/vimfiles.zip&#34;&gt;here&lt;/a&gt;) collected from the last versions of plugins mentioned there (&lt;a href=&#34;http://allaboutvim.blogspot.com/2007/07/projecttargz-ide.html&#34;&gt;Project&lt;/a&gt;, PythonComplete, NERD_Commenter, &lt;a href=&#34;http://allaboutvim.blogspot.com/2007/08/vcscommandvim-svn_09.html&#34;&gt;VCSCommand&lt;/a&gt;, RunScript and TagList plus, over them — &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=850&#34;&gt;PyDiction&lt;/a&gt;) + minimal setting (in &lt;code&gt;ftplugin/python.vim&lt;/code&gt;, practically identical to the one mention in the article (TabWrapper function changed + another way to include dictionary) &amp;ndash; &lt;em&gt;omni completion&lt;/em&gt; is set to &lt;code&gt;Tab&lt;/code&gt;). You need to extract the contents to the &lt;code&gt;&amp;lt;path_to_installed_vim&amp;gt;\vimfiles&lt;/code&gt;. For taglist plugin you&amp;rsquo;ll need to download ctags &lt;a href=&#34;http://prdownloads.sourceforge.net/ctags/ec57w32.zip&#34;&gt;from here&lt;/a&gt;, after unpacking to any directory, add its path to the &lt;code&gt;PATH&lt;/code&gt; environment variable. Then you need to run &lt;code&gt;vim&lt;/code&gt; and execute the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:helptags $VIM\vimfiles\doc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you&amp;rsquo;ll have a possibility to use &lt;code&gt;:help &amp;lt;plugin_name&amp;gt;&lt;/code&gt; to get documentation of the corresponding plugin.&lt;/p&gt;

&lt;p&gt;The default auto-completion, if you use this package settings, is called with &lt;code&gt;Tab&lt;/code&gt; key, context-completion (&lt;em&gt;omni completion&lt;/em&gt;) &amp;ndash; by &lt;code&gt;Ctrl+Enter&lt;/code&gt; and &lt;code&gt;Ctrl+Space&lt;/code&gt;, and completing keywords and modules &amp;ndash; by &lt;code&gt;Ctrl+Tab&lt;/code&gt; (when you have a lot of variants, dictionary is loaded slow, so I&amp;rsquo;ve set it to a not-so-easy combination).&lt;/p&gt;

&lt;p&gt;To include the &lt;a href=&#34;http://www.python.org/dev/peps/pep-0263/&#34;&gt;proposed&lt;/a&gt; by specification first lines in python files header automatically when created, add the code below to the &lt;code&gt;&amp;lt;path_to_installed_vim&amp;gt;\_vimrc&lt;/code&gt; (filename line is added to demonstrate a possibilities to add a file name):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function! BufNewFile_PY()
   0put = &amp;#x27;#!&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;env python&amp;#x27;
   1put = &amp;#x27;#-*- coding: utf-8 -*-&amp;#x27;
   $put = &amp;#x27;#-*- filename: &amp;#x27; . expand(&amp;#x27;&amp;#x27;) . &amp;#x27; -*-&amp;#x27;
   $put = &amp;#x27;&amp;#x27;
   $put = &amp;#x27;&amp;#x27;
   normal G
endfunction

autocmd BufNewFile *.py call BufNewFile_PY()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…So now you can program in Python with comfort.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Redeploying an Application to Tomcat with Ant</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/ant-tomcat-redeploying/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/ant-tomcat-redeploying/</id>
                <updated>2007-09-15T23:14:00Z</updated>
                
                <summary type="html">The process of out project development has one drawback, which is common to many serious J2EE-projects: after applying changes to the code code and further recompilation, a server do not catches a new version automatically, but requires stoping it, cleaning cache, restarting it again and then, redeploying a package.</summary>
                <content type="html">&lt;p&gt;The process of out project development has one drawback, which is common to many serious J2EE-projects: after applying changes to the code code and further recompilation, a server do not catches a new version automatically, but requires stoping it, cleaning cache, restarting it again and then, redeploying a package.&lt;/p&gt;

&lt;p&gt;Not to make this by hands every time, there are several ways to automate it manually (hm&amp;hellip;): for example, a batch or shell scripts for Windows or Linux accrodingly. But it seems to me, that it is more logical to entrust this work to the compiling ant-script: you press a button and everything restarts and reassembles by itself.&lt;/p&gt;

&lt;p&gt;(this version is for Windows)&lt;/p&gt;

&lt;p&gt;So I have taken an existing script and started to revise it. I&amp;rsquo;ve found several tricks about ant on Windows (but they are, may be, a common thing for a man who experienced with ant building :) ), and I&amp;rsquo;ve got the following script as a result.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;build.properties&lt;/code&gt; file. It contains a values that may change frequently so it is better to store them separately from the ant script.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;ini&#34;&gt;
# package name
war.name = SomeProjectPackage

# path to JDK
java.home = &amp;quot;C:\Worktable\Java\jdk1.5.0_12&amp;quot;
# path to the server root directory
server.dir = C:&amp;#x2F;Worktable&amp;#x2F;Java&amp;#x2F;apache-tomcat-5.5.25
# script that is used to start server
server.command = catalina.bat

# path to the project root directory
root.dir = C:&amp;#x2F;Workspace&amp;#x2F;SomeProject
# path to the place where package must be deployed
deploy.dir = ${server.dir}&amp;#x2F;webapps&amp;#x2F;

# JPDA setting (you can use a remote debugging by
# (for example, Eclipse can) connecting to the specified port)
jpda.transport = dt_socket
jpda.port = 56666

# path to the project libraries
lib.dir = ${root.dir}&amp;#x2F;lib&amp;#x2F;
# path to the project&amp;#x27;s temporary assemblage place
dist.dir = ${root.dir}&amp;#x2F;dist&amp;#x2F;
# path to the directory with web-content: pages, scripts, images and so on
web.dir = ${root.dir}&amp;#x2F;WebContent&amp;#x2F;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let us consider the script part by part. In the heading - we include our &lt;code&gt;.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;xml&#34;&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;

    &amp;lt;project name=&amp;quot;SomeProject&amp;quot; default=&amp;quot;redeploy&amp;quot; basedir=&amp;quot;.&amp;quot;&amp;gt;
    &amp;lt;property file=&amp;quot;build.properties&amp;quot;&amp;#x2F;&amp;gt;

    . . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the compilation target goes (&lt;code&gt;build&lt;/code&gt;), the target cleaning temporary directories used while building (&lt;code&gt;clean&lt;/code&gt;), and the rebuilding which, in fact, cleans and then builds the package (&lt;code&gt;rebuild&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;xml&#34;&gt;
    . . .

    &amp;lt;!-- Compiles project with all dependencies. --&amp;gt;

    &amp;lt;target name=&amp;quot;build&amp;quot;
            description=&amp;quot;--&amp;gt; compiles project with all dependencies&amp;quot;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;#x2F;classes&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;javac source=&amp;quot;1.5&amp;quot;
            srcdir=&amp;quot;${root.dir}&amp;#x2F;src&amp;quot;
            destdir=&amp;quot;${dist.dir}&amp;#x2F;classes&amp;quot;
            debug=&amp;quot;on&amp;quot;
            verbose=&amp;quot;false&amp;quot;
            optimize=&amp;quot;on&amp;quot;&amp;gt;
            &amp;lt;classpath&amp;gt;
                &amp;lt;fileset dir=&amp;quot;${lib.dir}&amp;quot; includes=&amp;quot;**&amp;#x2F;*.jar&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;classpath&amp;gt;
        &amp;lt;&amp;#x2F;javac&amp;gt;
    &amp;lt;&amp;#x2F;target&amp;gt;

    &amp;lt;!-- Cleans the build. --&amp;gt;

    &amp;lt;target name=&amp;quot;clean&amp;quot;
            description=&amp;quot;--&amp;gt; cleans the build&amp;quot;&amp;gt;
        &amp;lt;delete quiet=&amp;quot;true&amp;quot; dir=&amp;quot;${dist.dir}&amp;quot;&amp;#x2F;&amp;gt;
    &amp;lt;&amp;#x2F;target&amp;gt;

    &amp;lt;!-- Rebuild. --&amp;gt;

    &amp;lt;target name=&amp;quot;rebuild&amp;quot; depends=&amp;quot;clean,build&amp;quot;
            description=&amp;quot;--&amp;gt; [clean, build]&amp;quot;&amp;#x2F;&amp;gt;

    . . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the subject targets of the article &amp;ndash; a deploying target (put a new package to the servers), de-deploying target (taking an old package from server) and re-deploying target (which, in fact, takes and then puts).&lt;/p&gt;

&lt;p&gt;When deploying (&lt;code&gt;deploy&lt;/code&gt;) we compile the code (&lt;code&gt;depends=&amp;quot;build&amp;quot;&lt;/code&gt;), then create the logs directory at the server, then constructing a package from the compiled sources (with &lt;code&gt;jar&lt;/code&gt; command) and putting it to a temporary directory, and then we start a server. The server can be started from ant-script only from inside its own environment, in case of Windows, so we need to call it using &lt;code&gt;cmd /c catalina.bat jpda start&lt;/code&gt; command with ant &lt;code&gt;exec&lt;/code&gt; (arguments must be separated the exactly same way as you see them below &amp;ndash; &lt;code&gt;exec&lt;/code&gt; must wrap the whole &lt;code&gt;catalina jpda start&lt;/code&gt; command with quotes correctly). Also we need to pass several environment variables to server, what we do using &lt;code&gt;env&lt;/code&gt; commands. The server is started in separate thread (&lt;code&gt;spawn=&amp;quot;true&amp;quot;&lt;/code&gt; &amp;ndash; or else the script will inactively wait for a server to return an exit code that will not happen while server is running) and in the clean way (not using java-vm &amp;ndash; &lt;code&gt;vmlauncher=&amp;quot;false&amp;quot;&lt;/code&gt;). Now server is running, we can deploy a package there and then clean up the temporary directories and files (&lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; commands sequence).&lt;/p&gt;

&lt;p&gt;To unload a package from server (&lt;code&gt;undeploy&lt;/code&gt;) we stop the server using the rules specified above (when stopping we can&amp;rsquo;t specify JPDA variables and wait for a server to stop; but if something had failed &amp;ndash; it is a normal state &amp;ndash; may be a server was not started at all (&lt;code&gt;failifexecutionfails=&amp;quot;false&amp;quot;&lt;/code&gt;)). Then we clean up the directory at the server where our package was deployed (being unpackaged), removing the package itself and we clean the server cache.&lt;/p&gt;

&lt;p&gt;When we redeploy (&lt;code&gt;redeploy&lt;/code&gt;) &amp;ndash; a default target &amp;ndash; the old version of the package is removed from the server (&lt;code&gt;undeploy&lt;/code&gt;), temporay directories are cleaned up (&lt;code&gt;clean&lt;/code&gt;), then package is constructed and deployed to server (&lt;code&gt;deploy&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;xml&#34;&gt;
    . . .

    &amp;lt;!-- Prepares deployment --&amp;gt;

    &amp;lt;target name=&amp;quot;pre-deploy&amp;quot;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;#x2F;WEB-INF&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;#x2F;WEB-INF&amp;#x2F;classes&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;#x2F;WEB-INF&amp;#x2F;lib&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;copy todir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;quot;&amp;gt;
            &amp;lt;fileset dir=&amp;quot;${web.dir}&amp;quot;&amp;gt;
                &amp;lt;include name=&amp;quot;**&amp;#x2F;*.*&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;fileset&amp;gt;
        &amp;lt;&amp;#x2F;copy&amp;gt;
        &amp;lt;copy todir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;#x2F;WEB-INF&amp;#x2F;classes&amp;quot;&amp;gt;
            &amp;lt;fileset dir=&amp;quot;${dist.dir}&amp;#x2F;classes&amp;quot;&amp;gt;
                &amp;lt;include name=&amp;quot;**&amp;#x2F;*.*&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;fileset&amp;gt;
        &amp;lt;&amp;#x2F;copy&amp;gt;
        &amp;lt;copy todir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;#x2F;WEB-INF&amp;#x2F;lib&amp;quot; flatten=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;fileset dir=&amp;quot;${lib.dir}&amp;quot;&amp;gt;
                &amp;lt;include name=&amp;quot;**&amp;#x2F;*.jar&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;fileset&amp;gt;
        &amp;lt;&amp;#x2F;copy&amp;gt;
    &amp;lt;&amp;#x2F;target&amp;gt;

    &amp;lt;!-- Deploys application on server. --&amp;gt;

    &amp;lt;target name=&amp;quot;deploy&amp;quot; depends=&amp;quot;rebuild, pre-deploy&amp;quot;
            description=&amp;quot;--&amp;gt; deploys application on server&amp;quot;&amp;gt;
        &amp;lt;mkdir dir=&amp;quot;${server.dir}&amp;#x2F;logs&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;jar jarfile=&amp;quot;${war.name}.war&amp;quot; basedir=&amp;quot;${dist.dir}&amp;#x2F;war&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;exec dir=&amp;quot;${server.dir}&amp;#x2F;bin&amp;quot; executable=&amp;quot;cmd&amp;quot;
                vmlauncher=&amp;quot;false&amp;quot; spawn=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;env key=&amp;quot;JAVA_HOME&amp;quot; value=&amp;quot;${java.home}&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;env key=&amp;quot;JPDA_TRANSPORT&amp;quot; value=&amp;quot;${jpda.transport}&amp;quot; &amp;#x2F;&amp;gt;
            &amp;lt;env key=&amp;quot;JPDA_ADDRESS&amp;quot; value=&amp;quot;${jpda.port}&amp;quot; &amp;#x2F;&amp;gt;
            &amp;lt;env key=&amp;quot;CATALINA_HOME&amp;quot; value=&amp;quot;${server.dir}&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;arg value=&amp;quot;&amp;#x2F;c&amp;quot; &amp;#x2F;&amp;gt;
            &amp;lt;arg value=&amp;quot;${server.command} jpda start&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;&amp;#x2F;exec&amp;gt;

        &amp;lt;copy file=&amp;quot;${war.name}.war&amp;quot; todir=&amp;quot;${deploy.dir}&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;delete dir=&amp;quot;${dist.dir}&amp;quot; failonerror=&amp;quot;false&amp;quot; &amp;#x2F;&amp;gt;
        &amp;lt;delete file=&amp;quot;${war.name}.war&amp;quot; failonerror=&amp;quot;false&amp;quot; &amp;#x2F;&amp;gt;
    &amp;lt;&amp;#x2F;target&amp;gt;

    &amp;lt;!-- Un-deploys application from server. --&amp;gt;

    &amp;lt;target name=&amp;quot;undeploy&amp;quot;
            description=&amp;quot;--&amp;gt; un-deploys application from server&amp;quot;&amp;gt;
        &amp;lt;exec dir=&amp;quot;${server.dir}&amp;#x2F;bin&amp;quot; executable=&amp;quot;cmd&amp;quot;
                failifexecutionfails=&amp;quot;false&amp;quot; vmlauncher=&amp;quot;false&amp;quot;&amp;gt;
            &amp;lt;env key=&amp;quot;JAVA_HOME&amp;quot; value=&amp;quot;${java.home}&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;env key=&amp;quot;CATALINA_HOME&amp;quot; value=&amp;quot;${server.dir}&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;arg value=&amp;quot;&amp;#x2F;c&amp;quot; &amp;#x2F;&amp;gt;
            &amp;lt;arg value=&amp;quot;${server.command} stop&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;&amp;#x2F;exec&amp;gt;

        &amp;lt;delete quiet=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;fileset dir=&amp;quot;${deploy.dir}&amp;quot;&amp;gt;
                &amp;lt;include name=&amp;quot;${war.name}*&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;fileset&amp;gt;
        &amp;lt;&amp;#x2F;delete&amp;gt;

        &amp;lt;delete dir=&amp;quot;${deploy.dir}&amp;#x2F;${war.name}&amp;quot; failonerror=&amp;quot;false&amp;quot;&amp;#x2F;&amp;gt;
        &amp;lt;delete file=&amp;quot;${deploy.dir}&amp;#x2F;${war.name}.war&amp;quot; failonerror=&amp;quot;false&amp;quot; &amp;#x2F;&amp;gt;
        &amp;lt;delete dir=&amp;quot;${server.dir}&amp;#x2F;work&amp;#x2F;Catalina&amp;quot; failonerror=&amp;quot;false&amp;quot; &amp;#x2F;&amp;gt;
    &amp;lt;&amp;#x2F;target&amp;gt;

    &amp;lt;!-- Re-deploys application on server. --&amp;gt;

    &amp;lt;target name=&amp;quot;redeploy&amp;quot;
            depends=&amp;quot;undeploy,clean,deploy&amp;quot;
            description=&amp;quot;--&amp;gt; [undeploy,clean,deploy]&amp;quot;&amp;gt;
    &amp;lt;&amp;#x2F;target&amp;gt;

    &amp;lt;&amp;#x2F;project&amp;gt;

&amp;lt;&amp;#x2F;xml&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems that&amp;rsquo;s all :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Yes, as people give me advices, there is &lt;a href=&#34;http://tomcat.apache.org/tomcat-5.5-doc/deployer-howto.html#Deploying%20using%20the%20Client%20Deployer%20Package&#34;&gt;Tomcat Client Deployer&lt;/a&gt; &amp;ndash; a package that has a levers to re-deploy with Ant, but it requires a server to be running all the time.&lt;/p&gt;

&lt;p&gt;And yes, there are another ways to do it like &lt;a href=&#34;http://cruisecontrol.sourceforge.net/&#34;&gt;CruiseControl&lt;/a&gt; but it seems for me, it is not so required to setup a packages like this just to redeploy something fast.&lt;/p&gt;

&lt;p&gt;And yes I also know now that &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; has a &lt;a href=&#34;http://maven.apache.org/maven-1.x/plugins/war/goals.html&#34;&gt;war-plugin&lt;/a&gt; for something similar our targets&amp;hellip; Maven is fat, forget it :)&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>OOP &amp;amp; JavaScript</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/javascript-oop/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/javascript-oop/</id>
                <updated>2007-08-19T23:14:00Z</updated>
                
                <summary type="html">In &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;previous article&lt;/a&gt; I have presented you a small example of code, which allows you to use the three pillars of OOP theory in JavaScript. The way it is accomplished is a little tricky, but I have afforded mysefl to modify &lt;code&gt;extend&lt;/code&gt; function a bit, to give a possibility of having a static constants for classes (in fact, the constants in result are just conventional, of course). Here I will provide a special example for it.</summary>
                <content type="html">&lt;p&gt;In &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;previous article&lt;/a&gt; I have presented you a small example of code, which allows you to use the three pillars of OOP theory in JavaScript. The way it is accomplished is a little tricky, but I have afforded mysefl to modify &lt;code&gt;extend&lt;/code&gt; function a bit, to give a possibility of having a static constants for classes (in fact, the constants in result are just conventional, of course). Here I will provide a special example for it.&lt;/p&gt;

&lt;p&gt;So, the basic functions (I&amp;rsquo;ll say it again, I have taken them from &lt;a href=&#34;http://www.ajaxpath.com/javascript-inheritance&#34;&gt;AJAXPath&lt;/a&gt; and &lt;a href=&#34;http://ajaxpatterns.org/Javascript_Inheritance&#34;&gt;AJAXPatterns&lt;/a&gt; sources):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function Class() { };

Class.prototype.construct = function() { };

Class.extend = function(def) {

    var classDef = function() {
        if (arguments[0] !== Class) {
            this.construct.apply(this, arguments);
        }
    };

    var proto = new this(Class);
    var superClass = this.prototype;

    for (var n in def) {
        var item = def[n];
        if (item instanceof Function) item.$ = superClass;
                else classDef[n] = item;
        proto[n] = item;
    }

    classDef.prototype = proto;
    classDef.extend = this.extend;

    return classDef;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Through the usage of these three functions, you have a possibility to build a relatively serious and deep-constructed frameworks, not loosing the code readability and a way to find a needed place to change fast. Plus OOP possibilities, of course&lt;/p&gt;

&lt;p&gt;These three functions were used as a foundation of OOP-Drag&amp;#39;n&amp;#39;Drop framework for a major project in Java+Wicket. I will provide later this code itself, if it will be possible and allowed by a company.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s return to business. For a code like this you need an example. I have build a little script that emulates a Windows OS, I hope it will match your needs:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
&amp;#x2F;* some helping functions *&amp;#x2F;

function getInstanceOf(className) {
    &amp;#x2F;&amp;#x2F; creates an object using the class name
    return eval(&amp;#x27;new &amp;#x27; + className + &amp;#x27;()&amp;#x27;);
}

function pause(millis) &amp;#x2F;&amp;#x2F; pauses the execution of script
    &amp;#x2F;&amp;#x2F; for a specified number of milliseconds
{
    var time = new Date();
    var curTime = null;
    do { curTime = new Date(); }
        while( curTime - time &amp;lt; millis);
}

&amp;#x2F;* === Abstract Operating System === *&amp;#x2F;

var AbstractOS = Class.extend({

    construct: &amp;#x2F;&amp;#x2F; constructor, parameter is a computer type
        function(computerClassName) {
            &amp;#x2F;&amp;#x2F; coumputer that runs OS
            this._computer = getInstanceOf(computerClassName);
        },

    getComputer: function() { return this._computer; },

    reboot: &amp;#x2F;&amp;#x2F; OS reboot
        function() {
            return this.getComputer().shutDown() &amp;amp;&amp;amp;
                   this.getComputer().startUp();
        },

    shutDown: &amp;#x2F;&amp;#x2F; OS shuts down
        function() { return this.getComputer().shutDown(); },

    startUp: &amp;#x2F;&amp;#x2F; OS starts
        function() { return this.getComputer().startUp(); },

    exec: &amp;#x2F;&amp;#x2F; an abstract (conventionally) method to execute commands
        function(commandStr) { return false; },

    cycle: &amp;#x2F;&amp;#x2F; starting OS, executing command, shutting OS down
        function(cmdStr) {
            return this.startUp() &amp;amp;&amp;amp; this.exec(cmdStr) &amp;amp;&amp;amp;
                                     this.shutDown();
        }

});

&amp;#x2F;* === Blue Screen of Death === *&amp;#x2F;

var BSOD = Class.extend({

    launch: &amp;#x2F;&amp;#x2F; launch
        function() {
            alert(&amp;#x27;You see the BSOD&amp;#x27;);
            return true;
        }

});

&amp;#x2F;* === MS Windows Operating System === *&amp;#x2F;

var MSWindows = AbstractOS.extend({
    &amp;#x2F;&amp;#x2F; inherits abstract OS

    &amp;#x2F;&amp;#x2F; messages are static constants (conventional)
    STARTUP_MSG: &amp;#x27;Windows Starting&amp;#x27;,
    EXEC_MSG: &amp;#x27;This program has performed an illegal operation&amp;#x27;,
    REBOOT_MSG: &amp;#x27;Do you really want to reboot your computer?&amp;#x27;,

    construct: &amp;#x2F;&amp;#x2F; constructor, parameter is a type of computer
        function(computerClassName) {
            &amp;#x2F;&amp;#x2F; calling parent constructor
            arguments.callee.$.construct.call(this, computerClassName);
            &amp;#x2F;&amp;#x2F; a cached instance of death screen (it will be the only one)
            this._bsod = new BSOD();
        },

    getBSOD: function() { return this._bsod; },

    reboot: &amp;#x2F;&amp;#x2F; reboot is overriden
        function() {
            &amp;#x2F;&amp;#x2F; displaying message
            alert(MSWindows.REBOOT_MSG);
            &amp;#x2F;&amp;#x2F; calling parent method
            return arguments.callee.$.reboot.call(this);
        },

    shutDown: &amp;#x2F;&amp;#x2F; shutting off is overriden
        function() {
            &amp;#x2F;&amp;#x2F; calling BSOD and if it was successfull,
            &amp;#x2F;&amp;#x2F; call a parent method, boolean result is returned
            return (this.getBSOD().launch() &amp;amp;&amp;amp;
                    arguments.callee.$.shutDown.call(this));
        },

    startUp: &amp;#x2F;&amp;#x2F; booting is overriden
        function() {
            &amp;#x2F;&amp;#x2F; if parent method was succesfully executed
            if (arguments.callee.$.startUp.call(this)) {
                &amp;#x2F;&amp;#x2F; do some required operations
                pause(400);
                &amp;#x2F;&amp;#x2F;setTimeout(&amp;quot;alert(&amp;#x27;Windows Starting&amp;#x27;)&amp;quot;, 400);
                &amp;#x2F;&amp;#x2F; say we succesfully started
                alert(MSWindows.STARTUP_MSG);
                return true;
            } else return false; &amp;#x2F;&amp;#x2F; no is no
        },

    exec: &amp;#x2F;&amp;#x2F; command execution is overriden
        function(commandStr) {
            &amp;#x2F;&amp;#x2F; if command is valid - say a result
            &amp;#x2F;&amp;#x2F; else just shut down
            return commandStr
                ? alert(MSWindows.EXEC_MSG)
                : this.shutDown();
        }

});

&amp;#x2F;* === Usual Computer === *&amp;#x2F;

var SimpleComputer = Class.extend({

    startUp: &amp;#x2F;&amp;#x2F; alert when starts
        function() { alert(&amp;#x27;Starting Up&amp;#x27;); return true; },

    shutDown: &amp;#x2F;&amp;#x2F; alerts when shutting down
        function() { alert(&amp;#x27;Shutting Down&amp;#x27;); return true; }

});

&amp;#x2F;* test function *&amp;#x2F;

function perform() {
    &amp;#x2F;&amp;#x2F; OS is initialized on computer (installation)
    var testOs = new MSWindows(&amp;#x27;SimpleComputer&amp;#x27;);
    &amp;#x2F;&amp;#x2F; starting OS
    testOs.startUp();
    &amp;#x2F;&amp;#x2F; executing a trivial command
    testOs.exec(&amp;#x27;ls -laF&amp;#x27;);
    &amp;#x2F;&amp;#x2F; shutting OS off
    testOs.shutDown();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (pay attention not to put a comma after the last method definition in class, or IE will fail)&lt;/p&gt;

&lt;p&gt;If you have disliked the previous example &amp;ndash; I can offer you a useful class, that really helps if the idea of DOM element intersects with the manipulated object idea inside your project:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var ElementWrapper = Class.extend({

    construct:
        function(elementId) {
            this.elementId = elementId;
            this.element = null;
            this._initializeElement();
        },

    _initializeElement:
        function() {
            var docElm = document.getElementById(this.elementId);
            if (!docElm) {
                this.element = document.createElement(&amp;#x27;div&amp;#x27;);
                this.element.id = this.elementId;
            } else {
                this.element = docElm;
            }
            this._assignListeners();
        },

    _assignListeners:
        function() {
            . . .
        },

    . . .

    reassignTo:
        function(elementId) {
            this.elementId = elementId;
            this.element = null;
            this._initializeElement();
        }

});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can comfortly extend this class with other classes expanding the DOM elements functionality. Also, you can use a code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var someElement = new ElementWrapper(&amp;#x27;someElmId&amp;#x27;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and &lt;code&gt;someElement&lt;/code&gt; object will be linked to element (wrapping an element) with &lt;code&gt;id&lt;/code&gt; &lt;em&gt;‘&lt;code&gt;SomeElmId&lt;/code&gt;’&lt;/em&gt;. To access it &amp;ndash; as a DOM element &amp;ndash; you can ask &lt;code&gt;someElement.element&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The following class inherits &lt;code&gt;ElementWrapper&lt;/code&gt; and allows to work with element as a fully-functional graphic object (using some functions from &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;previous article&lt;/a&gt;: &lt;code&gt;getElmAttr&lt;/code&gt;, &lt;code&gt;setElmAttr&lt;/code&gt;, &lt;code&gt;findOffsetHeight&lt;/code&gt;, &lt;code&gt;getPosition&lt;/code&gt;, &lt;code&gt;getAlignedPosition&lt;/code&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As it is for some functions from &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;previous article&lt;/a&gt;, the code is changed through times &amp;ndash; in this case it was parallelly simplified and growed in functionality:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var DND_NS              = &amp;#x27;dnd&amp;#x27;; &amp;#x2F;&amp;#x2F; to use in getAttributeNS and setAttributeNS

var DND_LWIDTH_ATTR     = &amp;#x27;localWidth&amp;#x27;;
var DND_LHEIGHT_ATTR    = &amp;#x27;localHeight&amp;#x27;;
var DND_LTOP_ATTR       = &amp;#x27;localTop&amp;#x27;;
var DND_LLEFT_ATTR      = &amp;#x27;localLeft&amp;#x27;;
var DND_BTOP_ATTR       = &amp;#x27;baseTop&amp;#x27;;
var DND_BLEFT_ATTR      = &amp;#x27;baseLeft&amp;#x27;;

var GraphicalElementWrapper = ExpandedElementWrapper.extend({

    _assignListeners:
        function() {
            &amp;#x2F;&amp;#x2F; do not assign events listeners if they are not required
        },

    &amp;#x2F;&amp;#x2F; ========[ functions to work with required attributes ]==========

    &amp;#x2F;* localLeft, localTop -- coordinates of the lop left element corner,
                              taking the [scrolling] offset into account;
       localWidth, localHeight -- the real height and width of element
       baseLeft, baseTop -- coorfinates of top left element corner
                            without the [scrolling] offset *&amp;#x2F;

    setLocalWidth:
        function(localWidth) {
            setElmAttr(this.element, DND_LWIDTH_ATTR, localWidth + &amp;#x27;px&amp;#x27;, DND_NS);
        },

    setLocalHeight:
        function(localHeight) {
            setElmAttr(this.element, DND_LHEIGHT_ATTR, localHeight + &amp;#x27;px&amp;#x27;, DND_NS);
        },

    setLocalLeft:
        function(localLeft) {
            setElmAttr(this.element, DND_LLEFT_ATTR, localLeft + &amp;#x27;px&amp;#x27;, DND_NS);
        },

    setLocalTop:
        function(localTop) {
            setElmAttr(this.element, DND_LTOP_ATTR, localTop + &amp;#x27;px&amp;#x27;, DND_NS);
        },

    setBaseLeft:
        function(baseLeft) {
            setElmAttr(this.element, DND_BLEFT_ATTR, baseLeft + &amp;#x27;px&amp;#x27;, DND_NS);
        },

    setBaseTop:
        function(baseTop) {
            setElmAttr(this.element, DND_BTOP_ATTR, baseTop + &amp;#x27;px&amp;#x27;, DND_NS);
        },

    getLocalWidth:
        function() {
            return getElmAttr(this.element, DND_LWIDTH_ATTR, DND_NS);
        },

    getLocalHeight:
        function() {
            return getElmAttr(this.element, DND_LHEIGHT_ATTR, DND_NS);
        },

    getLocalLeft:
        function() {
            return getElmAttr(this.element, DND_LLEFT_ATTR, DND_NS);
        },

    getLocalTop:
        function() {
            return getElmAttr(this.element, DND_LTOP_ATTR, DND_NS);
        },

    getBaseLeft:
        function() {
            return getElmAttr(this.element, DND_BLEFT_ATTR, DND_NS);
        },

    getBaseTop:
        function() {
            return getElmAttr(this.element, DND_BTOP_ATTR, DND_NS);
        },

    getOffsetWidth:
        function() {
            return this.element.offsetWidth;
        },

    getOffsetHeight:
        function() {
            return this.element.offsetHeight || this.element.style.pixelHeight || findOffsetHeight(this.element);
        },

    &amp;#x2F;&amp;#x2F; =======[ &amp;#x2F; function to set required attributes ]=========

    show: &amp;#x2F;&amp;#x2F; show element
        function() {
            this.element.style.display    = &amp;#x27;&amp;#x27;;
            this.element.style.visibility = &amp;#x27;visible&amp;#x27;;
        },

    hide: &amp;#x2F;&amp;#x2F; hide element
        function() {
            if (this.element.style.display != &amp;#x27;none&amp;#x27;) {
                this.element.style.display  = &amp;#x27;none&amp;#x27;;
            }
        },

    blank: &amp;#x2F;&amp;#x2F; make element &amp;quot;blank&amp;quot;
        function() {
            if (this.element.style.display != &amp;#x27;&amp;#x27;) {
                this.element.style.display    = &amp;#x27;&amp;#x27;;
                this.element.style.visibility = &amp;#x27;hidden&amp;#x27;;
            }
        },

    makeBlock: &amp;#x2F;&amp;#x2F; return the element from blank or hidden state
        function() {
            if (this.element.style.display != &amp;#x27;block&amp;#x27;) {
                this.element.style.display  = &amp;#x27;block&amp;#x27;;
            }
        },

    isPointInside: &amp;#x2F;&amp;#x2F; is point inside the element, point in {x, y} format
        function(curPoint) {
            var localRight  = parseInt(this.getLocalLeft()) + parseInt(this.getLocalWidth())
                                       + this.element.scrollLeft;
            var localBottom = parseInt(this.getLocalTop())  + parseInt(this.getLocalHeight())
                                       + this.element.scrollTop;
            return (parseInt(this.getLocalLeft()) &amp;lt; curPoint.x) &amp;amp;&amp;amp;
                   (parseInt(this.getLocalTop())  &amp;lt; curPoint.y) &amp;amp;&amp;amp;
                   (localRight &amp;gt; curPoint.x) &amp;amp;&amp;amp; (localBottom &amp;gt; curPoint.y);
        },

    isElementNear: &amp;#x2F;* is element is positioned near the passed element
            (overlaps the region of this element with more than a half of the current element region) *&amp;#x2F;
        function(graphicalElement) {
            if (graphicalElement) {
                var elmCurPos = findPos(graphicalElement.element);
                var elmHalfHeight = parseInt(graphicalElement.getLocalHeight())&amp;#x2F;2;
                var elmHalfWidth = parseInt(graphicalElement.getLocalWidth())&amp;#x2F;2;
                var localLeft = (parseInt(this.getLocalLeft()) &amp;gt; 0 ? parseInt(this.getLocalLeft()) : 0);
                var localTop = (parseInt(this.getLocalTop()) &amp;gt; 0 ? parseInt(this.getLocalTop()) : 0);
                var leftCorrect = (elmCurPos.x &amp;gt; (localLeft - elmHalfWidth)) &amp;amp;&amp;amp;
                                  (elmCurPos.x &amp;lt; (localLeft + parseInt(this.getLocalWidth()) - elmHalfWidth));
                var topCorrect = (elmCurPos.y &amp;gt; (localTop - elmHalfHeight)) &amp;amp;&amp;amp;
                                 (elmCurPos.y &amp;lt; (localTop + parseInt(this.getLocalHeight()) - elmHalfHeight));
                return leftCorrect &amp;amp;&amp;amp; topCorrect;
            } else return false;
        },

    isElementInside: &amp;#x2F;&amp;#x2F; is passed element is inside current element
        function(graphicalElement) {
            if (graphicalElement) {
                var elmCurPos = findPos(graphicalElement.element);
                var elmHalfHeight = parseInt(graphicalElement.getOffsetHeight())&amp;#x2F;2;
                var elmHalfWidth = parseInt(graphicalElement.getOffsetWidth())&amp;#x2F;2;
                return this.isPointInside({x:(elmCurPos.x + elmHalfWidth),
                                       y:(elmCurPos.y + elmHalfHeight)})
            } else return false;
        },

    isLeftSide: &amp;#x2F;&amp;#x2F; is the point ({x, y}) on the left side of elements region
        function(curPoint) {
            var elmHalfWidth = parseInt(this.getLocalWidth())&amp;#x2F;2;
            var localLeft = (parseInt(this.getLocalLeft()) &amp;gt; 0 ? parseInt(this.getLocalLeft()) : 0);
            return (curPoint.x &amp;gt;= localLeft) &amp;amp;&amp;amp; (curPoint.x &amp;lt; (localLeft + elmHalfWidth));
        },

    isRightSide: &amp;#x2F;&amp;#x2F; is the point ({x, y}) on the right side of elements region
        function(curPoint) {
            var elmHalfWidth = parseInt(this.getLocalWidth())&amp;#x2F;2;
            var localRight = ((parseInt(this.getLocalLeft()) &amp;gt; 0
                    ? parseInt(this.getLocalLeft())
                    : 0)) + parseInt(this.getLocalWidth());
            return (curPoint.x &amp;lt;= localRight) &amp;amp;&amp;amp; (curPoint.x &amp;gt; (localRight - elmHalfWidth));
        },

    inTopOf: &amp;#x2F;&amp;#x2F; is the point ({x, y}) on the top side of elements region
        function(curPoint) {
            var localTop    = (parseInt(this.getLocalTop()) &amp;gt; 0 ? parseInt(this.getLocalTop()) : 0);
            var localHeight = (parseInt(this.getLocalHeight()) &amp;gt; 0 ? parseInt(this.getLocalHeight()) : 0);
            if (this.element.clientHeight &amp;amp;&amp;amp; (this.element.clientHeight &amp;lt; localHeight))
                localHeight = this.element.clientHeight;
            return ((curPoint.y &amp;gt; localTop) &amp;amp;&amp;amp; (curPoint.y &amp;lt;= (localTop + (localHeight &amp;#x2F; 10))));
        },

    inBottomOf: &amp;#x2F;&amp;#x2F; is the point ({x, y}) on the bottom side of elements region
        function(curPoint) {
            var localTop    = (parseInt(this.getLocalTop()) &amp;gt; 0 ? parseInt(this.getLocalTop()) : 0);
            var localHeight = (parseInt(this.getLocalHeight()) &amp;gt; 0 ? parseInt(this.getLocalHeight()) : 0);
            if (this.element.clientHeight &amp;amp;&amp;amp; (this.element.clientHeight &amp;lt; localHeight))
                localHeight = this.element.clientHeight;
            return ((curPoint.y &amp;gt;= (localTop + localHeight - (localHeight &amp;#x2F; 10))) &amp;amp;&amp;amp;
                    (curPoint.y &amp;lt; (localTop + localHeight)));
        },

    recalc: &amp;#x2F;&amp;#x2F; recalculates the element&amp;#x27;s coordinates
           &amp;#x2F;* baseOffset in the very most cases is
           { x: this.element.scrollLeft, y: this.element.scrollTop } *&amp;#x2F;
        function(baseOffset) {

            var pos = findPos(this.element);

            this.setBaseLeft(pos.x);
            this.setBaseTop(pos.y);
            this.setLocalLeft(pos.x - (baseOffset ? baseOffset.x : 0));
            this.setLocalTop(pos.y - (baseOffset ? baseOffset.y : 0));
            this.setLocalWidth(parseInt(this.getOffsetWidth()));
            this.setLocalHeight(parseInt(this.getOffsetHeight()));
        },

    addOffset: &amp;#x2F;&amp;#x2F; adds the offset to element, offset is in {x, y} format
        function(offsetXY) {
            this.setLocalLeft(parseInt(this.getBaseLeft()) - offsetXY.x);
            this.setLocalTop(parseInt(this.getBaseTop()) - offsetXY.y);
        },

    copyElmRectParameters: &amp;#x2F;&amp;#x2F; copy attributes of this element to another
        function(fromElm, toElm) {
            toElm = toElm || this.element;
            setElmAttr(toElm, DND_BTOP_ATTR, getElmAttr(fromElm, DND_BTOP_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_BLEFT_ATTR, getElmAttr(fromElm, DND_BLEFT_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LTOP_ATTR, getElmAttr(fromElm, DND_LTOP_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LLEFT_ATTR, getElmAttr(fromElm, DND_LLEFT_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LWIDTH_ATTR, getElmAttr(fromElm, DND_LWIDTH_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LHEIGHT_ATTR, getElmAttr(fromElm, DND_LHEIGHT_ATTR, DND_NS), DND_NS);
        }

});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these classes, I hope, will help you with making DOM elements more graphical-base (for example, for Drag&amp;#39;n&amp;#39;Drop (here I&amp;rsquo;ve extended the dragging nodes classes, regions classes, receiving regions classes and drag helper &amp;ndash; from &lt;code&gt;GraphicElementWrapper&lt;/code&gt;, and the main container &amp;ndash; from &lt;code&gt;ElementWrapper&lt;/code&gt;) or, for example, for the web-application which emulates the windows-based application (here I have extended the draggable elements from &lt;code&gt;GraphicElementWrapper&lt;/code&gt;, but menu, status bar and the worktable &amp;ndash; from &lt;code&gt;ElementWrapper&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Seems that&amp;rsquo;s all for now. Good luck in JS-contruction-deeds :).&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;about this…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;… - &lt;a href=&#34;http://dklab.ru/chicken/nablas/40.html&#34;&gt;in russian, from Dmitry Koteroff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… - &lt;a href=&#34;http://forum.dklab.ru/comments/nablas/40InheritanceInJavascript.html?start=80&amp;amp;sid=fac82f100376bdaceb0f5024b136fb0c&#34;&gt;later their impressions - in russian, from Dmitry Koteroff and his companions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://ajaxpatterns.org/Javascript_Inheritance&#34;&gt;at AjaxPatterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.ajaxpath.com/javascript-inheritance/&#34;&gt;at AJAXPath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.xml.com/pub/a/2006/06/07/object-oriented-javascript.html&#34;&gt;at XML.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.webreference.com/js/column79/&#34;&gt;at WebReference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.codeproject.com/aspnet/JsOOP1.asp&#34;&gt;at The Code Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.javascriptkit.com/javatutors/oopjs.shtml&#34;&gt;at JavaScript Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.devarticles.com/c/a/JavaScript/ObjectOriented-JavaScript-An-Introduction-to-Core-Concepts/&#34;&gt;at DevArticles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… - &lt;a href=&#34;http://chunkysoup.net/advanced/oojavascript1/&#34;&gt;about making gallery based on this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.kevlindev.com/tutorials/javascript/inheritance/index.htm&#34;&gt;shortly, from Kevin Lindsey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://blogs.nitobi.com/dave/?p=166&#34;&gt;shortly, from Dave Johnson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… - &lt;a href=&#34;http://forum.vingrad.ru/index.php?showtopic=120066&amp;amp;view=findpost&amp;amp;p=1215304&#34;&gt;links from Zeroglif (rus)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
        
            <entry>
                <title>16 Practical Solutions for Javascript</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/16-useful-solutions-for-javascript/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/16-useful-solutions-for-javascript/</id>
                <updated>2007-08-12T23:14:00Z</updated>
                
                <summary type="html">Let me present you a set of functions that I keep in separate &lt;code&gt;utils.js&lt;/code&gt; file - they are the most frequent functions I used. They do trying very hard to be compliant with the modern browsers and they are tested in IE6/7, FF2 and Safari 2 and also in a hard complicated web-system. And they are supposed to work in other, not very old, browsers - I&amp;rsquo;ve used browser detection only for exceptional cases. Some of them, surely, are just mixes of something found in the open web (I am pointing to the source everywhere I remember it) and the bigger part is constructed on the base of my own ideas (and colleagues advices) intended to work properly - just because in that variety of scripts the subtleties (which become generics with closer examination :) ) are not taken into account, and to remain legible.</summary>
                <content type="html">&lt;p&gt;Let me present you a set of functions that I keep in separate &lt;code&gt;utils.js&lt;/code&gt; file - they are the most frequent functions I used. They do trying very hard to be compliant with the modern browsers and they are tested in IE6/7, FF2 and Safari 2 and also in a hard complicated web-system. And they are supposed to work in other, not very old, browsers - I&amp;rsquo;ve used browser detection only for exceptional cases. Some of them, surely, are just mixes of something found in the open web (I am pointing to the source everywhere I remember it) and the bigger part is constructed on the base of my own ideas (and colleagues advices) intended to work properly - just because in that variety of scripts the subtleties (which become generics with closer examination :) ) are not taken into account, and to remain legible.&lt;/p&gt;

&lt;p&gt;Functions are grouped in sections, by themes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#oop&#34;&gt;OOP&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;giving a possibility to use (or just emulating) the principles of OOP in JavaScript&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#js-object-model&#34;&gt;JS Object model&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;usage of and extending native JavaScript objects&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#browser-detection&#34;&gt;Browser detection&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;to use in those exceptional cases when it is really-hopeless-required :)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#coordinates-positioning&#34;&gt;Coordinates / Positioning&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;calculation of coordinates and positioning elements - it is a really tricky thing, incidentally&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#dom&#34;&gt;DOM&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;working with Document Object Model&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#ajax&#34;&gt;AJAX&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;helper functions for AJAX &amp;ndash; this detergent used frequently in modern times :)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#logging&#34;&gt;Logging&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;it is really required sometimes :)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (optimising and fixing proposals are welcome)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (all the examples are taken from the working code, but in several places function names and some small functionality is changed offhand. also, the line-wrapping was applied to the code - currently, without checking the resulting code to work. so just when it will be completely checked for its correct work, after these changes, this comment will be removed)&lt;/p&gt;
&lt;h3 id=&#34;oop&#34;&gt;OOP&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-1&#34;&gt;&lt;/a&gt; &lt;em&gt;1.&lt;/em&gt; First block &amp;ndash; is a set of three functions (two of them are empty ones :) ), providing a possibility to use (emulate?) all of three &lt;strong&gt;OOP&lt;/strong&gt; principles in &lt;strong&gt;JavaScript&lt;/strong&gt;. I&amp;rsquo;ve chosen this variant from some of proposed at &lt;a href=&#34;http://www.ajaxpath.com/javascript-inheritance&#34;&gt;AJAXPath&lt;/a&gt; and &lt;a href=&#34;http://ajaxpatterns.org/Javascript_Inheritance&#34;&gt;AJAXPatterns&lt;/a&gt; because of its both lucidity and quick execution time and I&amp;rsquo;ve changed it a bit, to allow the separate properties (key-values that are not defined in class methods but as class object properties) to act as a static constants.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function Class() { }

Class.prototype.construct = function() { };

Class.extend = function(def) {
    var classDef = function() {
        if (arguments[0] !== Class) {
            this.construct.apply(this, arguments);
        }
    };

    var proto = new this(Class);
    var superClass = this.prototype;

    for (var n in def) {
        var item = def[n];
        if (item instanceof Function) item.$ = superClass; else classDef[n] = item;
        proto[n] = item;
    }

    classDef.prototype = proto;

    classDef.extend = this.extend;
    return classDef;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete examples of usage are too huge for this article, so I&amp;rsquo;ll pass them to &lt;a href=&#34;../javascript-oop&#34;&gt;the next article&lt;/a&gt;, and now we&amp;rsquo;ll proceed further. You may notice two simple examples in the points &lt;em&gt;&lt;a href=&#34;#sol-2&#34;&gt;2&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&#34;#sol-5&#34;&gt;5&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&#34;#sol-15&#34;&gt;15&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;sol-2&#34;&gt;&lt;/a&gt; &lt;em&gt;2.&lt;/em&gt; Next function &amp;ndash; a simple but elegant one &amp;ndash; is useful in combination with previous set &amp;ndash; it &lt;strong&gt;creates a function reference for the method&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function createMethodReference(object, methodName) {
    return function () {
        return object[methodName].apply(object, arguments);
    };
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can write something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var ScrollingHandler = Class.extend({

    construct:
        function(elementId) {
            this._elementId = elementId;
            this.assignListener();
        },

    assignListener:
        function() {
            var scrollControlElem = document.getElementById(this._elementId);
            if (scrollControlElem) {
                scrollControlElem.onscroll = createMethodReference(this, &amp;quot;_onElementScroll&amp;quot;);
            }
        },

    _onElementScroll:
        function(ev) {
            ev = ev || window.event;
            alert(&amp;quot;please stop scrolling, I&amp;#x27;ve already got an event: &amp;quot; + ev);
        }
});

var elmScrollHandler = new ScrollHandler(&amp;#x27;SomeElmId&amp;#x27;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can associate the instances of this class with the element-having-the-specified-ID scrolling event and to perform something in this case.&lt;/p&gt;
&lt;h3 id=&#34;js-object-model&#34;&gt;JS Object Model&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-3&#34;&gt;&lt;/a&gt; &lt;em&gt;3.&lt;/em&gt; The following function &lt;strong&gt;clones&lt;/strong&gt; any &lt;strong&gt;object&lt;/strong&gt; including all of its properties:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function cloneObj(objToClone) {
    var clone = [];
    for (i in objToClone) {
        clone[i] = objToClone[i];
    }
    return clone;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The usage is enormously simple:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var clonedObj = cloneObj(objToClone);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-4&#34;&gt;&lt;/a&gt; &lt;em&gt;4.&lt;/em&gt; &lt;strong&gt;Objects converter&lt;/strong&gt;. Next function provides an elegant way to make a conditional constructs like  &lt;code&gt;if (tablet.toLowerCase() in oc([&amp;#39;cialis&amp;#39;,&amp;#39;mevacor&amp;#39;,&amp;#39;zocor&amp;#39;])) { alert(&amp;#39;I will not!&amp;#39;) };&lt;/code&gt; work. The code is borrowed from [here]&lt;a href=&#34;http://snook.ca/archives/javascript/testing_for_a_v/&#34;&gt;http://snook.ca/archives/javascript/testing_for_a_v/&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function oc(a) {
    var o = {};
    for(var i=0;i&amp;lt;a.length;i++) {
        o[a[i]]=&amp;#x27;&amp;#x27;;
    }
    return o;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example is the situation when you first need to test is object exist in some set of single objects, and then, is it exist in pair with another object in another set of object pairs. Let&amp;rsquo;s imagine that we&amp;rsquo;ve organized a party for the people with concrete allowed names, if they are single, and with concrete allowed name pairs, if they are in pair:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function isPersonAllowed(maleName, femaleName) {
    var pairsAllowed = new Array([ &amp;quot;John&amp;quot;, &amp;quot;Yoko&amp;quot; ],
            [ &amp;quot;Bill&amp;quot;,  &amp;quot;Monica&amp;quot; ], [ &amp;quot;Phil&amp;quot;,  &amp;quot;Sue&amp;quot; ],
            [ &amp;quot;Jason&amp;quot;,  &amp;quot;Harrison&amp;quot; ], [ &amp;quot;Adam&amp;quot;,  &amp;quot;Eve&amp;quot; ]);
    var singlesAllowed = new Array(&amp;quot;Michael&amp;quot;, &amp;quot;Pete&amp;quot;, &amp;quot;John&amp;quot;,
            &amp;quot;Dave&amp;quot;, &amp;quot;Matthew&amp;quot;);
    return (femaleName
            ? ([maleName, femaleName] in oc(pairsAllowed))
            : (maleName in oc(singlesAllowed)));
}

alert(isPersonAllowed(&amp;quot;Jack&amp;quot;)); &amp;#x2F;&amp;#x2F; false
alert(isPersonAllowed(&amp;quot;Adam&amp;quot;)); &amp;#x2F;&amp;#x2F; false
alert(isPersonAllowed(&amp;quot;John&amp;quot;)); &amp;#x2F;&amp;#x2F; true
alert(isPersonAllowed(&amp;quot;Phil&amp;quot;,&amp;quot;Marlo&amp;quot;)); &amp;#x2F;&amp;#x2F; false
alert(isPersonAllowed(&amp;quot;Jason&amp;quot;,&amp;quot;Harrison&amp;quot;)); &amp;#x2F;&amp;#x2F; true
alert(isPersonAllowed(&amp;quot;Martin&amp;quot;,&amp;quot;Luther&amp;quot;)); &amp;#x2F;&amp;#x2F; false

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-5&#34;&gt;&lt;/a&gt; &lt;em&gt;5.&lt;/em&gt; A function that allows to create &lt;strong&gt;hash&lt;/strong&gt; seems to be a little bit overhead at first sight: JavaScript objects act almost like hashes, but sometimes you find yourself in need to use some existing variable value as a key &amp;ndash; and here comes the &lt;code&gt;Hash&lt;/code&gt; function (yes, you can also make this function it in your favourite look-how-I-hacked-up-this-feee-js style, but I think my method is a little bit more polite to JS :) &amp;ndash; you can exclude this function from the &amp;lsquo;useful&amp;rsquo; list if you want :) )&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function Hash()
{
    this.length = 0;
    this.items = new Array();
    for (var i = 0; i &amp;lt; arguments.length; i++) {
        this.items[arguments[i][0]] = arguments[i][1];
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To access the elements, just use &lt;code&gt;items&lt;/code&gt; property (may be I need to make &lt;code&gt;keys&lt;/code&gt; property in new version by the way? :) ):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var Game = Class.extend({

    STG_STOP: 0,
    STG_START: 1,
    STG_LOADING: 2,
    STG_MENU: 3,
    STG_PROCESS: 4,

    construct:
        function() { this._stage = Game.STG_LOADING; },

    getStage:
        function() { return this._stage; }

});

var stateMap = new Hash(
            [ Game.STG_START,   &amp;quot;start&amp;quot;    ],
            [ Game.STG_LOADING, &amp;quot;loading&amp;quot;  ],
            [ Game.STG_MENU,    &amp;quot;menu&amp;quot;     ],
            [ Game.STG_PROCESS, &amp;quot;process&amp;quot;  ],
            [ Game.STG_STOP,    &amp;quot;stopping&amp;quot; ]);

var someGame = new Game();
alert(&amp;quot;You are in &amp;quot;+stateMap.items[someGame.getStage()]+&amp;quot; stage!&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-6&#34;&gt;&lt;/a&gt; &lt;em&gt;6.&lt;/em&gt; Three other functions just make some operations easier/lighter: &lt;code&gt;getTime&lt;/code&gt; shortens the access to &lt;strong&gt;current time&lt;/strong&gt; in 11 symbols, &lt;code&gt;getTimeDelta&lt;/code&gt; lets you to find the &lt;strong&gt;time difference in milliseconds&lt;/strong&gt; between the moments of time (or the one passed moment and the current time in the single-parameter-mode), and the last function just extends the &lt;strong&gt;methods of &lt;code&gt;Number&lt;/code&gt;&lt;/strong&gt; object &lt;strong&gt;to get 0 when it&amp;rsquo;s &lt;code&gt;NaN&lt;/code&gt;&lt;/strong&gt; a little bit easier.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function getTime() {
    return new Date().getTime();
}

function getTimeDelta(timeBegin, timeEnd) {
    timeEnd = timeEnd || getTime();
    return timeEnd - timeBegin;
}

Number.prototype.NaN0=function() { return isNaN(this) ? 0 : this; }

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;browser-detection&#34;&gt;Browser detection&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-7&#34;&gt;&lt;/a&gt; &lt;em&gt;7.&lt;/em&gt; A small object, the named properties of it &amp;ndash; are conditions. This is how the readability of &lt;strong&gt;most types of browsers detection&lt;/strong&gt; is achieved here. This object was borrowed by me from the project I&amp;rsquo;ve participated in &amp;ndash; and I found myself that use it frequently, but I think the real authors are somewhere in the web, and the code is not so complicated to pretend on something&amp;hellip; If you don&amp;rsquo;t like the way it works or it not works for your browser, you may use an alternative &lt;a href=&#34;http://www.howtocreate.co.uk/jslibs/htmlhigh/sniffer.html&#34;&gt;from HowToCreate&lt;/a&gt;. And I&amp;rsquo;ll repeat: this way of detection I use &amp;ldquo;_only in the case if concrete bug in concrete browser is known and I need to avoid it&amp;rdquo;. Also, you can use this object as a long line of code to make it work faster (how &amp;ndash; look &lt;a href=&#34;http://www.howtocreate.co.uk/jslibs/htmlhigh/sniffer.html&#34;&gt;here&lt;/a&gt; again)&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var USER_DATA = {

    Browser: {
        KHTML: &amp;#x2F;Konqueror|KHTML&amp;#x2F;.test(navigator.userAgent) &amp;amp;&amp;amp;
                !&amp;#x2F;Apple&amp;#x2F;.test(navigator.userAgent),
        Safari: &amp;#x2F;KHTML&amp;#x2F;.test(navigator.userAgent) &amp;amp;&amp;amp;
                &amp;#x2F;Apple&amp;#x2F;.test(navigator.userAgent),
        Opera: !!window.opera,
        MSIE: !!(window.attachEvent &amp;amp;&amp;amp; !window.opera),
        Gecko: &amp;#x2F;Gecko&amp;#x2F;.test(navigator.userAgent) &amp;amp;&amp;amp;
                !&amp;#x2F;Konqueror|KHTML&amp;#x2F;.test(navigator.userAgent)
    },

    OS: {
        Windows: navigator.platform.indexOf(&amp;quot;Win&amp;quot;) &amp;gt; -1,
        Mac: navigator.platform.indexOf(&amp;quot;Mac&amp;quot;) &amp;gt; -1,
        Linux: navigator.platform.indexOf(&amp;quot;Linux&amp;quot;) &amp;gt; -1
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;coordinates-positioning&#34;&gt;Coordinates / Positioning&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-8&#34;&gt;&lt;/a&gt; &lt;em&gt;8.&lt;/em&gt; The set of functions that allow to get &lt;strong&gt;element coordinates&lt;/strong&gt; on the user screen.&lt;/p&gt;

&lt;p&gt;If your document is static relatively to the window, and there are no scrollbars &amp;ndash; you better use &lt;code&gt;getPosition&lt;/code&gt; function &amp;ndash; this will work faster. If this statement is false for you, use &lt;code&gt;getAlignedPosition&lt;/code&gt; &amp;ndash; it checks the scrollbars positions. Just pay attention: &lt;code&gt;top&lt;/code&gt; or &lt;code&gt;left&lt;/code&gt; attribute of element can be negative, if it is placed outside the window &amp;ndash; to be synchronized with mouse pointer you&amp;rsquo;ll possibly need to reset the height of element to 0. The basic script is take from &lt;a href=&#34;http://blog.firetree.net/2005/07/04/javascript-find-position/&#34;&gt;one blog&lt;/a&gt;, Aligned-version &amp;ndash; is a result of much searches mixed with the information from &lt;a href=&#34;http://xhtml.ru/2007/03/10/advanced-thumbnail-creator/&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;http://www.habrahabr.ru/blog/webdev/13897.html&#34;&gt;articles&lt;/a&gt; (when IE sees &lt;code&gt;DOCTYPE&lt;/code&gt; it goes in its own, a little bit unpredictable, mode). Also this method is combined with getting positions from &lt;a href=&#34;http://www.webreference.com/programming/javascript/mk/column2/Dragging%20and%20Dropping%20in%20JavaScript_files/drag_drop.js&#34;&gt;sources&lt;/a&gt; &lt;a href=&#34;http://www.webreference.com/programming/javascript/mk/column2/&#34;&gt;of Drag’n&amp;#39;Drop tutorial&lt;/a&gt;. Pay attention: the function &lt;code&gt;NaN0&lt;/code&gt; from point &lt;em&gt;&lt;a href=&#34;#sol-6&#34;&gt;6&lt;/a&gt;&lt;/em&gt; is used here, you&amp;rsquo;ll need to add it to the script to make it work correctly :) (thanks, &lt;a href=&#34;http://invisibleman.ru/&#34;&gt;Homer&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function getPosition(e) {
    var left = 0;
    var top  = 0;

    while (e.offsetParent) {
        left += e.offsetLeft + (e.currentStyle ? (parseInt(e.currentStyle.borderLeftWidth)).NaN0() : 0);
        top  += e.offsetTop  + (e.currentStyle ? (parseInt(e.currentStyle.borderTopWidth)).NaN0() : 0);
        e = e.offsetParent;
    }

    left += e.offsetLeft + (e.currentStyle ? (parseInt(e.currentStyle.borderLeftWidth)).NaN0() : 0);
    top  += e.offsetTop  + (e.currentStyle ? (parseInt(e.currentStyle.borderTopWidth)).NaN0(): 0);

    return {x:left, y:top};
}

var IS_IE = USER_DATA[&amp;#x27;Browser&amp;#x27;].MSIE;

function getAlignedPosition(e) {
    var left = 0;
    var top  = 0;

    while (e.offsetParent) {
        left += e.offsetLeft + (e.currentStyle ? (parseInt(e.currentStyle.borderLeftWidth)).NaN0() : 0);
        top  += e.offsetTop  + (e.currentStyle ? (parseInt(e.currentStyle.borderTopWidth)).NaN0() : 0);
        e  = e.offsetParent;
        if (e.scrollLeft) {left -= e.scrollLeft; }
        if (e.scrollTop)  {top  -= e.scrollTop; }
    }

    var docBody = document.documentElement ? document.documentElement : document.body;

    left += e.offsetLeft + (e.currentStyle ?
                (parseInt(e.currentStyle.borderLeftWidth)).NaN0()
                : 0) +
        (IS_IE ? (parseInt(docBody.scrollLeft)).NaN0() : 0) -
        (parseInt(docBody.clientLeft)).NaN0();
    top  += e.offsetTop  + (e.currentStyle ?
                (parseInt(e.currentStyle.borderTopWidth)).NaN0()
                :  0) +
        (IS_IE ? (parseInt(docBody.scrollTop)).NaN0() : 0) -
        (parseInt(docBody.clientTop)).NaN0();

    return {x:left, y:top};
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The times passed, and this two function has merged into one, a little bit simpler one, universal one and correct herewith (but if you getting position of the element that is held inside another scrollable element &amp;ndash; do not forget to add &lt;code&gt;scrollTop&lt;/code&gt; or &lt;code&gt;scrollLeft&lt;/code&gt; coordinated of the last one to the first one: your code will look nicer and more logical if you will use it in concrete place, unlike with aligned-version:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function findPos(e) {
    var baseEl = e;
    var curleft = curtop = 0;
    if (e.offsetParent) {
        do {
            curleft += e.offsetLeft;
            curtop += e.offsetTop;
        } while (e = e.offsetParent);
    }
    var docBody = document.documentElement ? document.documentElement : document.body;
    if (docBody) {
        curleft += (baseEl.currentStyle?(parseInt(baseEl.currentStyle.borderLeftWidth)).NaN0():0) +
                   (IS_IE ? (parseInt(docBody.scrollLeft)).NaN0() : 0) - (parseInt(docBody.clientLeft)).NaN0();
        curtop  += (baseEl.currentStyle?(parseInt(baseEl.currentStyle.borderTopWidth)).NaN0():0) +
                   (IS_IE ? (parseInt(docBody.scrollTop)).NaN0() : 0) - (parseInt(docBody.clientTop)).NaN0();
    }
    return {x: curleft, y:curtop};
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-9&#34;&gt;&lt;/a&gt; &lt;em&gt;9.&lt;/em&gt; Getting current &lt;strong&gt;mouse pointer coordinates&lt;/strong&gt; is relatively easy, if you use the according function (constructed on the base &lt;a href=&#34;http://xhtml.ru/2007/03/10/advanced-thumbnail-creator/&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;http://www.habrahabr.ru/blog/webdev/13897.html&#34;&gt;three&lt;/a&gt; &lt;a href=&#34;http://quirksmode.org/js/events_properties.html&#34;&gt;sources&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function mouseCoords(ev){
    if (ev.pageX || ev.pageY) {
        return {x:ev.pageX, y:ev.pageY};
    }
    var docBody = document.documentElement ? document.documentElement : document.body;

    return {
        x: ev.clientX + docBody.scrollLeft - docBody.clientLeft,
        y: ev.clientY + docBody.scrollTop  - docBody.clientTop
    };
}

function getMouseOffset(target, ev, aligned) {
    ev = ev || window.event;
    if (aligned == null) aligned = false;

    var docPos    = aligned
        ? getAlignedPosition(target)
        : getPosition(target);
    var mousePos  = mouseCoords(ev);

    return {
        x: mousePos.x - docPos.x,
        y: mousePos.y - docPos.y
    };
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The updated version of &lt;code&gt;getMouseOffset&lt;/code&gt; for the variant with single position detection function:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function getMouseOffset(target, ev) {
    ev = ev || window.event;

    var docPos = findPos(target);
    var mousePos = mouseCoords(ev);

    return {
        x: mousePos.x - docPos.x,
        y: mousePos.y - docPos.y
    };
}

&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;The last function can also be used in two modes, using the &lt;code&gt;aligned&lt;/code&gt; parameter and intended for easy usage in events handlers, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function onMouseMove(elm, ev) {
    var mouseOffset = getMouseOffset(elm, ev);
    console.log(&amp;quot;x: %d; y: %d&amp;quot;, mouseOffset.x, mouseOffset.y);
}

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
&amp;lt;div id=&amp;quot;someId&amp;quot; onmousemove=&amp;quot;onMouseMove(this, event);
    return false;&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (if this functions (&lt;em&gt;suddenly&lt;/em&gt; :) ) will not work in some case &amp;ndash; please report &amp;ndash; I want to achieve the maximum of portability)&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;sol-10&#34;&gt;&lt;/a&gt; &lt;em&gt;10.&lt;/em&gt; Evaluating &lt;strong&gt;the height of element&lt;/strong&gt; is a hard task in several cases, harder then getting its other parameters, but this two functions will help:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function findOffsetHeight(e) {
    var res = 0;
    while ((res == 0) &amp;amp;&amp;amp; e.parentNode) {
        e = e.parentNode;
        res = e.offsetHeight;
    }
    return res;
}

function getOffsetHeight(e) {
    return this.element.offsetHeight ||
           this.element.style.pixelHeight ||
           findOffsetHeight(e);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dom&#34;&gt;DOM&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-11&#34;&gt;&lt;/a&gt; &lt;em&gt;11.&lt;/em&gt; Sometimes you need &lt;strong&gt;to walk the DOM tree recursively&lt;/strong&gt;, starting from some element and performing some function with each child, getting to the deepest deeps. There is &lt;code&gt;TreeWalker&lt;/code&gt; object in DOM, but it fails to work in IE and it is not always easy/simple in use. &lt;code&gt;walkTree&lt;/code&gt; function allows to perform some another function with each of child elements and also to pass some data package. &lt;code&gt;searchTree&lt;/code&gt; function differs in that it stops the walk after the first successful result and returns the result to the call point:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function walkTree(node, mapFunction, dataPackage) {
    if (node == null) return;
    mapFunction(node, dataPackage);
    for (var i = 0; i &amp;lt; node.childNodes.length; i++) {
        walkTree(node.childNodes[i], mapFunction, dataPackage);
    }
}

function searchTree(node, searchFunction, dataPackage) {
    if (node == null) return;
    var funcResult = searchFunction(node, dataPackage);
    if (funcResult) return funcResult;
    for (var i = 0; i &amp;lt; node.childNodes.length; i++) {
        var searchResult = searchTree(node.childNodes[i], searchFunction, dataPackage);
        if (searchResult) return searchResult;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The functions &lt;code&gt;setElmAttr&lt;/code&gt; and &lt;code&gt;getElmAttr&lt;/code&gt;, are used in example, I&amp;rsquo;ll present them in &lt;em&gt;&lt;a href=&#34;#sol-13&#34;&gt;13&lt;/a&gt;&lt;/em&gt; point. By fact, they do the same as &lt;code&gt;getAttribute&lt;/code&gt; and &lt;code&gt;setAttribute&lt;/code&gt; do. The used &lt;code&gt;oc&lt;/code&gt; function description is in &lt;em&gt;&lt;a href=&#34;#sol-4&#34;&gt;4&lt;/a&gt;&lt;/em&gt; point. In the first part of example the root element&amp;rsquo;s &amp;ldquo;&lt;code&gt;nodeType&lt;/code&gt;&amp;rdquo; attribute is set to &amp;ldquo;&lt;code&gt;root&lt;/code&gt;&amp;rdquo;, and for all of its children - to &amp;ldquo;&lt;code&gt;child&lt;/code&gt;&amp;rdquo;. In the second part the data package passing is demonstrated &amp;ndash; when we find the first element having the &amp;ldquo;&lt;code&gt;class&lt;/code&gt;&amp;rdquo; attribute equal to one of the names in the package, its &amp;ldquo;&lt;code&gt;isTarget&lt;/code&gt;&amp;rdquo; attribute is set to &amp;ldquo;&lt;code&gt;true&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var rootElement = document.getElementById(&amp;#x27;rootElm&amp;#x27;);

setElmAttr(rootElement, &amp;quot;nodeType&amp;quot;, &amp;quot;root&amp;quot;);
var childNodeFunc = function(node) {
    if (node.nodeName &amp;amp;&amp;amp; (node.nodeName !== &amp;#x27;#text&amp;#x27;)
                      &amp;amp;&amp;amp; (node.nodeName !== &amp;#x27;#comment&amp;#x27;)) {
        setElmAttr(node, &amp;quot;nodeType&amp;quot;, &amp;quot;child&amp;quot;);
    }
}
walkTree(rootElement, childNodeFunc);

var findTargetNode = function(node, classList) {
    if ((node.nodeName &amp;amp;&amp;amp; (node.nodeName !== &amp;#x27;#text&amp;#x27;)
                       &amp;amp;&amp;amp; (node.nodeName !== &amp;#x27;#comment&amp;#x27;)) &amp;amp;&amp;amp;
                       (getElmAttr(node, &amp;quot;class&amp;quot;) in oc(classList))) {
        return node;
    }
}
var targetNode = searchTree(rootElement, findTargetNode,
                    [&amp;#x27;headingClass&amp;#x27;, &amp;#x27;footerClass&amp;#x27;, &amp;#x27;tableClass&amp;#x27;]);
setElmAttr(targetNode, &amp;quot;isTarget&amp;quot;, true);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (be careful with these functions and try to avoid the frequent calls of them (more than one time in a second) even on the easy tree - they can eat a lot of resources. Or at least call them in background using &lt;code&gt;setTimeout&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;sol-12&#34;&gt;&lt;/a&gt; &lt;em&gt;12.&lt;/em&gt; &lt;strong&gt;Removing nodes&lt;/strong&gt; is sometimes the task you need to do. In one cases you need to remove the single node, in other &amp;ndash; only its children.  &lt;code&gt;removeChildrenRecursively&lt;/code&gt; function remove all the children of the specified node excluding itself. &lt;code&gt;removeElementById&lt;/code&gt; removes element by its &lt;code&gt;id&lt;/code&gt; - the task is simple but the way is tricky:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function removeChildrenRecursively(node)
{
    if (!node) return;
    while (node.hasChildNodes()) {
        removeChildrenRecursively(node.firstChild);
        node.removeChild(node.firstChild);
    }
}

function removeElementById(nodeId) {
    document.getElementById(nodeId).parentNode.removeChild(
                            document.getElementById(nodeId));
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-13&#34;&gt;&lt;/a&gt; &lt;em&gt;13.&lt;/em&gt; Seems the elementary task &amp;ndash; working with attributes of the element &amp;ndash; but sometimes you meet the absolutely occasional problems: IE, for example, throws an exception when trying to access &lt;code&gt;table&lt;/code&gt; element width/height attributes, and Safari differs in access to attributes with namespaces. The following function are avoiding all the problems I&amp;rsquo;ve met, without severe damage for the execution speed (for sure, it is better to use the native functions in standard cases):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var IS_SAFARI = USER_DATA[&amp;#x27;Browser&amp;#x27;].Safari;

function getElmAttr(elm, attrName, ns) {
    &amp;#x2F;&amp;#x2F; IE6 fails getAttribute when used on table element
    var elmValue = null;
    try {
        elmValue = (elm.getAttribute
                    ? elm.getAttribute((ns ? (ns + NS_SYMB) : &amp;#x27;&amp;#x27;)
                    + attrName) : null);
    } catch (e) { return null; }
    if (!elmValue &amp;amp;&amp;amp; IS_SAFARI) {
        elmValue = (elm.getAttributeNS
                    ? elm.getAttributeNS(ns, attrName)
                    : null);
    }
    return elmValue;
}

function setElmAttr(elm, attrName, value, ns) {
    if (!IS_SAFARI || !ns) {
        return (elm.setAttribute
                    ? elm.setAttribute((ns ? (ns + NS_SYMB) : &amp;#x27;&amp;#x27;)
                    + attrName, value) : null);
    } else {
        return (elm.setAttributeNS
                    ? elm.setAttributeNS(ns, attrName, value)
                    : null);
    }
}

function remElmAttr(elm, attrName, ns) {
    if (!IS_SAFARI || !ns) {
        return (elm.removeAttribute
                    ? elm.removeAttribute((ns ? (ns + NS_SYMB) : &amp;#x27;&amp;#x27;)
                    + attrName) : null);
    } else {
        return (elm.removeAttributeNS
                    ? elm.removeAttributeNS(ns, attrName)
                    : null);
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ajax&#34;&gt;AJAX&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-14&#34;&gt;&lt;/a&gt; &lt;em&gt;14.&lt;/em&gt; If you need nothing more but just &lt;strong&gt;execute asynchronous call&lt;/strong&gt; and do something and on the basis of data obtained &amp;ndash; this function is for you. The way of getting &lt;code&gt;XMLHttpRequest&lt;/code&gt; object can be replaced, of course. Comments are intentionally left to show the ideas on extending the function:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
&amp;#x2F;* AJAX call *&amp;#x2F;

&amp;#x2F;* locationURL - URL to use *&amp;#x2F;
&amp;#x2F;* parameters - url parameters, null if not required (format: &amp;quot;parameter1=value1&amp;amp;parameter2=value2[...]&amp;quot;) *&amp;#x2F;
&amp;#x2F;* onComplete - listener: function (http_request) or (http_request, package) *&amp;#x2F;
&amp;#x2F;* doPost - (optional) specifies if POST (true) or GET (false&amp;#x2F;null) request required
&amp;#x2F;* package - (optional) some variable or array to tranfer to complete listener, may be not specified *&amp;#x2F;

function makeRequest(locationURL, parameters, onComplete, doPost, dataPackage) {

    var http_request = false;
    try {
        http_request = new ActiveXObject(&amp;quot;Msxml2.XMLHTTP&amp;quot;);
    } catch (e1) {
        try {
            http_request= new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
        } catch (e2) {
            http_request = new XMLHttpRequest();
        }
    }

    &amp;#x2F;&amp;#x2F;if (http_request.overrideMimeType) { &amp;#x2F;&amp;#x2F; optional
    &amp;#x2F;&amp;#x2F;  http_request.overrideMimeType(&amp;#x27;text&amp;#x2F;xml&amp;#x27;);
    &amp;#x2F;&amp;#x2F;}

    if (!http_request) {
      throw new Error(&amp;#x27;Cannot create XMLHTTP instance&amp;#x27;);
      return false;
    }

    var completeListener = function() {
        if (http_request.readyState == 4) {
            if (http_request.status == 200) {
                onComplete(http_request, dataPackage)
            }
        }
    };

    &amp;#x2F;&amp;#x2F;var salt = hex_md5(new Date().toString());
    http_request.onreadystatechange = completeListener;
    if (doPost) {
        http_request.open(&amp;#x27;POST&amp;#x27;, locationURL, true);
        http_request.setRequestHeader(&amp;quot;Content-type&amp;quot;, &amp;quot;application&amp;#x2F;x-www-form-urlencoded&amp;quot;);
        http_request.setRequestHeader(&amp;quot;Content-length&amp;quot;, parameters.length);
        http_request.setRequestHeader(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;);
        http_request.send(parameters);
    } else {
        http_request.open(&amp;#x27;GET&amp;#x27;, locationURL + (parameters ? (&amp;quot;?&amp;quot; + parameters) : &amp;quot;&amp;quot;), true);
        &amp;#x2F;&amp;#x2F;http_request.open(&amp;#x27;GET&amp;#x27;, &amp;#x27;.&amp;#x2F;proxy.php?&amp;#x27; + parameters +
                    &amp;#x2F;&amp;#x2F; &amp;quot;&amp;amp;salt=&amp;quot; + salt, true);
        http_request.send(null);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example of usage &amp;ndash; is from one of my working test task, that searched over the music and/or music database using the string entered in the element with &amp;ldquo;&lt;code&gt;searchStr&lt;/code&gt;&amp;rdquo; &lt;code&gt;id&lt;/code&gt;, using &lt;code&gt;LIKE&lt;/code&gt; in &lt;code&gt;SQL&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function gotSearchResults(http_request, dataPackage) {
    request_result = http_request.responseText;
    var divElement = document.getElementById(dataPackage[&amp;quot;divId&amp;quot;]);
    divElement.innerHTML = request_result;
}

function insertMusicSearchResults(divId) {
    var searchStrElement = document.getElementById(&amp;quot;searchStr&amp;quot;);
    var dataPackage = new Array();
    dataPackage[&amp;quot;divId&amp;quot;] = divId;
    makeRequest(&amp;quot;getAlbums.php&amp;quot;, &amp;quot;searchStr=&amp;quot;
            + searchStrElement.value, gotSearchResults, false,
            dataPackage);
}

function insertVideoSearchResults(divId) {
    var searchStrElement = document.getElementById(&amp;quot;searchStr&amp;quot;);
    var dataPackage = new Array();
    dataPackage[&amp;quot;divId&amp;quot;] = divId;
    makeRequest(&amp;quot;getMovies.php&amp;quot;, &amp;quot;searchStr=&amp;quot;
            + searchStrElement.value, gotSearchResults, false,
            dataPackage);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-15&#34;&gt;&lt;/a&gt; &lt;em&gt;15.&lt;/em&gt; The function presented below is very simple and intended to help in &lt;strong&gt;logging&lt;/strong&gt;. Just add somewhere in the document the &lt;code&gt;&amp;lt;div id=&amp;quot;LOG_DIV&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; element, set the required height for it, and you&amp;rsquo;ll get an information redirected in it, even with scrolling:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function LOG(informerName, text) {
    var logElement = document.getElementById(&amp;#x27;LOG_DIV&amp;#x27;);
    if (logElement) {
        logElement.appendChild(document.createTextNode(
                        informerName + &amp;#x27;: &amp;#x27; + text));
        logElement.appendChild(document.createElement(&amp;#x27;br&amp;#x27;));
        logElement.scrollTop += 50;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-16&#34;&gt;&lt;/a&gt; &lt;em&gt;16.&lt;/em&gt; In the very cool &lt;a href=&#34;http://www.getfirebug.com/&#34;&gt;Firebug&lt;/a&gt; plugin for Firefox there is the very cool &lt;strong&gt;console&lt;/strong&gt;, where you can &lt;a href=&#34;http://www.getfirebug.com/console.html&#34;&gt;place your logs&lt;/a&gt; with much of features. However, if you are debugging the code in other browsers &amp;ndash; calling it will cause errors and even crashes. Not to clear your &lt;code&gt;console.log&lt;/code&gt; calls every time, you can use this stub instead:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var Console = Class.extend({
    &amp;#x2F;&amp;#x2F; the stub class to allow using console when browser have it,
    &amp;#x2F;&amp;#x2F; if not - just pass all calls
    construct: function() {},
    log: function() { },
    info: function() { },
    warn: function() { },
    error: function() { }
});

if (!window.console) {
    console = new Console();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Combining the previous point with CSS can inspire you to write your own console but for another browsers ;). If you&amp;rsquo;ll make it - please share with me :).&lt;/p&gt;
&lt;h3 id=&#34;bonus&#34;&gt;Bonus&lt;/h3&gt;
&lt;p&gt;As a bonus (not to mess with number in the title, pleasantly smelling with binariness :) ) I will tell you about &lt;strong&gt;double click&lt;/strong&gt; problem &amp;ndash; not me who fought with this bug, but my colleagues, the problem is &amp;ndash; when registering &lt;code&gt;ondblclick&lt;/code&gt; event, the &lt;code&gt;onclick&lt;/code&gt; event is called anyway. So, if you really need to handle this (not so obvious for web user, I need to mention) event - you need to have something like this code in the scripts (with the milliseconds count you need and saving an element that was clicked, if required):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
var dblClicked = false;
var dblClickedNode = null;

var DBL_CLICK_MAXTIME = 300;

function dblClick(clickedNode) {
    dblClicked = true;
    dblClickedNode = clickedNode || dblClickedNode;
}

function releaseDblClick() {
    setTimeout(&amp;#x27;dblClicked=false;&amp;#x27;, DBL_CLICK_MAXTIME);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Its usage causes severe conditions. Now in &lt;code&gt;ondblclick&lt;/code&gt; handler you need to call first function at the start and &amp;ndash; when you&amp;rsquo;ve done handling &amp;ndash; the second in the end, and in the &lt;code&gt;onclick&lt;/code&gt; handler you need to ensure that double click was &lt;em&gt;not&lt;/em&gt; performed:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
&amp;lt;div id=&amp;quot;someId&amp;quot; onclick=&amp;quot;if (!dblClicked) alert(&amp;#x27;click&amp;#x27;);&amp;quot;
ondblick=&amp;quot;dblClick(this); alert(&amp;#x27;dblclick&amp;#x27;); releaseDblClick();&amp;quot;;&amp;gt;&amp;lt;&amp;#x2F;div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, for the point  &lt;em&gt;&lt;a href=&#34;#sol-1&#34;&gt;1&lt;/a&gt;&lt;/em&gt; we can add a small function of &lt;strong&gt;getting an instance&lt;/strong&gt; (you can change it to pass arguments in constructor if you wish):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function getInstanceOf(className) {
    return eval(&amp;#x27;new &amp;#x27; + className + &amp;#x27;()&amp;#x27;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;pause&lt;/strong&gt; function will fit the point &lt;em&gt;&lt;a href=&#34;#sol-6&#34;&gt;6&lt;/a&gt;&lt;/em&gt; (the real pause, not what the &lt;code&gt;setTimeout&lt;/code&gt; does):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function pause(millis)
{
    var time = new Date();
    var curTime = null;
    do { curTime = new Date(); }
        while (curTime - time &amp;lt; millis);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; Some more functions for the point &lt;em&gt;&lt;a href=&#34;#sol-6&#34;&gt;6&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Determining of &lt;strong&gt;number occurrence in the range&lt;/strong&gt;, limited by the &lt;code&gt;start&lt;/code&gt; number inclusively and &lt;code&gt;stop&lt;/code&gt; number exclusively:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
Number.prototype.inBounds=function(start,stop){return ((this&amp;gt;=start)&amp;amp;&amp;amp;(this&amp;lt;stop))?true:false;};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Trimming&lt;/strong&gt; starting and ending &lt;strong&gt;whitespace symbols&lt;/strong&gt; from the line:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
String.prototype.trim=function(){var temp = this.replace( &amp;#x2F;^\s+&amp;#x2F;g, &amp;quot;&amp;quot; );return temp.replace( &amp;#x2F;\s+$&amp;#x2F;g, &amp;quot;&amp;quot; );}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Converting&lt;/strong&gt; the object or the string &lt;strong&gt;to &lt;code&gt;boolean&lt;/code&gt; type&lt;/strong&gt;. It can be declared also for a &lt;code&gt;Boolean&lt;/code&gt;-object, just because you may not know the type of passed object:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function boolFromObj(obj){return(((obj==&amp;quot;true&amp;quot;)||(obj == true))?true:false);}

String.prototype.asBoolVal=function(){return ((this==&amp;quot;true&amp;quot;)?true:false);}

Boolean.prototype.asBoolVal=function(){return ((this==true)?true:false);}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Padding with zeroes&lt;/strong&gt; the number until its digits-length with not fit the specified one:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
Number.prototype.getFStr=function(fillNum){var fillNum=fillNum?fillNum:2;var
temp=&amp;quot;&amp;quot;+this;while(temp.length&amp;lt;fillNum)temp=&amp;quot;0&amp;quot;+temp;return temp;}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Along with that, we can add the &lt;strong&gt;sorting&lt;/strong&gt; functions to the &lt;a href=&#34;#js-obj-model&#34;&gt;second part&lt;/a&gt;,&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function intComparator(a, b) {
    return a - b;
}

function getObjSortedProps(obj, sortFunc) {
    var propsArr = [];
    for (propName in obj) {
        propsArr.push(propName);
    }
    return propsArr.sort(sortFunc);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;where the &lt;code&gt;getObjSortedProps&lt;/code&gt; function allows to get the array of sorted (with &lt;code&gt;sortFunc&lt;/code&gt; comparator) names of passed object properties, and &lt;code&gt;intComparator&lt;/code&gt; function can be passed to the arrays &lt;code&gt;sort&lt;/code&gt; function or the very same &lt;code&gt;getObjSortedProps&lt;/code&gt; function, if the required array or object properties names are consist of numeric values&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;and two function to &lt;strong&gt;ease the work with arrays&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
function indexOf(arr, elem) {
    for (itemIdx in arr) {
        if (arr[itemIdx] == elem) return itemIdx;
    }
    return null;
}

function removeFromArray(arr, element) { &amp;#x2F;&amp;#x2F; removes only one item!
    for (itemIndex in arr) {
        if (arr[itemIndex] == element) {
            arr.splice(itemIndex, 1);
            return arr;
        }
    }
    return null;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;indexOf&lt;/code&gt; return the index of the specified element in array, and &lt;code&gt;removeFromArray&lt;/code&gt; removes the specified element from array.&lt;/p&gt;
&lt;h3 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s all, seems, for now. The article is ready for corrections (if they will appear :) ), I can pass to the next ones :). In the &lt;a href=&#34;./javascript-oop&#34;&gt;next-article&lt;/a&gt; I want to tell about OOP in JavaScript and make a few simple but useful examples of classes. I hope this article saved some of your man-hours that you may potentially had spent in the fighting with variable browsers quirks.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Occasional Textpattern Bug</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/occasional-textpattern-bug/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/occasional-textpattern-bug/</id>
                <updated>2007-07-23T23:14:00Z</updated>
                
                <summary type="html">While I&amp;rsquo;ve played with &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt; at &lt;a href=&#34;http://sharedcode.info/&#34;&gt;sharecode&lt;/a&gt;, I faced this issue that may come in touch with those who uses &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt;.</summary>
                <content type="html">&lt;p&gt;While I&amp;rsquo;ve played with &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt; at &lt;a href=&#34;http://sharedcode.info/&#34;&gt;sharecode&lt;/a&gt;, I faced this issue that may come in touch with those who uses &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was frightened with the fact that commenting support in articles which were written too long ago was expired. I&amp;rsquo;ve searched over all of the preferences - nothing about this - but it is almost obvious that it must be. The good thing is that I&amp;rsquo;ve googled and found the &lt;a href=&#34;http://hari.literaryforums.org/2007/04/22/textpattern-review/&#34;&gt;post&lt;/a&gt;, and through its comments I&amp;rsquo;ve reached the &lt;a href=&#34;http://textpattern.com/faq/257/comment-preferences-are-missing&#34;&gt;FAQ article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The mean is if in your &lt;em&gt;Admin&lt;/em&gt; -&amp;gt; &lt;em&gt;Preferences&lt;/em&gt; -&amp;gt; &lt;em&gt;Basic&lt;/em&gt; page for &lt;em&gt;Comments&lt;/em&gt; section you see only two points (and you have 4.0.4 version and no wish/ossibility to update currently) – this article is for you.&lt;/p&gt;

&lt;p&gt;You need to do just two actions. First - take &lt;code&gt;./textpattern/include/txp_prefs.php&lt;/code&gt; file from your hosting, find a 89 line:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;php&#34;&gt;
$evt_list = safe_column(&amp;#x27;event&amp;#x27;, &amp;#x27;txp_prefs&amp;#x27;,
     &amp;quot;type = 0 and prefs_id = 1 group by &amp;#x27;event&amp;#x27; order by event desc&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and to delete the quotes wrapping &lt;code&gt;event&lt;/code&gt; to make it match with &lt;a href=&#34;http://dev.textpattern.com/browser/development/4.0/textpattern/include/txp_prefs.php?rev=2156#L89&#34;&gt;this variant&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;php&#34;&gt;
$evt_list = safe_column(&amp;#x27;event&amp;#x27;, &amp;#x27;txp_prefs&amp;#x27;,
     &amp;quot;type = 0 and prefs_id = 1 group by event order by event desc&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;second &amp;ndash; redeploy the file back. Finita la comedia &amp;ndash; you&amp;rsquo;re welcome in preferences,  &lt;em&gt;Comments:Disabled after&lt;/em&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Eric IDE 4.0.1 in Ubuntu 7.04</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/eric-ide-ubuntu/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/eric-ide-ubuntu/</id>
                <updated>2007-07-22T23:14:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;Eric&lt;/a&gt; – is very good IDE for &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;. And &lt;a href=&#34;http://www.die-offenbachs.de/eric/eric-news.html&#34;&gt;just yesterday&lt;/a&gt; the new &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=119070&amp;amp;package_id=233329&#34;&gt;4.0.1&lt;/a&gt; version was released, but in repositories the last version for the moment is 3.9, and I found myself missing those good old times when I&amp;rsquo;ve compiled packages form sources recently. So I am presenting you a listing of things to be done just in case, to prevent you from meeting the errors that visited me through the process of compilation. Something from this stuff is oriented on new versions :). Just because it was installed on clean Ubuntu - everything must be adequate&amp;hellip; If I missed something, please report.</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;Eric&lt;/a&gt; – is very good IDE for &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;. And &lt;a href=&#34;http://www.die-offenbachs.de/eric/eric-news.html&#34;&gt;just yesterday&lt;/a&gt; the new &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=119070&amp;amp;package_id=233329&#34;&gt;4.0.1&lt;/a&gt; version was released, but in repositories the last version for the moment is 3.9, and I found myself missing those good old times when I&amp;rsquo;ve compiled packages form sources recently. So I am presenting you a listing of things to be done just in case, to prevent you from meeting the errors that visited me through the process of compilation. Something from this stuff is oriented on new versions :). Just because it was installed on clean Ubuntu - everything must be adequate&amp;hellip; If I missed something, please report.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is used:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;eric&lt;/a&gt; 4.0.0.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; 2.5.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trolltech.com/products/qt&#34;&gt;Qt&lt;/a&gt; 4.2.3 + &lt;a href=&#34;http://www.riverbankcomputing.co.uk/pyqt/index.php&#34;&gt;PyQt&lt;/a&gt; v4.1 + &lt;a href=&#34;http://www.riverbankcomputing.co.uk/qscintilla/index.php&#34;&gt;QScintilla&lt;/a&gt; 2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.riverbankcomputing.co.uk/sip/index.php&#34;&gt;SIP&lt;/a&gt; 4.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34;&gt;G++&lt;/a&gt; 3.4 (I almost sure you may take the latest one)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so, let&amp;rsquo;s go into some catalogue for compilation and start:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~&amp;#x2F;distr-temp&amp;#x2F;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;using &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=119070&amp;amp;package_id=233329&#34;&gt;sources&lt;/a&gt; from sourceforge:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http:&amp;#x2F;&amp;#x2F;mesh.dl.sourceforge.net&amp;#x2F;sourceforge&amp;#x2F;eric-ide&amp;#x2F;eric4-4.0.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we will install different libraries for &lt;a href=&#34;http://www.riverbankcomputing.co.uk/pyqt/index.php&#34;&gt;PyQt&lt;/a&gt; (depending of &lt;code&gt;apt-get&lt;/code&gt; settings you may need an install CD):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python2.5-dev
$ sudo apt-get install python-qt4
$ sudo apt-get install libqt4-dev
$ sudo apt-get install python-qt4-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then we&amp;rsquo;ll install &lt;code&gt;g++&lt;/code&gt; compiler and make a &lt;code&gt;/usr/bin/g++&lt;/code&gt; link:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install g++-3.4
$ sudo ln -s &amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;g++-3.4 &amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;g++
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then download and install the last current version of  &lt;a href=&#34;http://www.riverbankcomputing.co.uk/sip/index.php&#34;&gt;SIP&lt;/a&gt; – it allows the libraries written C[++] to act themselves as &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http:&amp;#x2F;&amp;#x2F;www.riverbankcomputing.com&amp;#x2F;Downloads&amp;#x2F;sip4&amp;#x2F;sip-4.6.tar.gz
$ tar -xvzf .&amp;#x2F;sip-4.6.tar.gz
$ cd .&amp;#x2F;sip-4.6.tar.gz
$ python .&amp;#x2F;configure.py
$ make
$ sudo make install
$ cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then download and install the last current version of &lt;a href=&#34;http://www.riverbankcomputing.co.uk/qscintilla/index.php&#34;&gt;QScintilla&lt;/a&gt; – Qt-port for source code editor component (version is for Qt4):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http:&amp;#x2F;&amp;#x2F;www.riverbankcomputing.com&amp;#x2F;Downloads&amp;#x2F; \
  Snapshots&amp;#x2F;QScintilla2&amp;#x2F;QScintilla-gpl-2-snapshot-20070709.tar.gz
$ tar -xvzf .&amp;#x2F;QScintilla-gpl-2-snapshot-20070709.tar.gz
$ cd .&amp;#x2F;QScintilla-gpl-2-snapshot-20070709&amp;#x2F;Qt4
$ qmake qscintilla.pro
$ sudo make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we need to install bindings of &lt;a href=&#34;http://www.riverbankcomputing.co.uk/qscintilla/index.php&#34;&gt;QScintilla&lt;/a&gt; for &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; – they are placed in &lt;code&gt;Python&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..&amp;#x2F;Python
$ python .&amp;#x2F;configure.py
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally the &lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;eric&lt;/a&gt;&amp;rsquo;s turn:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..&amp;#x2F;..&amp;#x2F;eric4-4.0.1&amp;#x2F;
$ sudo python install.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when installing, you need to specify the directory where Qt lies: &lt;code&gt;/usr/share/qt4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, actually that&amp;rsquo;s all. You can type &lt;code&gt;eric4&lt;/code&gt; and make fun, if you want :).&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>SATA, DMA and Ubuntu strange things</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/sata-dma-ubuntu/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/sata-dma-ubuntu/</id>
                <updated>2007-01-24T23:14:00Z</updated>
                
                <summary type="html">Today we&amp;rsquo;ve made an installation of &lt;a href=&#34;http://ubuntuguide.org/wiki/Ubuntu:Edgy&#34;&gt;Ubuntu 6.06 LTS&lt;/a&gt; to &lt;code&gt;SATA&lt;/code&gt; hard drive. And it have failed in angriness, so strange. &lt;code&gt;Live CD&lt;/code&gt; tried to mount this HD eventually long and finally mounted it, seems, but in the end, while running the kernel, it started spitting out with &lt;code&gt;buffer I/O Read Error&lt;/code&gt; and so on.</summary>
                <content type="html">&lt;p&gt;Today we&amp;rsquo;ve made an installation of &lt;a href=&#34;http://ubuntuguide.org/wiki/Ubuntu:Edgy&#34;&gt;Ubuntu 6.06 LTS&lt;/a&gt; to &lt;code&gt;SATA&lt;/code&gt; hard drive. And it have failed in angriness, so strange. &lt;code&gt;Live CD&lt;/code&gt; tried to mount this HD eventually long and finally mounted it, seems, but in the end, while running the kernel, it started spitting out with &lt;code&gt;buffer I/O Read Error&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;The decision was found when I&amp;rsquo;ve combined the advices from two forums:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;BIOS&lt;/code&gt;, the &lt;em&gt;way of working with &lt;code&gt;SATA&lt;/code&gt;&lt;/em&gt; I&amp;rsquo;ve set to &lt;code&gt;Enhanced&lt;/code&gt; (it is something messed with &lt;code&gt;SATA&lt;/code&gt;/&lt;code&gt;PATA&lt;/code&gt;, and try to play with channels if something will go wrong; at the worst, if you have two &lt;code&gt;SATA&lt;/code&gt;-harddrives, disable one for a try)&lt;/p&gt;

&lt;p&gt;And then in the boot screen of &lt;code&gt;Live CD&lt;/code&gt; I&amp;rsquo;ve pressed &lt;code&gt;Escape&lt;/code&gt; button (that switches to text mode) and typed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boot: live pci ide=nodma ide=reverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(without taking into account the fact that I&amp;rsquo;ve tried a lot of different commands)&lt;/p&gt;

&lt;p&gt;Now Ubuntu works as a cute one. Except&amp;hellip;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>PHP + AJAX = SACK</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/php-ajax-sack/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/php-ajax-sack/</id>
                <updated>2006-12-22T23:14:00Z</updated>
                
                <summary type="html">Occasionally, I&amp;rsquo;ve got a task to&amp;hellip; But I was too lazy to write my own function, to check the browser and blah-blah-blah (the more, as I remember, there are more progressive methods exist already :) ) &amp;hellip; Tried to attach &lt;a href=&#34;http://dklab.ru/lib/JsHttpRequest/&#34;&gt;JsHttpRequest from dklab.ru&lt;/a&gt;, but &amp;rsquo;ve got different tricky errors and everything from Mr. D. Koteroff is a little bit misty for me :), &amp;lsquo;cause I am not a prof in &lt;code&gt;PHP&lt;/code&gt; still. So I&amp;rsquo;ve taken &lt;a href=&#34;http://www.twilightuniverse.com/projects/sack/&#34;&gt;another sack&lt;/a&gt;, named  &lt;code&gt;SACK&lt;/code&gt; &amp;ndash; Simple AJAX Code-Kit. And in this sack everything is so simple and trivial for real &amp;ndash; I haven&amp;rsquo;t needed anything more.</summary>
                <content type="html">&lt;p&gt;Occasionally, I&amp;rsquo;ve got a task to&amp;hellip; But I was too lazy to write my own function, to check the browser and blah-blah-blah (the more, as I remember, there are more progressive methods exist already :) ) &amp;hellip; Tried to attach &lt;a href=&#34;http://dklab.ru/lib/JsHttpRequest/&#34;&gt;JsHttpRequest from dklab.ru&lt;/a&gt;, but &amp;rsquo;ve got different tricky errors and everything from Mr. D. Koteroff is a little bit misty for me :), &amp;lsquo;cause I am not a prof in &lt;code&gt;PHP&lt;/code&gt; still. So I&amp;rsquo;ve taken &lt;a href=&#34;http://www.twilightuniverse.com/projects/sack/&#34;&gt;another sack&lt;/a&gt;, named  &lt;code&gt;SACK&lt;/code&gt; &amp;ndash; Simple AJAX Code-Kit. And in this sack everything is so simple and trivial for real &amp;ndash; I haven&amp;rsquo;t needed anything more.&lt;/p&gt;

&lt;p&gt;I was making a primitive form to pop out above the hyperlink, to ask a question and to write it in DB, while not refreshing the page (it is strange, bit it was &lt;em&gt;not mine&lt;/em&gt; crazy decision).&lt;/p&gt;

&lt;p&gt;No beauties and OOP-scripts, because it was required something written on the knee (but nothing prevents you from beautiful usage of this p&amp;hellip; sackage).&lt;/p&gt;

&lt;p&gt;The single mine bug is in &lt;code&gt;auto-suggestion&lt;/code&gt; in Firefox that pops down when the content of the fields starts to repeat (if you&amp;rsquo;ve asked one question, you&amp;rsquo;ll never notice it). But I surely remember that there is an option to turn it off, seems through &lt;code&gt;meta&lt;/code&gt;-tags&lt;/p&gt;

&lt;p&gt;To use it we need &lt;em&gt;just a single file&lt;/em&gt; &lt;a href=&#34;http://www.twilightuniverse.com/downloads/sack/tw-sack.zip&#34;&gt;from sackage&lt;/a&gt;: &lt;code&gt;tw-sack.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll show you the result and will give a description on hard moments (if they are exist, everything seems transparent :) ) :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTML&lt;/code&gt;-page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(to make highlighting correct I&amp;rsquo;ve splitted the code in five blocks, they just go one by one, following each other: if you just select them all and copy - everything will work ok)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-&amp;#x2F;&amp;#x2F;W3C&amp;#x2F;&amp;#x2F;DTD XHTML 1.0 Transitional&amp;#x2F;&amp;#x2F;EN&amp;quot;
                      &amp;quot;http:&amp;#x2F;&amp;#x2F;www.w3.org&amp;#x2F;TR&amp;#x2F;xhtml1&amp;#x2F;DTD&amp;#x2F;xhtml1-transitional.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http:&amp;#x2F;&amp;#x2F;www.w3.org&amp;#x2F;1999&amp;#x2F;xhtml&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text&amp;#x2F;html; charset=utf-8&amp;quot; &amp;#x2F;&amp;gt;
    &amp;lt;title&amp;gt;Blah&amp;lt;&amp;#x2F;title&amp;gt;

    &amp;lt;style type=&amp;quot;text&amp;#x2F;css&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-lang=&#34;css&#34;&gt;
        &amp;#x2F;**&amp;#x2F;.invisible {
            display: none;
        }

        .visible {
            display: block;
        }

        body {
            margin: 25px;
            font-size: 16px;
            font-family: Times New Roman, Georgia, serif;
        }

        div#question-box {
            position: absolute;
            left: 5%;
            margin-top: 5px;
            width: 300px;
            height: 245px;
            border: 1px solid #000;
            background-color: #ffc;
            font-family: Tahoma, Arial, Helvetica, sans-serif;
        }

        div#question-box label {
            font-size: 11px;
        }

        div#question-box span#qbox-label {
            display: block;
            position: relative;
            top: 0;
            left: 0;
            height: 10px;
            padding: 5px;
            font-size: 11px;
            font-weight: bold;
            text-align: center;
            background-color: #ff9;
        }

        div#question-box form {
            padding: 5px 15px;
        }

        form#question-form * {
            color: #333;
            display: block;
            width: 98%;
        }

        form#question-form input,
        form#question-form textarea {
            margin: 3px 0;
            border: 1px solid #333;
        }

        form#question-form input[type=&amp;quot;button&amp;quot;] {
            margin-top: 10px;
        }

        form label {
            font-weight: bold;
        }

        div#status-box span.message,
        div#status-box span.error,
        div#status-box span.warning {
            display: block;
            width: 100%;
            font-weight: bold;
            padding: 5px;
        }

        span.message {
            color: #fff;
        }

        span.error {
            background-color: #f00;
            color: #fff;
        }

        span.warning {
            color: #660;
        }

        form textarea[name=&amp;quot;question&amp;quot;] {
            height: 60px;
        }

        div#question-box div#status-box {
            display: block;
            width: 100%;
            height: 20px;
            background-color: #003;
            font-size: 11px;
            color: #fff;
            padding: 0;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
    &amp;lt;&amp;#x2F;style&amp;gt;

    &amp;lt;script type=&amp;quot;text&amp;#x2F;javascript&amp;quot; src=&amp;quot;.&amp;#x2F;scripts&amp;#x2F;tw-sack.js&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;script&amp;gt;
    &amp;lt;script language=&amp;quot;JavaScript&amp;quot; type=&amp;quot;text&amp;#x2F;javascript&amp;quot;&amp;gt;
    &amp;lt;!--

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-lang=&#34;javascript&#34;&gt;
        function showElement(elementId) {
            element = document.getElementById(elementId);
            element.className = &amp;#x27;visible&amp;#x27;;
                &amp;#x2F;&amp;#x2F; element.style.display = &amp;#x27;block&amp;#x27;;
        }

        function hideElement(elementId) {
            element = document.getElementById(elementId);
            element.className = &amp;#x27;invisible&amp;#x27;;
                &amp;#x2F;&amp;#x2F; element.style.display = &amp;#x27;none&amp;#x27;;
        }

        function clearFormFields() {
            &amp;#x2F;&amp;#x2F; optimize for any form then....
            var form = document.getElementById(&amp;#x27;question-form&amp;#x27;);
            form.heading.value = &amp;#x27;&amp;#x27;;
            form.sender.value = &amp;#x27;&amp;#x27;;
            form.question.value = &amp;#x27;&amp;#x27;;
        };

        var ajax = new sack();

        function whenLoading(){
            var e = document.getElementById(&amp;#x27;status-box&amp;#x27;);
            e.innerHTML = &amp;quot;Sending data...&amp;quot;;
        }

        function whenLoaded(){
            var e = document.getElementById(&amp;#x27;status-box&amp;#x27;);
            e.innerHTML = &amp;quot;Data sent...&amp;quot;;
        }

        function whenInteractive(){
            var e = document.getElementById(&amp;#x27;status-box&amp;#x27;);
            e.innerHTML = &amp;quot;Getting data...&amp;quot;;
        }

        function whenCompleted(){
        }

        function sendQuestion(){
            var form = document.getElementById(&amp;#x27;question-form&amp;#x27;);
            ajax.setVar(&amp;quot;heading&amp;quot;, form.heading.value);
                &amp;#x2F;&amp;#x2F; recomended method of setting data to be parsed.
            ajax.setVar(&amp;quot;sender&amp;quot;, form.sender.value);
            ajax.setVar(&amp;quot;question&amp;quot;, form.question.value);
            ajax.requestFile = &amp;quot;q.php&amp;quot;;
            ajax.method = &amp;#x27;POST&amp;#x27;;
            ajax.element = &amp;#x27;status-box&amp;#x27;;
            ajax.onLoading = whenLoading;
            ajax.onLoaded = whenLoaded;
            ajax.onInteractive = whenInteractive;
            ajax.onCompletion = whenCompleted;
            ajax.runAJAX();
        }

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
     &amp;#x2F;&amp;#x2F;--&amp;gt;
 &amp;lt;&amp;#x2F;script&amp;gt;
&amp;lt;&amp;#x2F;head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;.&amp;#x2F;q.php&amp;quot; onmouseover=&amp;quot;showElement(&amp;#x27;question-box&amp;#x27;);&amp;quot;&amp;gt;
             отправить вопрос&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
 &amp;lt;div id=&amp;quot;question-box&amp;quot; class=&amp;quot;invisible&amp;quot;
             onmouseover=&amp;quot;showElement(&amp;#x27;question-box&amp;#x27;);&amp;quot;
             onmouseout=&amp;quot;hideElement(&amp;#x27;question-box&amp;#x27;);&amp;quot;&amp;gt;
     &amp;lt;span id=&amp;quot;qbox-label&amp;quot;&amp;gt;Your question: &amp;lt;&amp;#x2F;span&amp;gt;
     &amp;lt;div id=&amp;quot;status-box&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;div&amp;gt;
     &amp;lt;form id=&amp;quot;question-form&amp;quot; name=&amp;quot;question-form&amp;quot;
                     method=&amp;quot;post&amp;quot; action=&amp;quot;.&amp;#x2F;q.php&amp;quot;&amp;gt;
         &amp;lt;label for=&amp;quot;heading&amp;quot;&amp;gt;Title:&amp;lt;&amp;#x2F;label&amp;gt;
             &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;heading&amp;quot; id=&amp;quot;q-heading&amp;quot;
                                         maxlength=&amp;quot;80&amp;quot; &amp;#x2F;&amp;gt;
         &amp;lt;label for=&amp;quot;sender&amp;quot;&amp;gt;Sender (e-mail) (*):&amp;lt;&amp;#x2F;label&amp;gt;
             &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;sender&amp;quot; id=&amp;quot;q-sender&amp;quot;
                                         maxlength=&amp;quot;60&amp;quot; &amp;#x2F;&amp;gt;
         &amp;lt;label for=&amp;quot;question&amp;quot;&amp;gt;Question (255 chars):&amp;lt;&amp;#x2F;label&amp;gt;
             &amp;lt;textarea name=&amp;quot;question&amp;quot; rows=&amp;quot;5&amp;quot; cols=&amp;quot;25&amp;quot;
                     id=&amp;quot;q-body&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;textarea&amp;gt;
         &amp;lt;input type=&amp;quot;button&amp;quot; name=&amp;quot;post_question&amp;quot; value=&amp;quot;Ask&amp;quot;
             onclick=&amp;quot;sendQuestion(); clearFormFields();
                     return false;&amp;quot;
             ondblclick=&amp;quot;sendQuestion(); return false;&amp;quot; &amp;#x2F;&amp;gt;
     &amp;lt;&amp;#x2F;form&amp;gt;
 &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;body&amp;gt;
&amp;lt;&amp;#x2F;html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the receiving script - &lt;code&gt;q.php&lt;/code&gt; (&lt;em&gt;pay attention&lt;/em&gt; - it is in &lt;code&gt;utf-8&lt;/code&gt;, to conform with the page in encoding):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;php&#34;&gt;
&amp;lt;?php
ob_start();
print_r($_POST);
$postdata = ob_get_clean();

$heading = substr($_POST[&amp;#x27;heading&amp;#x27;], 0, 80);
$sender = substr($_POST[&amp;#x27;sender&amp;#x27;], 0, 60);
$question = substr($_POST[&amp;#x27;question&amp;#x27;], 0, 255);

if (isset($question) &amp;amp;&amp;amp; (&amp;#x27;&amp;#x27; != $question)) {
    if (isset($sender) &amp;amp;&amp;amp; (&amp;#x27;&amp;#x27; != $sender)) {

        &amp;#x2F;* connect to DB *&amp;#x2F;

        $conn = mysql_connect(&amp;quot;localhost&amp;quot;, &amp;quot;****&amp;quot;,&amp;quot;*******&amp;quot;)
                or die(&amp;quot;Could not connect&amp;quot;);
        if( !$conn ) die( mysql_error() );

        mysql_select_db(&amp;quot;*****&amp;quot;) and
            mysql_query(&amp;quot;set names utf8&amp;quot;) and
            mysql_query(&amp;quot;SET collation_connection = &amp;#x27;utf8_general_ci&amp;#x27;&amp;quot;);

        &amp;#x2F;* insert question *&amp;#x2F;

        $sql = &amp;quot;INSERT INTO questions SET
                    heading=&amp;#x27;&amp;quot;.mysql_escape_string($heading).&amp;quot;&amp;#x27;,
                    sender=&amp;#x27;&amp;quot;.mysql_escape_string($sender).&amp;quot;&amp;#x27;,
                    question=&amp;#x27;&amp;quot;.mysql_escape_string($question).&amp;quot;&amp;#x27;,
                    post_date=SYSDATE()&amp;quot;;
        $result = mysql_query($sql);

        if (!$result) $responce_str = &amp;quot;&amp;lt;span class=&amp;#x27;error&amp;#x27;&amp;gt;Failed to add
            your question to database&amp;lt;&amp;#x2F;span&amp;gt;&amp;quot;;
        else $responce_str = &amp;quot;&amp;lt;span class=&amp;#x27;message&amp;#x27;&amp;gt;Your question is
            sent!&amp;lt;&amp;#x2F;span&amp;gt;&amp;quot;;

        mysql_close($conn);

    } else {
        $responce_str = &amp;quot;&amp;lt;span class=&amp;#x27;warning&amp;#x27;&amp;gt;Sender`s e-mail
                is required&amp;lt;&amp;#x2F;span&amp;gt;&amp;quot;;
    }
} else {
    $responce_str = &amp;quot;&amp;lt;span class=&amp;#x27;warning&amp;#x27;&amp;gt;Please,
                        specify your question&amp;lt;&amp;#x2F;span&amp;gt;&amp;quot;;
}

echo $responce_str;
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is even &lt;code&gt;CSS&lt;/code&gt; is a greatest part of the &lt;code&gt;HTML&lt;/code&gt;-page :).&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;JavaScript&lt;/code&gt;, after the &lt;code&gt;var ajax = new sack();&lt;/code&gt; line, the &lt;code&gt;Sack&lt;/code&gt;-related code goes on. Some event-hadling functions and a small trivial function that collects the data. In &lt;code&gt;PHP&lt;/code&gt; there is nothing of &lt;code&gt;SACK&lt;/code&gt;. Just an usual getting-values-from-&lt;code&gt;$_POST&lt;/code&gt; (as you set it, of course). That&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;I think - that is great.&lt;/p&gt;

&lt;p&gt;Dunno about arrays in &lt;code&gt;SACK&lt;/code&gt;, but if you&amp;rsquo;ll watch the demo that exist in the sackage - this problem is also perfectly solved.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>PHP and UTF-8 (Unicode) - A funny thing for a half of a day</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/php-mysql-unicode/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/php-mysql-unicode/</id>
                <updated>2006-12-22T23:14:00Z</updated>
                
                <summary type="html">It is &lt;a href=&#34;http://live.julik.nl/2005/03/unicode-php&#34;&gt;not the advice of mine&lt;/a&gt;, but it helped me enormously.</summary>
                <content type="html">&lt;p&gt;It is &lt;a href=&#34;http://live.julik.nl/2005/03/unicode-php&#34;&gt;not the advice of mine&lt;/a&gt;, but it helped me enormously.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve to accomplish the state when all of my pages are in &lt;code&gt;UTF-8&lt;/code&gt; encoding, but the DB is also OK.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what helped me - combining this advice with one line in &lt;code&gt;PHP&lt;/code&gt; code while connecting to the DB&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt; + &lt;code&gt;Apache&lt;/code&gt; + &lt;code&gt;PHP&lt;/code&gt; + &lt;code&gt;mb_string&lt;/code&gt; :)&lt;/p&gt;

&lt;p&gt;In mysql, following to &lt;code&gt;PHPMyAdmin&lt;/code&gt; everything was set to &lt;code&gt;utf-8&lt;/code&gt;. But I had to correct this line in database connection line:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;php&#34;&gt;
mysql_select_db(&amp;quot;****&amp;quot;) and mysql_query(&amp;quot;set names utf8&amp;quot;) and
mysql_query(&amp;quot;SET collation_connection = &amp;#x27;utf8_general_ci&amp;#x27;&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I&amp;rsquo;ve added inside all &lt;code&gt;.htaccess&lt;/code&gt; files of all &lt;code&gt;html&lt;/code&gt;/&lt;code&gt;php&lt;/code&gt; folders (why I am doing these strange things - &lt;a href=&#34;http://live.julik.nl/2005/03/unicode-php&#34;&gt;in that advise&lt;/a&gt;) the next lines:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;apache&#34;&gt;
# unicode support
AddDefaultCharset utf-8
&amp;lt;IfModule mod_charset.c&amp;gt;
   CharsetDisable on
   CharsetRecodeMultipartForms Off
&amp;lt;&amp;#x2F;IfModule&amp;gt;

php_value       mbstring.func_overload  7
php_value       default_charset         UTF-8
php_value       mbstring.language       Russian

php_value       mbstring.internal_encoding      UTF-8
php_flag        mbstring.encoding_translation   on
php_value       mbstring.http_input     &amp;quot;UTF-8,KOI8-R,CP1251&amp;quot;
php_value       mbstring.http_output    UTF-8
php_value       mbstring.detect_order   &amp;quot;UTF-8,KOI8-R,CP1251&amp;quot;
# end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, of course, I&amp;rsquo;ve re-encoded all my pages and &lt;code&gt;php&lt;/code&gt;-files in &lt;code&gt;UTF-8&lt;/code&gt; (used &lt;a href=&#34;http://www.pspad.com/&#34;&gt;PSPad&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;And in &lt;code&gt;HTML&lt;/code&gt;-pages I&amp;rsquo;ve added this, just be on the safe side:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text&amp;#x2F;html; charset=utf-8&amp;quot; &amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;head&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And everything started to work great and in &lt;code&gt;UTF-8&lt;/code&gt;! (this method was used in next post)&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>JSP Custom Tags</title>
                <link rel="alternate" href="http://shamansir.github.io/blog/articles/jsp-custom-tags/" type="text/html" />
                <id>http://shamansir.github.io/blog/articles/jsp-custom-tags/</id>
                <updated>2006-05-15T23:14:00Z</updated>
                
                <summary type="html">Let the first post will be about custom-tags for &lt;a href=&#34;http://java.sun.com/products/jsp/&#34;&gt;JSP&lt;/a&gt;, for example (and Java Server Faces, I think, will also follows these rules). There is a lot of information about them, but I&amp;rsquo;ve wanted to introduce you my sight and also to start from something relatively easy, though.</summary>
                <content type="html">&lt;p&gt;Let the first post will be about custom-tags for &lt;a href=&#34;http://java.sun.com/products/jsp/&#34;&gt;JSP&lt;/a&gt;, for example (and Java Server Faces, I think, will also follows these rules). There is a lot of information about them, but I&amp;rsquo;ve wanted to introduce you my sight and also to start from something relatively easy, though.&lt;/p&gt;

&lt;p&gt;As an example, I&amp;rsquo;ll show you a little bit tricky tag, but kindly demonstrating the possibilities of tags-fabrication.&lt;/p&gt;

&lt;p&gt;The task is to integrate in JSP code an option to change style of the text wrapped with this tag, depending on passed value. A demonstrative example is rendering a table of tasks having different priorities, low ones - with italic text, high ones - with bold and doing no changes to style of the tasks with normal priority. Also, it was required to have possibility to pass CSS-style to text, that&amp;rsquo;s why the specification of the tag is event larger than its realization in result :).&lt;/p&gt;

&lt;p&gt;Ok, let&amp;rsquo;s take a decision what properties this tag must own. Obviously, it must have body, containing the text to change style. It must have a required attribute with the value of current task priority level and a several optional attributes (initialized with default values) - numeric value of middle level of priority, style (bold by default, for example) for the values with high priority and style for the values with low priority.&lt;/p&gt;

&lt;p&gt;This is the specification:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
&amp;#x2F;**
 * @author uwilfred
 *
 * Adds priorityFontTag, specified in .tld as
 *      &amp;lt;prefix:priorityFont
 *      value = Integer       &amp;#x2F;&amp;#x2F; priority value; if tag body not
                specified, also specifies the value
 *      [ level = Integer ]       &amp;#x2F;&amp;#x2F; priority level to change the
                style on
 *      [ lowChange = String ]    &amp;#x2F;&amp;#x2F; style description to apply
                if priority less than level (format listed below)
 *      [ highChange = String ]   &amp;#x2F;&amp;#x2F; style description to apply
                if priority greater than level (format listed below)
 *      ( &amp;#x2F;&amp;gt; |
 *          body                  &amp;#x2F;&amp;#x2F; value
 *      &amp;lt;&amp;#x2F;prefix:priorityFont&amp;gt; )  &amp;#x2F;&amp;#x2F; may be empty tag,
                    so the value it taken from priority value parameter
 *
 *  default for highChange is “bold”
 *  default for lowChange is “italic”
 *  default for level is 3
 *
 *  Formats:
 *      bold                                  -&amp;gt; &amp;lt;strong&amp;gt;body&amp;lt;&amp;#x2F;strong&amp;gt;
 *      italic                                -&amp;gt; &amp;lt;em&amp;gt;body&amp;lt;&amp;#x2F;em&amp;gt;
 *      underline                             -&amp;gt; &amp;lt;u&amp;gt;body&amp;lt;&amp;#x2F;u&amp;gt;
 *      strike                                -&amp;gt; &amp;lt;strike&amp;gt;body&amp;lt;&amp;#x2F;strike&amp;gt;
 *      .&amp;lt;css-class&amp;gt;            .foo          -&amp;gt; &amp;lt;span class=”foo”&amp;gt;body&amp;lt;&amp;#x2F;span&amp;gt;
 *      {&amp;lt;css-style&amp;gt;; ...}      {font-weight: bold;} -&amp;gt; &amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;body&amp;lt;&amp;#x2F;span&amp;gt;
 *      &amp;#x2F;&amp;lt;html-tag-name&amp;gt;    &amp;#x2F;foo              -&amp;gt; &amp;lt;foo&amp;gt;body&amp;lt;&amp;#x2F;foo&amp;gt;
 *&amp;#x2F;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, using some funny symbols and aliases, I&amp;rsquo;ve included a support of almost everything that user might want :)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will include some XDoclet-tags in the code, so you&amp;rsquo;ll have a possinility to generate a record in &lt;code&gt;.tld&lt;/code&gt;-file if you&amp;rsquo;ll need to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following the specification, let us define our tag in &lt;code&gt;.tld&lt;/code&gt;-file (a library of tags):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;xml&#34;&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE taglib PUBLIC
    &amp;quot;-&amp;#x2F;&amp;#x2F;Sun Microsystems, Inc.&amp;#x2F;&amp;#x2F;DTD JSP Tag Library 1.1&amp;#x2F;&amp;#x2F;EN&amp;quot;
    &amp;quot;http:&amp;#x2F;&amp;#x2F;java.sun.com&amp;#x2F;j2ee&amp;#x2F;dtds&amp;#x2F;web-jsptaglibrary_1_1.dtd&amp;quot;&amp;gt;
&amp;lt;taglib&amp;gt;
   &amp;lt;tlibversion&amp;gt;1.0&amp;lt;&amp;#x2F;tlibversion&amp;gt;
   &amp;lt;jspversion&amp;gt;1.1&amp;lt;&amp;#x2F;jspversion&amp;gt;
   &amp;lt;shortname&amp;gt;uwilfred&amp;lt;&amp;#x2F;shortname&amp;gt;

   &amp;lt;tag&amp;gt;

      &amp;lt;name&amp;gt;priorityFont&amp;lt;&amp;#x2F;name&amp;gt;
      &amp;lt;tagclass&amp;gt;org.individpro.uwilfred.tag.PriorityFontTag&amp;lt;&amp;#x2F;tagclass&amp;gt;
      &amp;lt;bodycontent&amp;gt;JSP&amp;lt;&amp;#x2F;bodycontent&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;value&amp;lt;&amp;#x2F;name&amp;gt;
         &amp;lt;required&amp;gt;true&amp;lt;&amp;#x2F;required&amp;gt;
         &amp;lt;rtexprvalue&amp;gt;true&amp;lt;&amp;#x2F;rtexprvalue&amp;gt;
      &amp;lt;&amp;#x2F;attribute&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;highChange&amp;lt;&amp;#x2F;name&amp;gt;
         &amp;lt;required&amp;gt;false&amp;lt;&amp;#x2F;required&amp;gt;
      &amp;lt;&amp;#x2F;attribute&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;level&amp;lt;&amp;#x2F;name&amp;gt;
         &amp;lt;required&amp;gt;false&amp;lt;&amp;#x2F;required&amp;gt;
      &amp;lt;&amp;#x2F;attribute&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;lowChange&amp;lt;&amp;#x2F;name&amp;gt;
         &amp;lt;required&amp;gt;false&amp;lt;&amp;#x2F;required&amp;gt;
      &amp;lt;&amp;#x2F;attribute&amp;gt;

   &amp;lt;&amp;#x2F;tag&amp;gt;

&amp;lt;&amp;#x2F;taglib&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the body of our tag is something calculated with JSP-code (normal text results in normal text), &lt;code&gt;value&lt;/code&gt; attribute is required and contains an equation, all other attributes are optional.&lt;/p&gt;

&lt;p&gt;Now, not to be a downers - let&amp;rsquo;s define our tag class:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;java&#34;&gt;
package org.individpro.uwilfred.tag;

import java.io.IOException;
import javax.servlet.jsp.JspException;

import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.BodyContent;
import javax.servlet.jsp.tagext.BodyTagSupport;
import javax.servlet.jsp.tagext.Tag;

&amp;#x2F;**
 * @note adds specified-level style change support
 * @author uwilfred
 *
 * @jsp.tag
 *   name=&amp;quot;priorityFont&amp;quot;
 *   body-content=&amp;quot;JSP&amp;quot;
 *&amp;#x2F;

public class PriorityFontTag extends BodyTagSupport implements Tag {

   private static final long serialVersionUID = -4941606719316390930L;

   private Integer value = -1;
   private Integer level = 3;
   private String lowChange = &amp;quot;bold&amp;quot;;
   private String highChange = &amp;quot;italic&amp;quot;;
   private String valueHtmlPrefix = &amp;quot;&amp;quot;;
   private String valueHtmlPostfix = &amp;quot;&amp;quot;;
   private String bodyTextContent = &amp;quot;&amp;quot;;

   &amp;#x2F;&amp;#x2F; TODO: private final Map that will store the styles replacements,
   &amp;#x2F;&amp;#x2F;       like &amp;quot;bold&amp;quot; -&amp;gt; &amp;quot;strong&amp;quot;, &amp;quot;italic&amp;quot; -&amp;gt; &amp;quot;em&amp;quot; &amp;amp; s.o.

   public void release() {
      value = -1;
      level = 3;
      lowChange = &amp;quot;bold&amp;quot;;
      highChange = &amp;quot;italic&amp;quot;;
      valueHtmlPrefix = &amp;quot;&amp;quot;;
      valueHtmlPostfix = &amp;quot;&amp;quot;;
      bodyTextContent = &amp;quot;&amp;quot;;
   }

   &amp;#x2F;**
    * any variable to take the priority from, also
    * recognized as value if no body specified, default -1
    *&amp;#x2F;

   public Integer getValue() {
      return value;
   }

   &amp;#x2F;**
    * @jsp.attribute
    *   required=&amp;quot;true&amp;quot;
    *   rtexprvalue=&amp;quot;true&amp;quot;
    *&amp;#x2F;

   public void setValue(Integer value) {
      this.value = value;
   }

   &amp;#x2F;**
    * style description to apply to the content with value higher
    *        than the level.
    *        supports: bold, italic, underline or any
                                        body-having html tag or css-style
    *            format: bold | italic | underline | strike
    *                .&amp;lt;CSS-class&amp;gt;
    *                {&amp;lt;CSS-Descriptors-Line&amp;gt;}
    *                :&amp;lt;HTML-Tag-Name&amp;gt;
    *        default: italic
    *&amp;#x2F;

   public String getHighChange() {
      return highChange;
   }

   &amp;#x2F;**
    * @jsp.attribute
    *   required=&amp;quot;false&amp;quot;
    *&amp;#x2F;

   public void setHighChange(String highChange) {
      this.highChange = highChange;
   }

   &amp;#x2F;**
    * level point to change the style, default is 3
    *&amp;#x2F;

   public Integer getLevel() {
      return level;
   }

   &amp;#x2F;**
    * @jsp.attribute
    *   required=&amp;quot;false&amp;quot;
    *&amp;#x2F;

   public void setLevel(Integer level) {
      this.level = level;
   }

   &amp;#x2F;**
    * style description to apply to the content with value lower
    *        than the level.
    *        supports: bold, italic, underline or any
                                    body-having html tag or css-style
    *            format: bold | italic | underline | strike
    *                .&amp;lt;CSS-class&amp;gt;
    *                {&amp;lt;CSS-Descriptors-Line&amp;gt;}
    *                :&amp;lt;HTML-Tag-Name&amp;gt;
    *        default: italic
    *&amp;#x2F;

   public String getLowChange() {
      return lowChange;
   }

   &amp;#x2F;**
    * @jsp.attribute
    *   required=&amp;quot;false&amp;quot;
    *&amp;#x2F;

   public void setLowChange(String lowChange) {
      this.lowChange = lowChange;
   }

   public int doStartTag() throws JspException {
      return EVAL_BODY_BUFFERED;
   }

   public int doAfterBody() throws JspException {
      try {
         BodyContent bodyContent = getBodyContent();
         if (bodyContent == null) {
            bodyTextContent = value.toString();
         } else {
            bodyTextContent = bodyContent.getString();
            if (bodyTextContent == null) {
               bodyTextContent = value.toString();
            }
         }
      } catch (NumberFormatException nfe) {
         nfe.printStackTrace();
         throw new JspException(&amp;quot;jbpm:priorityFont
                        tag body couldn&amp;#x27;t be parsed&amp;quot;, nfe);
      }
      return SKIP_BODY;
   }

   public int doEndTag() throws JspException {
      if (value == Integer.valueOf(-1)) {
         throw new JspException(&amp;quot;jbpm:priorityFont tag requires
                  the body xor the value parameter to
                  be specified (also, negative values are unsupported)&amp;quot;);
      }
      try {
         JspWriter jspOut = pageContext.getOut();
         String modificator =
                  (value &amp;lt; level) ? lowChange :
                           ((value &amp;gt; level) ? highChange : &amp;quot;&amp;quot;);
         if (modificator.equalsIgnoreCase(&amp;quot;bold&amp;quot;)) {
            valueHtmlPrefix = &amp;quot;&amp;lt;strong&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;strong&amp;gt;&amp;quot;;
         } else if (modificator.equalsIgnoreCase(&amp;quot;italic&amp;quot;)) {
            valueHtmlPrefix = &amp;quot;&amp;lt;em&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;em&amp;gt;&amp;quot;;
         } else if (modificator.equalsIgnoreCase(&amp;quot;underline&amp;quot;)) {
            valueHtmlPrefix = &amp;quot;&amp;lt;u&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;u&amp;gt;&amp;quot;;
         } else if (modificator.equalsIgnoreCase(&amp;quot;strike&amp;quot;)) {
            valueHtmlPrefix = &amp;quot;&amp;lt;strike&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;strike&amp;gt;&amp;quot;;
         } else if ((modificator.length() &amp;gt; 1) &amp;amp;&amp;amp;
                                       (modificator.charAt(0) == &amp;#x27;.&amp;#x27;)) {
            &amp;#x2F;&amp;#x2F; CSS existing style specify
            valueHtmlPrefix = &amp;quot;&amp;lt;span class=\&amp;quot;&amp;quot; + modificator.substring(1) + &amp;quot;\&amp;quot;&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;quot;;
         } else if ((modificator.length() &amp;gt; 1) &amp;amp;&amp;amp;
                                       (modificator.charAt(0) == &amp;#x27;&amp;#x2F;&amp;#x27;)) {
            &amp;#x2F;&amp;#x2F; HTML tag redefine
            valueHtmlPrefix = &amp;quot;&amp;lt;&amp;quot; + modificator.substring(1) + &amp;quot;&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;&amp;quot; + modificator.substring(1) + &amp;quot;&amp;gt;&amp;quot;;
         } else if ((modificator.length() &amp;gt; 2) &amp;amp;&amp;amp;
                (modificator.charAt(0) == &amp;#x27;{&amp;#x27;) &amp;amp;&amp;amp;
                (modificator.charAt(modificator.length() - 1) == &amp;#x27;}&amp;#x27;)) {
            &amp;#x2F;&amp;#x2F; CSS style line
            valueHtmlPrefix = &amp;quot;&amp;lt;span style=\&amp;quot;&amp;quot; +
                   modificator.substring(1, modificator.length() - 1)
                   + &amp;quot;\&amp;quot;&amp;gt;&amp;quot;;
            valueHtmlPostfix = &amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;quot;;
         } else if (modificator.length() &amp;gt; 0) {
             throw new JspException (&amp;quot;jbpm:priorityFont tag parameters
                    values couldn&amp;#x27;t be parsed&amp;quot;);
         }
         jspOut.print(valueHtmlPrefix + bodyTextContent +
               valueHtmlPostfix);
      } catch (NumberFormatException nfe) {
         nfe.printStackTrace();
         throw new JspException(&amp;quot;jbpm:priorityFont tag parameters
                        couldn&amp;#x27;t be parsed&amp;quot;, nfe);
      } catch (IOException ioe) {
         ioe.printStackTrace();
         throw new JspException(&amp;quot;jbpm:priorityFont tag parameters
                        couldn&amp;#x27;t be parsed&amp;quot;, ioe);
      }
      release();
      return EVAL_PAGE;
   }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By extending a tag from &lt;code&gt;BodyTagSupport&lt;/code&gt;, we mean that this tag will have a body. The values are discarded in &lt;code&gt;release()&lt;/code&gt; method, attributes values are set in compiled JSP - HTTP-servlet - with help of accessors. Methods &lt;code&gt;doStartTag()&lt;/code&gt; &lt;code&gt;doAfterBody()&lt;/code&gt; and &lt;code&gt;doEndTag()&lt;/code&gt; are overriden from the parent (and they implement &lt;code&gt;Tag&lt;/code&gt; interface by the way) and they are called in the specified order - after evaluation of opening tag, after evaluation of tag body, and after evaluation of closing tag respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;doStartTag()&lt;/code&gt; returns &lt;code&gt;EVAL_BODY_BUFFERED&lt;/code&gt; constant to evaluate tag body right after this method. &lt;code&gt;doAfterBody()&lt;/code&gt; sets &lt;code&gt;body&lt;/code&gt; to the &lt;code&gt;value&lt;/code&gt; value if there is no text inside the tag and returns &lt;code&gt;SKIP_BODY&lt;/code&gt; not to let tag body be returned to output without processing required. &lt;code&gt;doEndTag()&lt;/code&gt; does the main thing - using the value and attributes settings it generates an output code, calls &lt;code&gt;release()&lt;/code&gt; (or the values of attributes will be saved for next tags) and returns &lt;code&gt;EVAL_PAGE&lt;/code&gt; to say &lt;code&gt;jasper&lt;/code&gt; (JSP compiler) to follow the chain of tags forward through the page content.&lt;/p&gt;

&lt;p&gt;If our tag was designed not to have a body (&lt;code&gt;empty&lt;/code&gt; in &lt;code&gt;.tld&lt;/code&gt;) - we&amp;rsquo;d extend it from &lt;code&gt;javax.servlet.tagext.TagSupport&lt;/code&gt; (which is parent of &lt;code&gt;BodyTagSupport&lt;/code&gt; following the same reasons) and nothing but &lt;code&gt;release()&lt;/code&gt; and &lt;code&gt;doEndTag()&lt;/code&gt; (return &lt;code&gt;EVAL_PAGE&lt;/code&gt;) methods would be required.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look on the usage of tag:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;html&#34;&gt;
&amp;lt;%@ taglib uri=&amp;quot;&amp;#x2F;WEB-INF&amp;#x2F;uwilfred.tld&amp;quot; prefix=&amp;quot;uwilfred&amp;quot; %&amp;gt;...
&amp;lt;html&amp;gt;&amp;lt;%
...
%&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;style&amp;gt;

   .priorityHigh {
      font-color: #f00;
      font-weight: bold;
      border: 1px solid #333;
   }

   .priorityLow {
      font-color: #00f;
      font-style: italic;
      border: 1px dotted #999;
   }

   &amp;lt;&amp;#x2F;style&amp;gt;

   &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text&amp;#x2F;html; charset=UTF-8&amp;quot;&amp;gt;
   &amp;lt;title&amp;gt;Test priorityFont Tag&amp;lt;&amp;#x2F;title&amp;gt;
&amp;lt;&amp;#x2F;head&amp;gt;

&amp;lt;body class=&amp;quot;layout&amp;quot;&amp;gt;

   &amp;lt;c:forEach items=&amp;quot;${model.tasks}&amp;quot; var=&amp;quot;task&amp;quot; varStatus=&amp;quot;status&amp;quot;&amp;gt;
      &amp;lt;uwilfred:priorityFont value=&amp;quot;${task.priority}&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;taskinfo.htm?id=&amp;lt;c:out value=&amp;quot;${task.id}&amp;quot;&amp;#x2F;&amp;gt;&amp;quot;&amp;gt;
                  &amp;lt;c:out value=&amp;quot;${task.name}&amp;quot;&amp;#x2F;&amp;gt;
            &amp;lt;&amp;#x2F;a&amp;gt;
      &amp;lt;&amp;#x2F;uwilfred:priorityFont&amp;gt;
   &amp;lt;&amp;#x2F;c:forEach&amp;gt;

   &amp;lt;%-- is identical to: --%&amp;gt;

   &amp;lt;c:forEach items=&amp;quot;${model.tasks}&amp;quot; var=&amp;quot;task&amp;quot; varStatus=&amp;quot;status&amp;quot;&amp;gt;
      &amp;lt;uwilfred:priorityFont value=&amp;quot;${task.priority}&amp;quot; level=&amp;quot;3&amp;quot;
              highChange=&amp;quot;bold&amp;quot; lowChange=&amp;quot;italic&amp;quot;&amp;gt;
         &amp;lt;a href=&amp;quot;taskinfo.htm?id=&amp;lt;c:out value=&amp;quot;${task.id}&amp;quot;&amp;#x2F;&amp;gt;&amp;quot;&amp;gt;
            &amp;lt;c:out value=&amp;quot;${task.name}&amp;quot;&amp;#x2F;&amp;gt;
         &amp;lt;&amp;#x2F;a&amp;gt;
      &amp;lt;&amp;#x2F;uwilfred:priorityFont&amp;gt;
   &amp;lt;&amp;#x2F;c:forEach&amp;gt;

   &amp;lt;%-- different variants: --%&amp;gt;

   &amp;lt;uwilfred:priorityFont value=&amp;quot;${someValue}&amp;quot;
            highChange=&amp;quot;{font-color: #f00; font-weight: bold;}&amp;quot;
            lowChange=&amp;quot;{font-color: #00f; font-style: italic;}&amp;quot;&amp;gt;
                  BlahByCSSInline
   &amp;lt;&amp;#x2F;uwilfred:priorityFont&amp;gt;

   &amp;lt;uwilfred:priorityFont value=&amp;quot;${someValue}&amp;quot;
                                    highChange=&amp;quot;.priorityHigh&amp;quot;
                                    lowChange=&amp;quot;.priorityLow&amp;quot;&amp;gt;
         BlahByCSSExistentClass
   &amp;lt;&amp;#x2F;uwilfred:priorityFont&amp;gt;

   &amp;lt;uwilfred:priorityFont value=&amp;quot;${someValue}&amp;quot;
               highChange=&amp;quot;:strong&amp;quot;
               lowChange=&amp;quot;:em&amp;quot;&amp;gt;
         BlahByTagRedefine
   &amp;lt;&amp;#x2F;uwilfred:priorityFont&amp;gt;

&amp;lt;&amp;#x2F;body&amp;gt;

&amp;lt;&amp;#x2F;html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;</content>
            </entry>
        
    </feed>
