<?xml version="1.0" encoding="UTF-8"?>

    <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Ни слова о луке</title>
        <subtitle>сэр шаман рассказывает о чём может</subtitle>
        <link rel="alternate" href="http://shamansir.github.com/blog/ru/" />
        <link rel="self" href="http://shamansir.github.com/blog/ru/feed.xml" type="application/atom+xml" />
        <id>http://shamansir.github.com/blog/ru/</id>
        <updated>2013-02-16T00:46:30Z</updated>
        
        <author>
            <name>Ulric Wilfred</name>
            <email>shaman.sir@gmail.com</email>
            <uri>http://shamansir.github.com/blog/ru/</uri>
        </author>
        
        
            <entry>
                <title>Путь асинхронного самурая</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/the-way-of-the-asynchronous-samurai/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/the-way-of-the-asynchronous-samurai/</id>
                <updated>2012-02-22T00:46:00Z</updated>
                
                <summary type="html">JavaScript — очень необычный язык. Может это звучит немного странно, но по-моему в его истории есть некоторое сходство с судьбой японского языка. Он, возможно, не был изначально глубоко продуман и был сделан на скорую руку, но при этом в умелых руках он часто оказывается неожиданно элегантным. Он был &amp;ldquo;поскрёбан&amp;rdquo; по различной степени качества сусекам, но при этом он легко впитывает нововведения и иногда даже кажется, что только для них и был создан. Он покорно принимает различные стили письма и, если бы не апологеты, &amp;ldquo;правильное&amp;rdquo; написание было бы, возможно, уже забыто… И, самое главное, как и для японского, &lt;em&gt;нет обозримой границы в познании этого языка&lt;/em&gt;. Я знаком с ним на протяжении многих лет и он постоянно открывает мне новые грани.</summary>
                <content type="html">&lt;p&gt;JavaScript — очень необычный язык. Может это звучит немного странно, но по-моему в его истории есть некоторое сходство с судьбой японского языка. Он, возможно, не был изначально глубоко продуман и был сделан на скорую руку, но при этом в умелых руках он часто оказывается неожиданно элегантным. Он был &amp;ldquo;поскрёбан&amp;rdquo; по различной степени качества сусекам, но при этом он легко впитывает нововведения и иногда даже кажется, что только для них и был создан. Он покорно принимает различные стили письма и, если бы не апологеты, &amp;ldquo;правильное&amp;rdquo; написание было бы, возможно, уже забыто… И, самое главное, как и для японского, &lt;em&gt;нет обозримой границы в познании этого языка&lt;/em&gt;. Я знаком с ним на протяжении многих лет и он постоянно открывает мне новые грани.&lt;/p&gt;

&lt;p&gt;Но одно я знаю точно — на JavaScript можно писать очень простой и понятный код. К этому нужно стремиться и взращивать это в себе, нужно не опускать руки, нужно узнавать новые и новые вещи, уметь принимать их, и рано или поздно обнаруживаешь, что сам язык — довольно-таки прост и при этом очень, просто-таки бесконечно, элегантен.&lt;/p&gt;

&lt;p&gt;И впитывает новое, как губка.&lt;/p&gt;

&lt;p&gt;Теперь к делу.&lt;/p&gt;
&lt;h3 id=&#34;проблема&#34;&gt;&lt;a href=&#34;#проблема&#34; title=&#34;Проблема&#34;&gt;Проблема&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Большинство жалоб на язык — ООП, которое, &lt;a href=&#34;http://shamansir.github.com/js-lecture-wsd&#34;&gt;как известно&lt;/a&gt;, в нём есть, в своём наипрекраснейшем и буквальном виде, в виде прототипов. И даже необходимость в наследовании оказывается довольно-таки надумана, когда понимаешь, как дружить миксины. Но статья, в этот раз, не об этом.&lt;/p&gt;

&lt;p&gt;Вторая по категоричности, но первая по сегодняшней моде, жалоба — &amp;ldquo;неудобство асинхронного программирования&amp;rdquo;. Она озвучивается тут и там, находят способы один необычнее другого, но все они ненамного проще друг друга настолько, что мне даже не хочется приводить ссылки (хотя приведу пример). Предлагаются сотни похожих библиотек, пишутся монструозные заменители, в общем всё происходит так, как обычно происходит с бедным стареньким, молодым и свежим JavaScript&amp;#39;ом. &lt;/p&gt;

&lt;p&gt;…И потом пишутся тонны &amp;ldquo;образумливающих&amp;rdquo; статей подобных моей, и только читателю решать, где истина.&lt;/p&gt;

&lt;p&gt;Посему эта статья о том, как &lt;em&gt;сделать асинхронное программирование действительно простым&lt;/em&gt;. Но добиться настоящей простоты обычно довольно-таки сложно, поэтому, чую, статья получится вполне объёмной.&lt;/p&gt;

&lt;p&gt;В обратном порядке, от не очень приятного метода до самого клёвого и независимого (от того, node.js вы используете или браузерный движок), поэтому я вам даже советую &lt;a href=&#34;#point-5&#34;&gt;&lt;em&gt;просто проскроллить вниз&lt;/em&gt;&lt;/a&gt;. Кроме того, последние пункты немного разъяснят как работают, например, библиотеки. …И сразу же пример из него, чтобы уж точно никто не смущался: &lt;em&gt;семью&lt;/em&gt; строками кода JS, без никаких библиотек (!), мы добъёмся, скажем, этого:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
successive_read(read_file(&amp;#39;a&amp;#39;),
                read_file(&amp;#39;b&amp;#39;),
                read_file(&amp;#39;не_существует&amp;#39;),
                read_file(&amp;#39;c&amp;#39;) // тело этой, последней, функции не будет вызвано (вообще!)
         );

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;когда-всё-это-нужно&#34;&gt;&lt;a href=&#34;#когда-всё-это-нужно&#34; title=&#34;Когда всё это нужно?&#34;&gt;Когда всё это нужно?&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Цепочки запросов к серверному API&lt;/li&gt;
&lt;li&gt;Необходимость последовательного извещения UI по сингалам с сервера, да и без сигналов тоже&lt;/li&gt;
&lt;li&gt;Поочерёдное чтение файлов &lt;/li&gt;
&lt;li&gt;Парсеры текста и парсер-генераторы&lt;/li&gt;
&lt;li&gt;Аналоги консольного pipe (&lt;code&gt;|&lt;/code&gt;) или направление символьных потоков &lt;/li&gt;
&lt;li&gt;Чтение пользовательского ввода&lt;/li&gt;
&lt;li&gt;Безопасные вызовы цепочек функций&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Цепочки, цепочки… Вы заметили, да?&lt;/p&gt;
&lt;h3 id=&#34;содержание&#34;&gt;&lt;a href=&#34;#содержание&#34; title=&#34;Содержание&#34;&gt;Содержание&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#point-1&#34;&gt;Путь 1. Просто вызовы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#point-2&#34;&gt;Путь 2. Шины событий&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#point-3&#34;&gt;Путь 3. Библиотеки&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#point-4&#34;&gt;Путь 4. «Чистые» монады&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#point-5&#34;&gt;Путь 5. «Грязноватые» (но от этого такие простые) монады или «Мы можем это сами»&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;point-1&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;путь-1.-просто-вызовы&#34;&gt;&lt;a href=&#34;#путь-1.-просто-вызовы&#34; title=&#34;Путь 1. Просто вызовы&#34;&gt;Путь 1. Просто вызовы&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Почти что первое, что приходит на ум.&lt;/p&gt;

&lt;p&gt;Допустим, у вас есть серверное атомарное API, есть класс работы с ним и мы хотим получить сортированный список пользователей. Сильно не утруждайтесь разбираться, оцените только размер и сложность кода, это всё равно худший из вариантов (хотя в сети встречаются &lt;em&gt;ещё хуже&lt;/em&gt;):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var people = (function() {

    var papi = new PeopleAPI();

    function People() {
        this.__requested = false;
        this.__callback = null;
    }

    People.prototype.getAllSorted = function(callback) {
        if (this.__requested) throw new Error(&amp;#39;Request already started&amp;#39;);
        this.__requested = true;
        this.__callback = callback;
        papi.orderedBy(&amp;#39;name&amp;#39;, bind(this, this._gotOrder));
    }

    People.prototype._gotOrder = function(order) {
        var res = {}, got = 0;
        var got_one = (function(people, count) {
            return function(man) {
                res[man.id] = man;
                people.__got++;
                if (people.__got === count) {
                    people._gotAll(order, res);
                }
            }
        })(this, order.length);
        for (var oi = 0, ol = order.length; oi &amp;lt; ol, oi++) {
            papi.find(order[oi], got_one);
        }
    }

    People.prototype._gotAll = function(order, res) {
        this.__callback(order, res);
        this.__requested = false;
    }

    return new People(); 

})();

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В нужный момент мы передаём нужный метод-хэндлер, храним состояние вызова… Ох, всё равно до хрена монструозно, правда? &lt;strong&gt;Ужас, ужас!&lt;/strong&gt; Мне даже сейчас было противно писать это и я ничего не тестировал, хотя когда-то похожим образом у меня был построен &lt;a href=&#34;http://code.google.com/p/lepro-blackjack/source/browse/trunk/lepro-blackjack/blackjack.js#778&#34;&gt;относительно крупный проект&lt;/a&gt; (там выглядит чуть лучше, потому что API писал тоже я :) ). Пропускаем.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;point-2&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;путь-2.-шины-событий&#34;&gt;&lt;a href=&#34;#путь-2.-шины-событий&#34; title=&#34;Путь 2. Шины событий&#34;&gt;Путь 2. Шины событий&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Попробуем быть чуть умнее, заведём общую шину событий:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var handlers = {
    &amp;#39;user&amp;#39;: {}, 
    &amp;#39;book&amp;#39;: {}, 
    &amp;#39;message&amp;#39;: {},
    &amp;#39;_error&amp;#39;: [] // допустим, ошибки не зависят от namespace
};

events = [ &amp;#39;update&amp;#39;, &amp;#39;create&amp;#39;, &amp;#39;delete&amp;#39;, &amp;#39;list&amp;#39; ];

for (var ei = events.length; ei--;) {
    for (var ns in handlers) { // мой объект чист, поэтому не нужно `hasOwnProperty`
        handlers[ns][events[ei]] = [];
    }
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Шина событий в данном случае разбита на подразделы (области имён), а глубже уровнем подразделы разбиты на типы событий, где на данный момент содержатся пустые массивы. Например, &lt;code&gt;handlers.user.update&lt;/code&gt; и &lt;code&gt;handlers.message.list&lt;/code&gt; это пустые массивы (&lt;code&gt;[]&lt;/code&gt;), и так для каждого события в каждом подразделе.&lt;/p&gt;

&lt;p&gt;Теперь организуем функции подписки на события и ошибки и функции выброса (ну а как ещё назвать?) и тех и других.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// теперь объект handlers можно наполнять ссылками
// на &amp;#34;слушателей&amp;#34;, группируя их по неймспейсу
// и типу события

// подписаться на событие в неймспейсе
function subscribe(ns, event, handler) {
    handlers[ns][event].push(handler);
}

// подписаться на сообщения об ошибках
function subscribe_errors(handler) {
    handlers._error.push(handler);
}        

// сообщить о произошедшем в неймспейсе сообытии
function fire(ns, event, e) {
    var e_handlers = handlers[ns][event],
        hname = &amp;#39;on_&amp;#39;+ns+&amp;#39;_&amp;#39;+event,
        handler;
    for (var ei = e_handlers.length; ei--;) {
        handler = e_handlers[ei][hname];
        handler.call(handler, e);
    }
}

// сообщить о произошедшей ошибке
function fire_error(err) {
    var e_handlers = handlers._error;
    for (var ei = e_handlers.length; ei--;) {
        e_handlers[ei].on_error.call(handler, err);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;По сути это весь необходимый код механизма событий и он, по-моему, довольно приличный. Так что, без лишних рассуждений, приведём пример использования:  &lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// некий proxy к серверному API, 
// делает только асинхронные вызовы
var uapi = new UserAPI(); 

// ваше приложение
function MyApp() {
    // TODO: сделать функцию subscribe_all(&amp;#39;user&amp;#39;, this)
    subscribe(&amp;#39;user&amp;#39;,&amp;#39;list&amp;#39;, this);
    subscribe(&amp;#39;user&amp;#39;,&amp;#39;update&amp;#39;, this);
    . . .
    subscribe_errors(this);
}
// запросить список пользователей
MyApp.prototype.requestUsers = function() {
    uapi.get_all(function(order, res) {
        fire(&amp;#39;user&amp;#39;, &amp;#39;list&amp;#39;, {
            order: order, list: res
        });
    });
};
// обновить данные о пользователе 
// (может вызываться при отправке формы заполнения профиля)
MyApp.prototype.updateUser = function(user) {
    uapi.save(user, function(user) {
        fire(&amp;#39;user&amp;#39;, &amp;#39;update&amp;#39;, user);
    }/*, fire_error*/);
};
// этот метод будет вызван при срабатывании события user/list
MyApp.prototype.on_user_list = function(users) {
    . . . // обновление UI
    . . . // при необходимости можно выбросить другое событие
}
// этот метод будет вызван при срабатывании события user/update
MyApp.prototype.on_user_update = function(user) {
    . . . // обновление UI
    . . . // при необходимости можно выбросить другое событие
}
// этот метод будет вызван при ошибке
MyApp.prototype.on_error = function(err) {
    . . . // нотификация об ошибке, паника, кони, люди
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Выглядит значительно более лаконично по сравнению с предыдущим примером и получается даже чем-то похоже на GWT, только в разы короче ;). На события может подписываться не один объект, а сколько угодно, для работы с серверным API — почти что идеальное решение. &lt;/p&gt;

&lt;p&gt;Поиграться с ним можно &lt;a href=&#34;http://jsfiddle.net/shaman_sir/Gupft/3/&#34;&gt;здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Но для парсеров и последовательного чтения файлов — не совсем то. Теперь представим, что нам надоело, мы закрыли глаза, и обратились в сторону библиотек, не задаваясь вопросом что за ними стоит. Просто — взять и вставить, кого нынче волнуют килобайты и внутренности всяких этих хламидомонад? &lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;point-3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;путь-3.-библиотеки&#34;&gt;&lt;a href=&#34;#путь-3.-библиотеки&#34; title=&#34;Путь 3. Библиотеки&#34;&gt;Путь 3. Библиотеки&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Как бы там ни было, по сравнению с другими популярно-предлагаемыми способами, библиотеки — не самое плохое решение. Хоть их и пишут сразу кучу по первой же надобности, некоторые из них отдельно хороши и в разы повышают качество вашего кода. Просто пара ссылок, думаю вы запросто сами разберётесь как их использовать:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kriskowal/q&#34;&gt;Q&lt;/a&gt; (node.js, browser)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coolaj86/futures&#34;&gt;Futures&lt;/a&gt; (browser, node.js/v8, rhino) &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/medikoo/deferred&#34;&gt;deferred&lt;/a&gt; (node.js, browser)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laverdet/node-fibers&#34;&gt;fibers&lt;/a&gt; (node.js/v8)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.umd.edu/projects/PL/arrowlets/index.xhtml&#34;&gt;arrowlets&lt;/a&gt; (browser) &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/0ctave/node-sync&#34;&gt;Sync&lt;/a&gt; (node.js)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/caolan/async&#34;&gt;Async&lt;/a&gt; (node.js, browser)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/creationix/step&#34;&gt;Step&lt;/a&gt; (node.js)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/substack/node-seq&#34;&gt;Seq&lt;/a&gt; (node.js)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Туда же пойдут Dojo.deferred и прочие кандидаты. Плюс, январская презентация &lt;a href=&#34;http://www.medikoo.com/asynchronous-javascript/3d&#34;&gt;«Аsynchronous JavaScript»&lt;/a&gt; (англ.) от автора третьей библиотеки вдогонку.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;point-4&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;путь-4.-чистые-монады&#34;&gt;&lt;a href=&#34;#путь-4.-чистые-монады&#34; title=&#34;Путь 4. «Чистые» монады&#34;&gt;Путь 4. «Чистые» монады&lt;/a&gt;&lt;/h3&gt;&lt;h6 id=&#34;モナダの空道&#34;&gt;&lt;a href=&#34;#モナダの空道&#34; title=&#34;モナダの空道&#34;&gt;モナダの空道&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;…Ух ты, почти что ни одного упоминания о монадах в JS на русском, а я надеялся, мне не придётся их объяснять. Впрочем, я и не буду. И не будет в этой главе примеров кода «правильных» монад на JS. Англоязычных статей за последний год тысячи и в ближайшее время кто-нибудь их, да переведёт, и такого кода там завались:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/&#34;&gt;Translation from Haskell to JavaScript of selected portions of the best introduction to monads I’ve ever read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://igstan.ro/posts/2011-05-02-understanding-monads-with-javascript.html&#34;&gt;Understanding Monads with JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jcoglan.com/2011/03/06/monad-syntax-for-javascript/&#34;&gt;Monad Syntax for JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amix.dk/blog/post/19509&#34;&gt;How to build your own Monads&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html&#34;&gt;You could have invented monads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jcoglan.com/2011/03/11/promises-are-the-monad-of-asynchronous-programming/&#34;&gt;Promises are the monad of asynchronous programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matthew.yumptious.com/2009/04/javascript/dojo-deferred-is-a-monad/&#34;&gt;Dojo.deferred is a monad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://importantshock.wordpress.com/2009/01/18/jquery-is-a-monad/&#34;&gt;JQuery is monad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/q/5569805/167262&#34;&gt;Conjuring JQuery Deferred with monadic incantations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sovety.blogspot.com/2009/09/haskell-horrors.html&#34;&gt;(Новичковые) ужасы Хаскеля&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.tupil.com/look-ma-no-callbacks/&#34;&gt;Look Ma, No Callbacks!&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.getify.com/native-javascript-sync-async/&#34;&gt;Native Javascript: sync and async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codereview.stackexchange.com/questions/8055/java-monad-implementation&#34;&gt;Java Monad Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Но долг требует хотя бы вкратце изложить суть.&lt;/p&gt;

&lt;p&gt;В разделе «Когда это нужно?» почти весь список содержал популярные примеры применения монад, причём распространено мнение, что вы можете использовать их часто даже сами не осознавая того, что вы их используете. (Знаю я этот приёмчик, слышал не раз). И монады, кстати, стары, как сам программистский мир.&lt;/p&gt;

&lt;p&gt;…Однако восклик &amp;ldquo;ах, блин, да это же монады, я ведь их часто использую&amp;rdquo;, родился и у меня. Не супер, прямо скажем, часто, но, оказывается, правда случается. И это действительно ещё одна вещь  из того множества, которое надо понимать любому уважающему себя программисту.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Примечание:&lt;/em&gt; К моему стыду, я очень плохо понимаю код на Haskell и как он работает, даже в двустрочных примерах, хоть и предпринимал пару решительных попыток залезть во вражеский лагерь. С другими языками программирования у меня обычно таких проблем нет (читаю за еду код на Java, Lisp, Python), а вот тут — обнаружилась. Посему мои последующие (до пятой главы) слова отнюдь не аксиомы, а лишь &lt;em&gt;то, что я увидел со своего берега&lt;/em&gt;. Я могу даже нагло врать, абсолютно не стесняясь (говорят, правда, что я этого не умею, но в тексте не должно быть заметно), но если вы вчитываетесь в эту главу, другого выхода, кроме как поверить на слово, у вас, на данный момент, нет :)&lt;/p&gt;

&lt;p&gt;Всё просто. Если вы задались любой проблемой из вышеупомянутого списка из раздела «Когда это нужно?», значит вам нужны монады. И, как верно для любого паттерна, вы бы рано или поздно к ним пришли. &lt;/p&gt;

&lt;p&gt;Они, в каких-то своих проявлениях, находятся среди вас — например, когда вы используете в консоли пайп:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; cat my.js | more
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Достаточно задуматься о том, как этот пайп написан, и вы тут же поймёте монады. Ну, не справочное описание, а именно как они &lt;em&gt;примерно&lt;/em&gt; работают.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;note-1-src&#34;&gt;&lt;/a&gt;Если файл &lt;code&gt;my.js&lt;/code&gt; не существует, &lt;code&gt;more&lt;/code&gt; не будет вызван вообще&lt;sup&gt;&lt;a href=&#34;#note-1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Это нам довольно знакомо, мы ведь со времён Perl любим писать:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; read_file(&amp;#39;my.js&amp;#39;) || die(&amp;#39;where\&amp;#39;s my file?!&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Основная проблема в написании такого оператора — передача контекста. Вы не хотели бы знать, как работают &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt;, &lt;code&gt;read_file&lt;/code&gt; или &lt;code&gt;die&lt;/code&gt; (хотя снова вру, иногда очень даже интересно, что там, после этого &lt;code&gt;die&lt;/code&gt;…). Вы бы скорее потребовали от них некий общий протокол общения, которому бы они беспрекословно следовали. Что-нибудь такое, что сделало бы очевидным, сорвалась операция или нет и готов для приёма абстрактный поток или не судьба.&lt;/p&gt;

&lt;p&gt;Чтобы проблема была видна нагляднее, сделаем цепочку подлиннее, что-нибудь злобное (не пробовать дома, я и сам не пробовал):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; cat my.file &amp;gt;&amp;gt; /dev/dsp &amp;gt;&amp;gt; /dev/hda1 &amp;gt;&amp;gt; my_utility &amp;gt;&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Монада — это и элемент такой цепочки и одновременно функция, которая её обрабатывает.&lt;/p&gt;

&lt;p&gt;«Чистая» монада должна быть полностью независимой от внешнего контекста, быть вещью в себе, но от неё требуется вернуть унифицированный ответ. При этом позволяется заставить её возвращать этот самый унифицированный ответ через всяческие функции-обёртки, но, ещё раз, для использования в цепочке &lt;em&gt;необходимо&lt;/em&gt;, чтобы каждый элемент был унифицирован, вся цепочка должна работать по единому &lt;em&gt;правилу&lt;/em&gt; и её элементы должны быть &lt;em&gt;компонуемы&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;В нашем, последнем представленном, случае, любой элемент (или сам контекст вызова) должен уметь оборвать выполнение всей цепочки, если хоть один элемент не доступен, и последовательно запрашивать новые куски потока, если всё хорошо. А для обеспечения корректной работы всего этого мы должны понять, произошла ошибка или нет и принудить все элементы передавать поток единообразно. &lt;/p&gt;

&lt;p&gt;Вот этот момент, с ошибкой, является характерным примером монады &lt;em&gt;MayBe&lt;/em&gt;, которую мы незаметно так рассмотрели: в некоторых языках (JavaScript среди них, so sad ;( ) нет специального типа для ошибки (временно забудем о &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;) и мы не можем стопроцентно для всех случаев сказать, хотел нам пользователь намеренно вернуть &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt; как некие пустые данные или он правда имел ввиду, что произошла ошибка. В шелле есть &lt;code&gt;exit code&lt;/code&gt; и это однозначное сообщение об ошибке, так все эти пайпы и работают. И Хаскель тоже так умеет, а JavaScript вот — нет.&lt;/p&gt;

&lt;p&gt;Так что монада — это некая функция, которая может быть вызвана в некой очереди, в дереве процессов или просто независимом контексте и, оставаясь для них прозрачной, способная адекватно сообщить о своём состоянии. Навскидку — так.&lt;/p&gt;

&lt;p&gt;В Хаскеле все функции «чисты» и не изменяют что-либо вне себя (в смысле &lt;em&gt;вообще ничего&lt;/em&gt;!), они работают исключительно с одним аргументом (другой функцией, &lt;em&gt;каррирование&lt;/em&gt;), а кроме этого занимаются только подготовкой возвращаемого значения, и лезть куда-то наружу для них —  святотатство. Поэтому почти любую функцию в Хаскеле можно «омонадить» (TODO: спросить Хаскелистов, похоже на правду это утверждение или нет), просто потому что она независима и прозрачна. Так рождаются различные комбинации монад.&lt;/p&gt;

&lt;p&gt;Кроме &lt;em&gt;MayBe&lt;/em&gt; (привязка точной информации об ошибке к оборачиваемой функции) существуют другие монады-паттерны: &lt;em&gt;Continuation&lt;/em&gt; (связывание нескольких функций между собой), &lt;em&gt;Writer&lt;/em&gt; (привязка текстовой информации к функции, например логгинга), &lt;em&gt;I/O&lt;/em&gt; (спросить пользователя, дождаться ответа из терминала, отреагировать на ответ; или прочитать файл, дождаться когда он будет доступен, прочитать содержимое, закрыть файл), &lt;em&gt;Identity&lt;/em&gt; (привязка/подмена информации в возвращаемом значении), &lt;em&gt;State&lt;/em&gt; (привязка состояния к функции) и другие (смотрите ссылки в русской статье на википедии и раздел «Ссылки» статьи на английском).&lt;/p&gt;

&lt;p&gt;То есть, как результат, несколько функций можно обернуть в &lt;em&gt;Continuation&lt;/em&gt; (последовательный вызов) и для обеспечения требуемой унификации, для каждой можно использовать монаду &lt;em&gt;MayBe&lt;/em&gt; и  как раз получится наш пайп или оператор &lt;code&gt;||&lt;/code&gt; / &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Поэтому, когда вы делаете асинхронные вызовы (или даже просто последовательные) к серверному коду — вы тоже используете монады.&lt;/p&gt;

&lt;p&gt;Когда вы просите одну функцию вызвать другую или несколько, в неком чистом окружении, и ждёте от них ответ — вы используете монады.&lt;/p&gt;

&lt;p&gt;(Кстати, пока я искал материал к статье, нашёл всё-таки &lt;a href=&#34;http://sovety.blogspot.com/2009/09/haskell-horrors.html&#34;&gt;одно описание на русском&lt;/a&gt; (глава 4), которое, к моему приятному удивлению, показало, что я и правда «всё правильно понял», а пример с пайпом, оказывается, вообще стандартен для описания монадических замутов).&lt;/p&gt;

&lt;p&gt;Советую заглянуть в статьи по ссылкам в начале главы и посмотреть, как монады надо «правильно» адаптировать в JavaScript. Там, в общем случае, описываются одна-две монады и приводятся три основные функции: &lt;code&gt;bind&lt;/code&gt;, переводящая переданную функцию в компонуемую форму (чтобы её можно было использовать в цепочках), &lt;code&gt;unit&lt;/code&gt;, обеспечивающая унифицированный формат для вовращаемого значения функции и, опционально, &lt;code&gt;lift&lt;/code&gt;, добавляющая к функции необходимые данные, чтобы передавать их по цепочке. &lt;/p&gt;

&lt;p&gt;Но ввиду неприспособленности JS к настолько абстрактным понятиям, многие реализации требует своих версий этих функций и значительных усилий над собой, чтобы всё это верно организовать. Может где-то недалеко и пишут уже фреймворк с прямой трансляцией хаскелевских монад на JS и это наверное хорошо.&lt;/p&gt;

&lt;p&gt;Но я имею привычку отмечать, что «Жаваскрипту — Жаваскриптовое».&lt;/p&gt;

&lt;p&gt;Так что хватит этой напыщенной чистоты, пора и грязь познать :)&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;point-5&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;путь-5.-грязноватые-но-от-этого-такие-простые-монады-или-мы-можем-это-сами&#34;&gt;&lt;a href=&#34;#путь-5.-грязноватые-но-от-этого-такие-простые-монады-или-мы-можем-это-сами&#34; title=&#34;Путь 5. «Грязноватые» (но от этого такие простые) монады или «Мы можем это сами»&#34;&gt;Путь 5. «Грязноватые» (но от этого такие простые) монады или «Мы можем это сами»&lt;/a&gt;&lt;/h3&gt;&lt;h6 id=&#34;モナダの土道&#34;&gt;&lt;a href=&#34;#モナダの土道&#34; title=&#34;モナダの土道&#34;&gt;モナダの土道&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;Из предыдущего раздела мы узнали что такое монады и как, примерно, они должны «правильно» готовиться. Но, как я люблю говаривать, «Хаскелю — Хаскелево». Монады — общее достояние и каждый язык имеет право смотреть на них со своей колокольни. В статьях, ссылки на которые вы найдёте предыдущей главе, они адаптируются в язык не то чтобы дословно, но довольно тщательно — авторы стремятся дать почти идентичное хаскелевому решение, универсальное для всех функций. На самом же деле это больше концепция, чем необходимость дословной реализации и таскания её за собой.&lt;/p&gt;

&lt;p&gt;JS на самом деле не особо предусмотрен для таких инъекций, код становится только толще и сложнее, а таскать за собой ещё парочку js-файлов, раз этого нет в явном виде в стандарте языка, иногда очень даже «не комильфо». Для того чтобы подход стал простым, надо кое-от-чего отказаться. &lt;/p&gt;

&lt;p&gt;Откажемся от передачи контекстов, условимся, что контекст у нас внешний и функции могут в него свободно писать. Сначала может показаться, что реализация станет зависимой от задачи, но это совсем не так: наоборот, мы оставим на своё усмотрение операции над контекстом и доверимся одной-единственной функции, которая будет превращать другую, переданную ей, функцию в отложенную и компонуемую. Вот она:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function deferrable(f) { // выберите название поприятнее
    return function() {
        return (function(f, args) {
            return function() { return f.apply(null, args); };
        })(f, arguments);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Я свернул пару строчек в одну, чтобы их правда было семь :).&lt;/p&gt;

&lt;p&gt;Это изящное, на мой взгляд, сочетание тех самых &lt;code&gt;bind&lt;/code&gt; и &lt;code&gt;unit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Посмотрим, как можно это использовать. Допустим, мы хотим манипулировать чтением файлов, выполняя его последовательно по цепочке и обрывая цепочку, если какой-либо файл из неё не был найден.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/* функция, вызовы к которой мы хотим уметь откладывать */
function read_file(name) {
    console.log(&amp;#39;reading &amp;#39; + name);
    return name !== &amp;#39;foo.js&amp;#39;; // true, если имя файла не `foo.js`
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Заметим, однако, что для этого простейшего случая, мы уже умеем это делать:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/* мы можем эмулировать метод &amp;#34;прервать очередь по падению&amp;#34; через оператор &amp;amp;&amp;amp;
                    или метод &amp;#34;прервать по первой удаче&amp;#34; используя оператор ||
   но это всё.

   обратите внимание, что `read_file(&amp;#39;c&amp;#39;)` не вызывается. */
read_file(&amp;#39;a&amp;#39;) &amp;amp;&amp;amp; read_file(&amp;#39;b&amp;#39;) &amp;amp;&amp;amp; read_file(&amp;#39;foo.js&amp;#39;) &amp;amp;&amp;amp; read_file(&amp;#39;c&amp;#39;);
// &amp;gt; reading a
// &amp;gt; reading b
// &amp;gt; reading foo.js
// &amp;lt; false

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если условиться, что функция возвращает более осмысленное значение (например, ссылку на файл) и &lt;code&gt;null&lt;/code&gt; при ошибке (но помните о &lt;em&gt;MayBe&lt;/em&gt;), то в JS мы можем сделать даже так:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var found = find_file(&amp;#39;foo.js&amp;#39;) || find_file(&amp;#39;a&amp;#39;) || find_file(&amp;#39;b&amp;#39;);
// &amp;gt; found
// &amp;lt; [file &amp;#39;a&amp;#39;]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пояснение бы не было полным, если бы мы не сэмулировали это поведение через функции. Функция, которая эмулирует поведение &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, выглядит примерно так:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/* некая функция, которая оперирует над списком других функций
   более хитрым способом

   подготавливает их, прерывает, всё что угодно... */
function smart_and() {
    var fs = arguments, // массив отложенных функций
        flen = fs.length;
    for (var i = 0; i &amp;lt; flen; i++) {
        // если функция не сработала, остановить процесс
        if (!fs[i]()) return; 
    };
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;А функция, которая эмулирует поведение &lt;code&gt;||&lt;/code&gt;, выглядит примерно так:  &lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function smart_or() {
    var fs = arguments, // массив отложенных функций
        flen = fs.length,
        res = null;
    for (var i = 0; i &amp;lt; flen; i++) {
        // если функция сработала, вернуть результат
        if (res = fs[i]()) return res; 
    };
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Но если мы захотим использовать одну из них, то нам придётся сделать что-то трудночитаемое:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/* мы можем использовать smart_and таким вот образом, 
   но выглядит, честно говоря, хреново

   да, мы можем обпередаваться внутрь массивами имён файлов
   и обрабатывать их внутри, но тогда надо будет назвать её не 
   smart_and, а скорее smart_read_file */
smart_and(function() { return read_file(&amp;#39;a&amp;#39;) }, 
          function() { return read_file(&amp;#39;b&amp;#39;) },
          function() { return read_file(&amp;#39;foo.js&amp;#39;) }, 
          function() { return read_file(&amp;#39;c&amp;#39;) });
// &amp;gt; reading a
// &amp;gt; reading b
// &amp;gt; reading foo.js
// &amp;lt; undefined

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вся проблема здесь в подготовке массива отложенных функций. Как в JS можно вызвать функцию, передав ей параметр, запомнив его, но не выполнив её тела до тех пор, пока к ней не было прямого обращения, как это делают &lt;code&gt;||&lt;/code&gt;/&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;? Очень просто, она должна вернуть внутреннюю функцию, содержащую своё тело:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function my_func(arg) {
    return function() {
        console.log(arg);
    }
}
// &amp;gt; var f = my_func([&amp;#39;a&amp;#39;, 0]);
// &amp;gt; f
// &amp;lt; [function]
// &amp;gt; f(); // или напрямую: my_func([&amp;#39;a&amp;#39;, 0])();
// &amp;lt; [ &amp;#34;a&amp;#34;, 0 ]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Но это не самый приятный подход, оборачивать так каждую функцию быстро надоест и выведет вас из себя… Так вот же, наверху, семистрочное решение всех ваших проблем:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function _log(a) { console.log(a); }
_log = deferrable(_log);
// &amp;gt; _log(&amp;#39;Hi!&amp;#39;);
// &amp;lt; [function]
// &amp;gt; _log(&amp;#39;Mooo!&amp;#39;)();
// &amp;lt; Moo!

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вуаля:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// делаем `read_file` откладываемой
read_file = deferrable(read_file);

/* ... достаточно круто, ведь правда?

   обратите внимание, что `read_file(&amp;#39;c&amp;#39;)` не исполняется… */
smart_and(read_file(&amp;#39;a&amp;#39;), read_file(&amp;#39;b&amp;#39;), 
          read_file(&amp;#39;foo.js&amp;#39;), read_file(&amp;#39;c&amp;#39;));
// &amp;gt; reading a
// &amp;gt; reading b
// &amp;gt; reading foo.js
// &amp;lt; undefined

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Настало время, однако, представить, что наша задача сложнее и нам нужно, например, передать последний найденный файл в следующую функцию — операторы &lt;code&gt;||&lt;/code&gt;/&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; здесь уже совсем не подойдут. А то ведь не очень понятно, зачем мы углубились в эти странные эмуляции операторов, если всё можно сделать их посредством без лишнего кода. &lt;em&gt;Вовсе не всё, на что способны монады.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Хочу сразу заметить, что &lt;code&gt;deferrable&lt;/code&gt; — это только часть монады; другую часть, делающую вызовы отложенных функций в нужной последовательности и окружении, я рекомендую писать вам самим (выше это &lt;code&gt;smart_and&lt;/code&gt; и &lt;code&gt;smart_or&lt;/code&gt;). Да и &lt;code&gt;deferrable&lt;/code&gt; можно подправлять в зависимости от желаний. Просто по той причине, что лучше написать две семистрочные функции, работающие для вашей конкретной задачи (а в действительности, в подавляющем большинстве случаев, для одной задачи требуется только одна версия каждой из функций), чем добавлять целую библиотеку и/или наращивать универсальность.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;[В процессе обсуждения статьи, благодаря &lt;a href=&#34;http://habrahabr.ru/users/Pozadi/&#34;&gt;Pozadi&lt;/a&gt; и &lt;a href=&#34;http://habrahabr.ru/users/qmax&#34;&gt;qmax&lt;/a&gt; обнаружилось, что последние абзацы не ложились в канву статьи и выяснилась пара довольно важных вещей (см. &lt;a href=&#34;#q-5&#34;&gt;Q5&lt;/a&gt;, &lt;a href=&#34;#Q6&#34;&gt;Q6&lt;/a&gt;) поэтому часть ниже, до упоминания парсера — обновлена в соответствии с замечаниями]&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB.&lt;/strong&gt; Как выяснилось, функция &lt;code&gt;deferrable&lt;/code&gt; по концепции практически идентична введённой в ES5/JS1.8.5 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind&#34;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; и в варианте «по умолчанию» может быть заменена на неё почти безболезненно. Но на данный момент во всех текущих браузерах кроме FF она работает &lt;a href=&#34;http://jsperf.com/deferrable-test/2&#34;&gt;в разы медленнее&lt;/a&gt; &lt;code&gt;deferrable&lt;/code&gt;, &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Browser_compatibility&#34;&gt;поддерживается отнюдь не везде&lt;/a&gt; и &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Compatibility&#34;&gt;логически она сложнее&lt;/a&gt; — так что выбирать вам, статья скорее о методе, чем о конкретной функции.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;q-6-trg&#34;&gt;&lt;/a&gt;Что ж, теперь давайте напишем обещанную в начале статьи цепочку чтения файлов, в асинхронном варианте.&lt;/p&gt;

&lt;p&gt;Немного изменяем &lt;code&gt;deferrable&lt;/code&gt; (никто не говорил, что её нельзя менять, вы помните? :) ), чтобы он умел принимать callback в точке вызова и передавать его отложенной функции в виде последнего параметра:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var __s = Array.prototype.slice; 

function deferrable_as(ctx, f) {
    return function() {
        return (function(args) {
            return function(callback) { return f.apply(ctx, args.concat([callback])); };
        })(__s.call(arguments));
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Есть некий &lt;code&gt;fs.readFile&lt;/code&gt;, здесь мы его эмулируем через &lt;code&gt;setTimeout&lt;/code&gt;, просто чтобы сделать вид, что это асинхронность:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var fs = { &amp;#39;readFile&amp;#39;: function(name, callback) {
                setTimeout(function() {
                    var err = null;
                    if (name === &amp;#39;not_exist&amp;#39;) err = new Error(&amp;#39;Not exist&amp;#39;);
                    callback(err, name);
                }, 2000);
                return &amp;#39;unneeded&amp;#39;;
            } };

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Делаем связывание:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var read_file = deferrable_as(fs, fs.readFile); 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пишем функцию, которая поочерёдно вызывает отложенные функции через механизм коллбэков:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function successive_read(/*f...*/) {
    var as = __s.call(arguments),
        handle_err = as.slice(-1)[0];
    as[0](function(err, res) {
        if (err) { handle_err(err); return; };
        console.log(&amp;#39;Executed:&amp;#39;,res);
        successive_read.apply(null, as.slice(1));
    });
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вызываем:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
successive_read(read_file(&amp;#39;one&amp;#39;),
                read_file(&amp;#39;two&amp;#39;),
                read_file(&amp;#39;three&amp;#39;),
                read_file(&amp;#39;not_exist&amp;#39;),
                read_file(&amp;#39;four&amp;#39;),
                function(e) { console.error(&amp;#39;Error:&amp;#39;,e.message); });

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вывод:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Executed: one
Executed: two
Executed: three
Error: Not exist  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или вот, очень актуальная задача, генератор парсеров с правилами и блекджеком. Такой, чтобы можно было сказать…:&lt;/p&gt;

&lt;p&gt;(Я этим как раз сейчас занимаюсь, &lt;a href=&#34;https://github.com/shamansir/pegjs/tree/compact-result&#34;&gt;оптимизирую тут один генератор парсеров&lt;/a&gt;, который для сложных синтаксисов выдаёт парсеры на несколько мегабайт JS-кода; и в поисках красоты и справедливости, я и пришёл неожиданно к монадам, поэтому у меня есть готовый симпатичный пример) &lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// start = (&amp;#34;a&amp;#34;* / &amp;#34;b&amp;#34;) &amp;#34;c&amp;#34; (d:f+ { return d.join(&amp;#39;:&amp;#39;); })
// f = &amp;#34;YY&amp;#34; &amp;#34;d&amp;#34;+
// &amp;#34;aaacYYddYYdd&amp;#34; -&amp;gt; [ [&amp;#34;a&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;a&amp;#34;], &amp;#34;c&amp;#34;, &amp;#34;YY,d,d:YY,d,d&amp;#34; ]

start = function() { return sequence(
                        choice(
                            any(match(&amp;#34;a&amp;#34;)),
                            match(&amp;#34;b&amp;#34;)
                        ),
                        action(
                           label(&amp;#34;d&amp;#34;, some(rule_f)),
                           function() { return d.join(&amp;#39;:&amp;#39;); } 
                        )
                    )(); }

rule_f = function() { return sequence(
                               match(&amp;#34;YY&amp;#34;),
                               some(match(&amp;#34;d&amp;#34;))();

. . .

console.log(parse(&amp;#34;aaacYYddYYdd&amp;#34;));
// &amp;gt; [ [&amp;#34;a&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;a&amp;#34;], &amp;#34;c&amp;#34;, &amp;#34;YY,d,d:YY,d,d&amp;#34; ]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Воистину, монадическое торжество!)&lt;/p&gt;

&lt;p&gt;Такие функции вполне могут возвратить и пустые строки и &lt;code&gt;undefined&lt;/code&gt; (см. &lt;code&gt;action&lt;/code&gt;), которые будут являться вполне полноправным значением и оно не будет значить, что что-то упало, что-то не найдено: просто не совпал элемент, но парсинг-то продолжается.&lt;/p&gt;

&lt;p&gt;Ни одна из этих функций не должна выполняться по месту вызова, &lt;code&gt;choice&lt;/code&gt; может пропустить последний элемент, если совпал первый, должен иметь возможность остановиться в нужный момент и откатиться назад. В этом коде я использую тот же самый &lt;code&gt;deferrable&lt;/code&gt;, который я привёл выше, и это мой единственный молоток.&lt;/p&gt;

&lt;p&gt;Все &lt;a href=&#34;https://github.com/shamansir/pegjs/blob/compact-result/test/temp.js&#34;&gt;используемые функции парсера&lt;/a&gt; не сильно сложнее по коду, чем примеры выше, пара-тройка строк на каждую простую, пять-десять на каждую сложную. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sequence&lt;/code&gt;, например, подобно &lt;code&gt;smart_or&lt;/code&gt; выше, собирает результаты совпавших функций в массив и возвращает его, благодаря чему переменная результата парсинга (вот этот сложносоставной массив) нигде не определена и блуждает по парсеру до окончания его действия и обретает однозначную сущность только по возвращению из функции &lt;code&gt;parse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Плюс, эксепшны. Тут они подходят как нельзя кстати. Они обычно занимают кучу кода, а мне важен каждый байт, поэтому я тоже обернул их в функции:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// сообщить об ошибке
function failed(expected, found) {
    failures.push(expected); // да, failures объявлен извне,
                             // мне важны простота и размер кода 
    throw new MatchFailed(expected, found);
}

// подавить ошибку при вызове функции и известить о ней коллбэк, 
// если таковой указан
function safe(f, cb) {
    try { return f();
    } catch(e) {
        if (e instanceof MatchFailed) {
            if (cb) cb(e);
        } else { throw e; }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Именно функция &lt;code&gt;safe&lt;/code&gt; подавляет ошибки, брошенные при несовпадении, например, от &lt;code&gt;match&lt;/code&gt;, перехватывая их, например, для &lt;code&gt;choice&lt;/code&gt;, который при неудаче просто переходит к следующему варианту.  &lt;/p&gt;

&lt;p&gt;Минус такого подхода в том, что эта самая блуждающая переменная результата при выбросе исключения теряется. Вернее, каждый раз перед потенциальной неудачей, её нужно сохранять (например, передавать в &lt;code&gt;failed&lt;/code&gt;). То есть, если вы собираетесь использовать сгенерированный парсер чтобы подсвечивать текст в редакторе (например, маркдаун) на лету, то вы могли бы как раз и опираться на этот эксепшн для сборки табика &lt;em&gt;code completion&lt;/em&gt;. Но предыдущий-то код тоже надо подсвечивать, а прошлый результат парсинга мог и устареть. &lt;/p&gt;

&lt;p&gt;В общем, с ошибками ситуации изредка и правда могут быть не однозначными: из-за сомнительности возвращаемых типов, из-за сложных структур, которые нужно восстановить при ошибке и т.п. поэтому, в этих редких случаях, приемлемо по-хаскельному примешивать к возвращаемым значениям функций код или инстанс ошибки, например. Тут и понадобится монада &lt;em&gt;MayBe&lt;/em&gt; и всяческие &lt;code&gt;bind&lt;/code&gt;/&lt;code&gt;unit&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Но вы ведь можете просто чётко знать, чего вы хотите достичь и что происходит в вашем коде и свободно оперировать внешними переменными. Так что, учтите — перебор действий с примешиваниями в JS — &lt;em&gt;это значительная жертва читабельности и простоте кода&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Не замыкайтесь на контекст. Пользуйтесь данной вам свободой. Стремитесь к простоте. Хаскелю — Хаскелево.&lt;/p&gt;

&lt;p&gt;Позже, когда закончу, я расскажу про этот парсерогенератор подробнее, а сейчас давно уже пора закругляться, поэтому эпилог:&lt;/p&gt;
&lt;h3 id=&#34;эпилог&#34;&gt;&lt;a href=&#34;#эпилог&#34; title=&#34;Эпилог&#34;&gt;Эпилог&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ну вот и всё :) Надеюсь, было понятно. &lt;strong&gt;Будьте проще!&lt;/strong&gt; Чмоки-чмоки. &lt;code&gt;xxxxo&lt;/code&gt;. また近いうちに 👻&lt;/p&gt;

&lt;hr&gt;

&lt;hr&gt;
&lt;h3 id=&#34;upd.-qampa&#34;&gt;&lt;a href=&#34;#upd.-qampa&#34; title=&#34;(Upd.) Q&amp;amp;A&#34;&gt;(Upd.) Q&amp;amp;A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Логично, что к статье появились вопросы. Ответы, думаю, тоже должны быть частью статьи (она ведь худенькая совсем, разве нет? :) )&lt;/p&gt;

&lt;p&gt;&lt;center&gt;===[ &lt;a href=&#34;#q-1&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;#q-2&#34;&gt;[2]&lt;/a&gt; &lt;a href=&#34;#q-3&#34;&gt;[3]&lt;/a&gt; &lt;a href=&#34;#q-4&#34;&gt;[4]&lt;/a&gt; &lt;a href=&#34;#q-5&#34;&gt;[5]&lt;/a&gt; &lt;a href=&#34;#q-6&#34;&gt;[6]&lt;/a&gt; ]===&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;q-1&#34;&gt;&lt;/a&gt;1. Мистер &lt;a href=&#34;http://habrahabr.ru/users/Silver_Clash/&#34;&gt;Silver_Clash&lt;/a&gt; спрашивает:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Можно подробнее расписать что происходит в семистрочной функции и зачем там столько return?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Можно разбить её на две и тогда, наверное, будет очевиднее что там происходит:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// связывает функцию с аргументами и возвращает &amp;#34;отложенный вариант&amp;#34;,
// то есть можно вызвать:
//
// function a(arg) {console.log(&amp;#39;a&amp;#39;, arg); } 
// bind(a, 15); =&amp;gt; функция в &amp;#34;замороженном&amp;#34;, навсегда связанном с переданными аргументами, состоянии
// bind(a, 15)(); =&amp;gt; a 15, &amp;#34;замороженный&amp;#34; вариант вызван
//
// но, используй мы только её одну, пришлось бы вызывать её каждый раз так:
// smart_or(bind(read_file, [&amp;#39;one&amp;#39;]), bind(read_file, [&amp;#39;two&amp;#39;]), bind(read_file, [&amp;#39;three&amp;#39;]));
function bind(f, args) {
    return function() {
      return f.apply(null, args);
    };
}
// даёт функции свойство всегда запоминать c какими аргументами она вызвана 
// и возвращать отложенный вариант
//
// то есть она даёт возможность в любом месте писать `a(15)` и получать &amp;#34;замороженный&amp;#34; вариант, 
// который можно будет вызвать через a(15)(), таким образом избавляя от необходимости
// повсеместно использовать `bind`
function wrap(f) {
    return function() { // для этого она возвращает функцию, которая при вызове запомнит 
                      // переданные ей аргументы и вернёт &amp;#34;отложенный&amp;#34; вариант
        return bind(f, arguments);
    };
}

// bind + wrap =&amp;gt; просто сумма этих двух функций
function deferrable(f) { // wrap
    return function() { // fn-1
        return (function(f, args) { // fn-2, bind
            return function() { return f.apply(null, args); };
        })(f, arguments); // сразу выполняющаяся обёртка, которая на месте создаёт ссылку 
                      // на аргументы функции fn-1 в функции fn-2 
                      // (чтобы они не запутались, где чьи аргументы) 
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И, кстати, этот bind — «сосед» того bind, который упоминается в этой статье и в статьях про монады по ссылкам. Но там аргументы примешиваются через контекст вызова — они приходят из возвращаемых значений других функций, просочившись через них все. В моём же случае просто делается «pin» — «я собираюсь вызвать эту функцию именно с этими аргументами, запомни и верни то, что я смогу вызвать потом».&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;q-2&#34;&gt;&lt;/a&gt;2. Некто &lt;a href=&#34;http://habrahabr.ru/users/ZokotuhaFly&#34;&gt;zokotuhaFly&lt;/a&gt; интересуется:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Наверняка использующие эту вашу семистрочную функцию в ООП или сложных замыканиях захотят привязки к контексту, как решить эту проблему, ведь она применяется к &lt;code&gt;null&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Проблема решается легко, вариант для объектов/контекстов:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function o_deferrable(o, f) { // выберите название поприятнее
    return function() {
        return (function(f, o, args) { // f и o можно не передавать
            return function() { return f.apply(o, args); };
        })(f, o, arguments);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Использование: &lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var my_obj = { test: function(a) { 
                        console.log(this); console.log(a); 
                     } };
var obj_test = o_deferrable(my_obj, my_obj.test);
// &amp;gt; obj_test(12)();
// &amp;lt; [object my_obj] 12

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или вот так:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var my_obj = {}; // объект должен существовать на момент вызова `o_deferrable`
my_obj.test = o_deferrable(my_obj, function(a) { 
                        console.log(this); console.log(a); 
              }); // ну, или через прототипы
// &amp;gt; my_obj.test(12)();
// &amp;lt; [object my_obj] 12

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;q-3&#34;&gt;&lt;/a&gt;3. Сэр &lt;a href=&#34;http://habrahabr.ru/users/klvov/&#34;&gt;klvov&lt;/a&gt; задумывается:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Мне одному кажется, что автор изобрел &lt;a href=&#34;&#34;&gt;Y-комбинатор&lt;/a&gt; в виде функции deferrable?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Надеюсь, одному — код визуально схож, но по факту это немного разные вещи. Применение комбинатора ограничено более узким спектром задач. Вообще, это  это трюк, чтобы делать рекурсивные вычисления не используя имён функций (через лямбды), получая ссылку на функцию от предыдущего, внешнего, вызова. Цели об отложенных вызовах здесь нет, хотя функция-рекурсер изначально (один раз) откладывается, чтобы использоваться в следующих вызовах, но &lt;em&gt;не привязывается к аргументам&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Кстати, тот самый парень, который переводит монады в JS, &lt;a href=&#34;http://blog.jcoglan.com/2008/01/10/deriving-the-y-combinator/&#34;&gt;тоже писал&lt;/a&gt; трансляцию/разъяснение Y-комбинатора. (&lt;a href=&#34;http://thraxil.org/users/anders/posts/2008/09/15/My-Own-Javascript-Y-Combinator/&#34;&gt;+ ещё одна статья&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Пусть здесь сразу будет пример, чтобы каждый мог оценить для себя, тем более это немного в тему статьи, да и комбинатор — это хитрость посложнее чем deferrable):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var Y = function(f) {
    return (function(g) {
        return g(g);
    })(function(h) {
        return function() {
            return f(h(h)).apply(null, arguments);
        };
    });
};

var factorial = Y(function(recurse) {
    return function(x) {
        console.log(&amp;#39;called with&amp;#39;,x);
        return x == 0 ? 1 : x * recurse(x-1);
    };
});
// &amp;gt; factorial(5);
// &amp;lt; called with 5
// &amp;lt; called with 4
// &amp;lt; called with 3
// &amp;lt; called with 2
// &amp;lt; called with 1
// &amp;lt; 120

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;хотя через &lt;code&gt;deferrable&lt;/code&gt; можно эмулировать комбинатор, хоть и чуть более криво.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var fc = function(f, x) {
   return x == 0 ? 1 : x * f(f, x-1)();
} 
fc = deferrable(fc);
// &amp;gt; fc(fc,5)();
// &amp;lt; 120;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Хм&amp;hellip;&lt;/p&gt;

&lt;p&gt;Ну а за сам комбинатор мы должны благодарить того самого Хаскеля, в честь которого, собственно, назван язык. Это так, для тех кто вдруг не знает.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;q-4&#34;&gt;&lt;/a&gt;4. Господин &lt;a href=&#34;http://habrahabr.ru/users/grasshoppergn/&#34;&gt;grasshoppergn&lt;/a&gt; замечает:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; а вообще &lt;code&gt;deferrable&lt;/code&gt; можно даже еще сократить, потому что есть же &lt;code&gt;Function.prototype.bind&lt;/code&gt; :)&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function deferrable(f) {
    return function() {
        Array.prototype.unshift.call(arguments, null);
        return f.bind.apply(f, arguments); 
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;Не стóит&lt;/strong&gt;&lt;/em&gt;, такой вариант работает &lt;a href=&#34;http://jsperf.com/deferrable-test&#34;&gt;в разы медленнее&lt;/a&gt;, да и &lt;code&gt;bind&lt;/code&gt; поддерживается не во всех браузерах.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;q-5&#34;&gt;&lt;/a&gt;5. Дон &lt;a href=&#34;http://habrahabr.ru/users/Pozadi/&#34;&gt;Pozadi&lt;/a&gt; замечает:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Вообще-то функция &lt;code&gt;deferrable&lt;/code&gt; идентична &lt;code&gt;Function.prototype.bind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Да, я не знал про эту фунцию и не заметил этого, пока не прочитал про неё. Но, её &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Compatibility&#34;&gt;псевдокод значительно больше&lt;/a&gt; (большей частью поскольку она нативная, чтобы уберечь программиста от возможных ошибок), и на данный момент она &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Browser_compatibility&#34;&gt;не поддерживается во многих браузерах&lt;/a&gt; и в текущем состоянии в &lt;em&gt;Chrome&lt;/em&gt; она работает &lt;a href=&#34;http://jsperf.com/deferrable-test/2&#34;&gt;в разы медленнее&lt;/a&gt; (&lt;em&gt;в разы!&lt;/em&gt;, но в FF она конечно выигрывает).&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;q-6&#34;&gt;&lt;/a&gt;6. Мёсьё &lt;a href=&#34;http://habrahabr.ru/users/qmax/&#34;&gt;qmax&lt;/a&gt; и &lt;a href=&#34;http://habrahabr.ru/users/Pozadi/&#34;&gt;Pozadi&lt;/a&gt; &lt;a href=&#34;http://habrahabr.ru/blogs/javascript/138773/#comment_4637222&#34;&gt;задают&lt;/a&gt; самый важный вопрос, который привёл нас к полезной дискуссии (вопрос перефразирован автором статьи):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Я ожидал увидеть в статье пример из начала с использованием семистрочной функции и &lt;em&gt;настоящих&lt;/em&gt; нативных асинхронных функций (вроде &lt;code&gt;fs.readFile&lt;/code&gt;), собственно ради только этого её и читал, но вы так ни одного и не привели.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;note-2-src&#34;&gt;&lt;/a&gt;&lt;strong&gt;A:&lt;/strong&gt; Ваша правда, простите меня, исправляюсь&lt;sup&gt;&lt;a href=&#34;#note-2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;Тру-нативно-асинхронная функция — это, например &lt;code&gt;fs.readFile&lt;/code&gt; или &lt;code&gt;XMLHttpRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Вот &lt;a href=&#34;http://jsfiddle.net/shaman_sir/NwSgE/1/&#34;&gt;пример на jsfiddle&lt;/a&gt;. Я поменял пример &lt;code&gt;piped&lt;/code&gt; в статье на ответ на этот вопрос, &lt;a href=&#34;#q-6-trg&#34;&gt;прошу сюда&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a name=&#34;note-1&#34;&gt;&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;#note-1-src&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Как меня верно &lt;a href=&#34;http://habrahabr.ru/blogs/javascript/138773/#comment_4636020&#34;&gt;поправили&lt;/a&gt;, на самом деле это ложь. &lt;code&gt;more&lt;/code&gt; будет вызван, операции по пайпу выполняются параллельно, и это &lt;a href=&#34;http://okmij.org/ftp/Computation/monadic-shell.html#Parallel%20vs.%20sequential%20execution%20of%20monadic%20commands&#34;&gt;единственное отличие&lt;/a&gt; шелловских монад от Хаскелевской имплементации, и у них были личные причины на это. Эта ложь в жертву науке: лучшего, но верного, примера я пока не придумал — надеюсь, вы меня простите. Или представьте, что всё это происходит в Perl. А &lt;em&gt;та самая&lt;/em&gt; функция никак не ограничивает вас в способе организации этих процессов, вы можете вызывать отложенную функцию несколько раз и просить новую часть результата (типа &lt;code&gt;yield&lt;/code&gt;) и сделать почти что вот такое же параллельное выполнение.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;note-2&#34;&gt;&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;#note-2-src&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt; На самом деле я (автор) &lt;em&gt;очень&lt;/em&gt; долго настаивал на своём и делал вид, что не понимаю вопроса, выигрывая время на обдумывание, зато вопрос получился достаточно чётким и выяснилась пара провисов в статье, благодарю комментаторов за настойчивость.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Monkey-Patching или Расширение Встроенных Типов: религия или осознанный выбор?</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/monkey-patching-or-extending-native-types-religious-or-not/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/monkey-patching-or-extending-native-types-religious-or-not/</id>
                <updated>2011-11-16T00:46:00Z</updated>
                
                <summary type="html">Прошу прощения за «жёлтый» заголовок, но надо же как-то привлечь.</summary>
                <content type="html">&lt;p&gt;Прошу прощения за «жёлтый» заголовок, но надо же как-то привлечь.&lt;/p&gt;

&lt;p&gt;В &lt;a href=&#34;http://habrahabr.ru/blogs/javascript/132654/&#34;&gt;статье о moment.js&lt;/a&gt;, в первой же ветке, &lt;a href=&#34;http://habrahabr.ru/blogs/javascript/132654/#comment_4403094&#34;&gt;разгорелся горячий спор&lt;/a&gt;, в котором участвовали даже мэтры JS на хабре. Это очень странно для меня, мне всё казалось таким очевидным, а уж тем более для мэтров.&lt;/p&gt;

&lt;p&gt;И я считаю, это достаточно серьёзный спор для того, чтобы у него была отдельная статья. &lt;em&gt;Очень важно&lt;/em&gt; с этим моментом наконец разобраться. &lt;sub&gt;Если мы придём к обратному заявленому в статье решению – это, в конце концов, тоже будет важный ответ.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Так расширять &lt;em&gt;встроенные&lt;/em&gt; типы (&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &amp;hellip;) в JS или не расширять?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Однозначно и безоговорочно нет&lt;/strong&gt;. Под катом – нерелигиозные аргументы, пояснения, когда всё-таки можно, и дискуссия в комментариях.&lt;/p&gt;

&lt;hr&gt;
&lt;h3 id=&#34;исторический-взгляд&#34;&gt;&lt;a href=&#34;#исторический-взгляд&#34; title=&#34;Исторический взгляд&#34;&gt;Исторический взгляд&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Что мы получим, если рассмотрим исторический процесс становления JavaScript? (это мой вольный взгляд по памяти на историю JS, вполне возможно в нём есть реальные отклонения от настоящего).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Появляется JavaScript и в нём прототипное наследование. И встроенные типы в нём тоже построены на прототипном наследовании. И ещё в нём есть неудобные операции с DOM. Это безэмоциальные факты.&lt;/li&gt;
&lt;li&gt;JS используют для мелких скриптов, в которых не задумываются о наследовании и никаких вопросов соответственно не стоит&lt;/li&gt;
&lt;li&gt;Браузеры развиваются, постепенно JS всё плотнее входит в веб-разработку и становится нужным писать на JavaScript более крупные вещи, чем раньше. Динамические языки ещё не так популярны, популярны: C++, PHP, Java&lt;/li&gt;
&lt;li&gt;Из-за необходимости написания крупных вещей (и неудобства DOM в JS) появляются библиотеки с функциями-помощниками. Одна из них - Prototype.js. Поскольку о наследовании вопрос ещё не стоял и не задавался, авторы библиотеки по привычке подсовывают нужные методы в прототипы встроенных объектов и чувствуют себя совершенно спокойно. И разработчики тоже. Где-то в это же время разработчики начинают хотеть классы в JS (и ваш покорный слуга из их числа) и, откопав где-то копипасту с функцией &lt;code&gt;extend&lt;/code&gt; или чем-то подобным, начинают её активно использовать. Прототипы это сложно, а классы – это знакомо и проверено временем. Так что это тоже происходит довольно безболезненно, поскольку классическое ООП нормально ложится на прототипное наследование&lt;/li&gt;
&lt;li&gt;Незаметное событие: Те, кто использует Prototype.js в крупных проектах неожиданно замечают вкусный на вид оператор for-in, прикручивают его, но чуть позже начинают обнаруживать странные ошибки при проходах по массивам и объектам&lt;/li&gt;
&lt;li&gt;Вина за эти ошибки интуитивно падает на JavaScript, эта информация расходится по интернетам, цикл for-in становится нерекомендуемым, все спокойны и рады. На фоне появляется Ajax, после нескольких попыток для него появляется работающая на тот момент кроссбраузерная копипаста, все вроде тоже довольны, но всё же как-то не хватает стандартизации.&lt;/li&gt;
&lt;li&gt;Неожиданно появляется чуть больше людей, которые разобрались в прототипном наследовании и понимают, что то что происходит – не очень хорошо. Появляется и тут же популяризуется jQuery (к коду которого у меня никаких претензий, кроме нынешнего веса библиотеки - но так тоже сложилось исторически) (с удобным методом ajax, btw)&lt;/li&gt;
&lt;li&gt;Адепты прототипного наследования выходят из нор и пытаются раскрыть другим программистам глаза на возможности, которые уже давно им доступны, но они их упускают. Библиотеки ещё весят мало, поэтому их иногда смешивают. Где-то здесь появляется конфликт JQuery и Prototype.js, выросший из &lt;a href=&#34;http://ejohn.org/blog/getelementsbyclassname-pre-prototype-16/&#34;&gt;проблемы с document.getElementByClassName&lt;/a&gt;, причина которой в расширении встроенного типа&lt;/li&gt;
&lt;li&gt;Время идёт, разобравшихся в прототипном наследовании всё больше. С другой стороны подступает функциональщина, которой тоже удобно писать на JS, используя созданные in-the-place объекты&lt;/li&gt;
&lt;li&gt;Появляется node.js, в котором отказываются от классического ООП и используют паттерн &amp;ldquo;модуль&amp;rdquo; из CommonJS, где отдельный файл содержит неймспейс с функциональщиной (или, нежелательно, ООП) внутри. Это шаг к отказу от ООП&lt;/li&gt;
&lt;li&gt;Войны ООП vs прототипы/функциональщина&lt;/li&gt;
&lt;li&gt;Сейчас мы здесь&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Видно, что ошибки научили ещё не всех.&lt;/p&gt;
&lt;h3 id=&#34;логический-взгляд&#34;&gt;&lt;a href=&#34;#логический-взгляд&#34; title=&#34;Логический взгляд&#34;&gt;Логический взгляд&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Почему в JS не рекомендуется использовать оператор &lt;code&gt;for-in&lt;/code&gt;?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Неправильный ответ:&lt;/strong&gt; потому что в перечисление могут попасть ненужные свойства и методы объекта&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Сомнительный ответ:&lt;/strong&gt; не использовать для массивов, потому что для массивов не гарантировано сохранение порядка перебора (это правда, но это провис языка и/или движков браузеров и сейчас это меняется)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Сомнительный ответ:&lt;/strong&gt; в массив можно записать свойство не по индексу через &lt;code&gt;a[&amp;quot;woo&amp;quot;] = 23;&lt;/code&gt; и тогда оно попадёт в цикл. Да, можно, но зачем осознанно так делать?&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Правильный ответ:&lt;/strong&gt; в перечисление могут попасть все не-&lt;code&gt;enumerable&lt;/code&gt; свойства объекта, а в том числе все свойства из цепочки прототипов. Если у объекта длинная цепочка прототипов, то это будет происходить долго из-за её перебора. Для отделения свойств на верхнем уровне цепочки можно использовать &lt;code&gt;hasOwnProperty&lt;/code&gt;, для определения, принадлежит ли свойство объекту.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Да, но что если у нас есть простой объект без сложной цепочки, созданный прямо на месте? Вот так: &lt;code&gt;{&amp;#39;a&amp;#39;: 2, &amp;#39;b&amp;#39;: 3}&lt;/code&gt;? Тоже нельзя использовать &lt;code&gt;for-in&lt;/code&gt;?&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Неправильный ответ:&lt;/strong&gt; Да, нельзя. Это не рекомендуется.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Сомнительный ответ:&lt;/strong&gt; Эммм&amp;hellip;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Почти правильный ответ:&lt;/strong&gt; Можно, он для этого и был прездназначен. &lt;em&gt;Но есть одно «но».&lt;/em&gt; Программисты библиотеки, которую ты используешь, подсовывают в прототипы встроенных объектов свои методы и естественно не заботятся об &lt;code&gt;enumerable: false&lt;/code&gt;. И эти методы могут попасть в перечисление. Безопаснее этим не пользоваться.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Эй, а почему вдруг безопаснее отгородить себя? Значит так и будет продолжаться? Это разве решение проблемы? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Правильный ответ:&lt;/strong&gt; Давно пора образумить этих программистов.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;практический-взгляд&#34;&gt;&lt;a href=&#34;#практический-взгляд&#34; title=&#34;Практический взгляд&#34;&gt;Практический взгляд&lt;/a&gt;&lt;/h3&gt;&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var a = [12, 14, 13, 6];
for (var i in a) { console.log(i, a[i]); }
&amp;gt; 0 12
&amp;gt; 1 14
&amp;gt; 2 13
&amp;gt; 3 6

Array.prototype.foo = function() { console.log(&amp;#39;bar&amp;#39;); }
for (var i in a) { console.log(i, a[i]); }
&amp;gt; 0 12
&amp;gt; 1 14
&amp;gt; 2 13
&amp;gt; 3 6
&amp;gt; foo bar

for (var a in { &amp;#39;a&amp;#39;: 2, &amp;#39;b&amp;#39;: 3 }) { console.log(a); }
&amp;gt; a
&amp;gt; b
Object.prototype.foo = function() { };
for (var a in { &amp;#39;a&amp;#39;: 2, &amp;#39;b&amp;#39;: 3 }) { console.log(a); }
&amp;gt; a
&amp;gt; b
&amp;gt; foo

Array.prototype.forEach = function(...) { ... };
var matches = &amp;#39;test&amp;#39;.match(/t/);
console.log( matches instanceof Array ); 
&amp;gt; true
for (var i in matches) console.log(i, matches[i]);
&amp;gt; 0 t
&amp;gt; index 0
&amp;gt; input test
&amp;gt; forEach function() { }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(за обнаружение последнего примера спасибо &lt;a href=&#34;http://habrahabr.ru/users/TheShock/&#34;&gt;TheShock&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Где-то здесь появляется конфликт JQuery и Prototype.js, выросший из &lt;a href=&#34;http://ejohn.org/blog/getelementsbyclassname-pre-prototype-16/&#34;&gt;проблемы с document.getElementByClassName&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/JavaScript-Garden/#object.prototype&#34;&gt;JavaScript Гарден, глава «Великий прототип»&lt;/a&gt;, последний раздел «Расширение встроенных прототипов». Мой там только перевод, этот документ писали опытные JS-программисты (хотя и там есть косяки. но не в этом абзаце).&lt;/p&gt;

&lt;p&gt;Вы уверены, что в соседней библиотеке не захотят переопределить метод и назвать его также? И тогда будет невозможно пользоваться ни вашей библиотекой, ни соседней. Но случаи смешанных библиотек случаются всё реже. Хуже, если этот метод войдёт в следующую спецификацию и будет обладать другим поведением – вы отрежете его пользователям вашей библиотеки.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;По-моему как раз «соответствует всей идеологии JS» и «все JS фреймворки» – это религия. В языке есть дырки и одна из них – то, что можно расширять встроенные типы.&lt;/p&gt;

&lt;p&gt;JQuery пользуется расширением прототипа собственного объекта – это вполне себе ок и как раз соответствует идеологии. А мы говорим о расширении встроенных типов — это две разные вещи. Встроенные типы по правилам any-типизированных языков должны быть закрыты для расширения. В JS у вас есть возможность их расширить и это сработало как неизвестное медленно-текущее вирусное заболевание. Заразились одни, не ощутили последствий, а через месяцы оказались заражены все вокруг.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;разумный-взгляд&#34;&gt;&lt;a href=&#34;#разумный-взгляд&#34; title=&#34;Разумный взгляд&#34;&gt;Разумный взгляд&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вы помните чем кончается переопределение операторов в C++? Вы знаете, что не можете расширить встроенные классы Java? Вы пытаетесь отнаследоваться от &lt;code&gt;str&lt;/code&gt; в Python? &lt;strong&gt;Нет&lt;/strong&gt;. Так почему же вы это делаете в JS?&lt;/p&gt;

&lt;p&gt;Сейчас мы живём в эру быстро сменяющихся версий браузеров, избавления от старых, и перехода на HTML5, так может и в JS стоит забыть некоторые первобытные страхи?&lt;/p&gt;
&lt;h3 id=&#34;когда-можно&#34;&gt;&lt;a href=&#34;#когда-можно&#34; title=&#34;Когда можно&#34;&gt;Когда можно&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Если вам нужно в своём личном скрипте обеспечить наличие метода, который будет в будущем имплементирован. При этом нужно, чтобы интерфейс который он возвращает также соответствовал спецификации&lt;/li&gt;
&lt;li&gt;Всё&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;альтернативы&#34;&gt;&lt;a href=&#34;#альтернативы&#34; title=&#34;Альтернативы&#34;&gt;Альтернативы&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Да какие хотите (ок, все приведённые функции – в видимости какого-то своего объекта, не в глобальной):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function trim(str) { return str.replace(...); } trim(&amp;quot;   string to trim   &amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function trim() { return this.replace(...); } trim.call(&amp;quot;   string to trim   &amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utils.trim(&amp;quot;   string to trim   &amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var a = new ExtendedString(&amp;quot;   string to trim   &amp;quot;); a.trim();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.each([ 1, 2, 6, 6], …);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;статьи-по-теме&#34;&gt;&lt;a href=&#34;#статьи-по-теме&#34; title=&#34;Статьи по теме&#34;&gt;Статьи по теме&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/&#34;&gt;Extending built-in native objects. Evil or not?&lt;/a&gt; by &lt;a href=&#34;http://perfectionkills.com&#34;&gt;kangax&lt;/a&gt; (спасибо &lt;a href=&#34;http://habrahabr.ru/users/smashercosmo/&#34;&gt;smashercosmo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perfectionkills.com/whats-wrong-with-extending-the-dom/&#34;&gt;What&amp;#39;s wrong with extending DOM?&lt;/a&gt; by &lt;a href=&#34;http://perfectionkills.com&#34;&gt;kangax&lt;/a&gt; (спасибо &lt;a href=&#34;http://habrahabr.ru/users/smashercosmo/&#34;&gt;smashercosmo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/500504/javascript-for-in-with-arrays&#34;&gt;Javascript &lt;code&gt;for...in&lt;/code&gt; with arrays&lt;/a&gt; @ &lt;a href=&#34;http://stackoverflow.com&#34;&gt;SO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/&#34;&gt;Exploring JavaScript &lt;code&gt;for...in&lt;/code&gt; loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;тесты&#34;&gt;&lt;a href=&#34;#тесты&#34; title=&#34;Тесты&#34;&gt;Тесты&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://habrahabr.ru/blogs/javascript/132690/#comment_4405362&#34;&gt;В этом комментарии&lt;/a&gt; &lt;a href=&#34;http://habrahabr.ru/users/Zibx/&#34;&gt;Zibx&lt;/a&gt; провёл тест по скорости двух способов: через расширение прототипа и отдельную функцию и &lt;em&gt;работа через прототип чуть не показалась нам действительно значительно быстрее&lt;/em&gt;. Но, к счастью, &lt;a href=&#34;http://habrahabr.ru/users/Markel/&#34;&gt;Markel&lt;/a&gt; &lt;a href=&#34;http://habrahabr.ru/blogs/javascript/132690/#comment_4408606&#34;&gt;&lt;em&gt;опроверг&lt;/em&gt;&lt;/a&gt; этот факт, создав &lt;a href=&#34;http://jsperf.com/132690&#34;&gt;соответствующий тест&lt;/a&gt; на jsperf.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Доклад «Правильный JavaScript» на WebStandardDays @ Киев</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/javascript-the-right-one-announce/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/javascript-the-right-one-announce/</id>
                <updated>2011-10-07T00:46:00Z</updated>
                
                <summary type="html">Буду делать доклад под названием «Правильный JavaScript» &lt;a href=&#34;http://webstandardsdays.ru/2011/10/22/&#34;&gt;22 Октября&lt;/a&gt; на &lt;a href=&#34;http://webstandards&#34;&gt;WebStandardsDays&lt;/a&gt; в Киеве.</summary>
                <content type="html">&lt;p&gt;Буду делать доклад под названием «Правильный JavaScript» &lt;a href=&#34;http://webstandardsdays.ru/2011/10/22/&#34;&gt;22 Октября&lt;/a&gt; на &lt;a href=&#34;http://webstandards&#34;&gt;WebStandardsDays&lt;/a&gt; в Киеве.&lt;/p&gt;

&lt;p&gt;Приходите. Вот о чём я буду рассказывать:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;О том, что применять ООП в JavaScript - не всегда лучшее решение;&lt;/li&gt;
&lt;li&gt;О прототипном наследовании и о том, как с ним совладать;&lt;/li&gt;
&lt;li&gt;О функциональном и модульных подходах и о том, как их использовать: вместе и по отдельности;&lt;/li&gt;
&lt;li&gt;О полезных инновациях, происходящих в JavaScript;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ввиду того, что на доклад у меня будет полчаса и я хочу подробно разобрать данные темы, думаю четырёх пунктов вполне достаточно.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/javascript-the-right-one-announce/js-the-right-one-no-bg.png&#34; width=&#34;400px&#34; alt=&#34;Будь спартанцем!&#34; text=&#34;Будь спартанцем!&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt; SJ R.I.P., You were geniously cool.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>HTML5 — не язык разметки, а мессиво</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/html5-not-a-markup-language-but-a-mess/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/html5-not-a-markup-language-but-a-mess/</id>
                <updated>2011-08-16T00:46:00Z</updated>
                
                <summary type="html">Позволю себе, первую в блоге, теоретическую статью. Если вы легко возбудимы, не обращайте на неё внимания. И более того, эта статья — NSFW.</summary>
                <content type="html">&lt;p&gt;Позволю себе, первую в блоге, теоретическую статью. Если вы легко возбудимы, не обращайте на неё внимания. И более того, эта статья — NSFW.&lt;/p&gt;
&lt;h3 id=&#34;вступление&#34;&gt;&lt;a href=&#34;#вступление&#34; title=&#34;Вступление&#34;&gt;Вступление&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Когда черновик спецификации HTML5 только появился, многие были восхищены. Многие ворчали. Так часто бывает, когда приходит что-то новое. Появляются восхищённые и негативные статьи, практически в равном количестве. Лично я почти никак к этому не относился и скорее заинтересованно ждал, что будет потом, поскольку с чем-то новым и непростым так происходит всегда — всегда есть почти равнозначные плюсы и минусы. Но потом, со временем, что-то превалирует. Плюсы и минусы были в спецификации HTML4. И в спецификации XHTML. Но со временем превалировали плюсы, вернее пользователи их просто душевно приняли (за безысходностью?).&lt;/p&gt;

&lt;p&gt;Canvas/WebGL, LocalStorage, встроенная поддержка видео, избавление от устаревших тэгов — очевидные плюсы, с этим глупо спорить. Но только сейчас, совершенно неожиданно для себя, я осознал, что эти &lt;em&gt;нововведения&lt;/em&gt; сомнительны просто потому, что действительно &lt;strong&gt;введены куда-то не туда&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/inserted-not-there.png&#34; alt=&#34;Inserted not there&#34;&gt;&lt;/p&gt;

&lt;p&gt;(Обращу ваше внимание: я считаю, что по отдельности эти возможности просто прекрасны)&lt;/p&gt;

&lt;p&gt;Факт этой хм&amp;hellip; &lt;em&gt;диспозиции&lt;/em&gt; замечают давно, в конце статьи я приведу ссылки на самые популярные статьи по этой теме (тысячи их). Вот &lt;a href=&#34;http://habrahabr.ru/blogs/webdev/125990/&#34;&gt;эта&lt;/a&gt;, например, и вдохновила меня на написание данной. Ну, приведу те, которые найду — это будет не полный список: ведь хуже всего прочего, этот факт имел место и раньше и замечали его раньше тоже.&lt;/p&gt;

&lt;p&gt;Вообще, все наблюдения по этому поводу довольно банальны и скорее относятся к категории троллинга, но я вдруг подумал — да, проблема есть ­— &lt;em&gt;а есть ли решение&lt;/em&gt;? Пусть просто пофантазировать, ведь можно пофантазировать иногда. Революции действительно &lt;a href=&#34;http://habrahabr.ru/blogs/webdev/125990/#comment_4153164&#34;&gt;не будет&lt;/a&gt;, но ведь мечты никто не отменял.&lt;/p&gt;
&lt;h3 id=&#34;всё-же-почему-не-туда&#34;&gt;&lt;a href=&#34;#всё-же-почему-не-туда&#34; title=&#34;Всё же, почему «не туда»?&#34;&gt;Всё же, почему «не туда»?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Не буду разбирать по косточкам историю HTML: старожилы сети помнят как всё было, а молодые не раз про это читали.&lt;/p&gt;

&lt;p&gt;Самое главное — &lt;em&gt;вначале была веб-страница&lt;/em&gt;. Думаю, она задумывалась как &lt;em&gt;документ + немного интерактива&lt;/em&gt;. Для навигации придумали понятие &lt;em&gt;ссылки&lt;/em&gt;. Но при этом веб-страницей довольно часто был просто &lt;em&gt;документ&lt;/em&gt;: сплошным текстом с минимальным оформлением, шрифт Times New Roman. Резюме, статья, обзор фильма, фотография с гик-вечеринки.&lt;/p&gt;

&lt;p&gt;В результате (D)HTML и отразил эти требования:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;разметка текста документа: жирный, курсив, шрифт, цвет, таблицы;&lt;/li&gt;
&lt;li&gt;ссылки и якоря (ещё был image map, помните такое?);&lt;/li&gt;
&lt;li&gt;возможность прикрутить динамику;&lt;/li&gt;
&lt;li&gt;базовые стили?;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Может быть уже тогда всё пошло не так? Зачем &lt;em&gt;внутри&lt;/em&gt; текстового документа динамика? Почему вдруг в документе определяется шрифт и цвет? Последний вопрос решили, когда придумали CSS — и это был правильный ход. Но вопрос с динамикой открыт и сейчас. То есть да, &lt;em&gt;HyperText&lt;/em&gt; — это и есть, буквально, «текст, но круче чем текст», «супер-текст», «текст-супермэн» — да, &lt;strong&gt;но зачем&lt;/strong&gt;, дорогой бобёр?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/beaver-error.jpg&#34; alt=&#34;Beaver&#34;&gt;&lt;/p&gt;

&lt;p&gt;Тогда это не было остро заметно, но именно сейчас мы пожинаем плоды. Мы вставляем в документы интерактивные игры, мы меняем части документа на другие части, мы вообще, можно сказать, издеваемся над документами. Пусть так, в этом вроде ничего плохого, но мы продолжаем делать это &lt;em&gt;внутри них самих&lt;/em&gt;, &lt;em&gt;внутри их разметки&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Мы берём то, что называется &lt;strong&gt;язык разметки&lt;/strong&gt; и с его помощью делаем то, что совершенно с этим определением не вяжется:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Интерактивные магазины&lt;/li&gt;
&lt;li&gt;Приложения для прочтения почты и сохранения заметок&lt;/li&gt;
&lt;li&gt;Редакторы кода&lt;/li&gt;
&lt;li&gt;Редакторы графики&lt;/li&gt;
&lt;li&gt;Игры&lt;/li&gt;
&lt;li&gt;Группы обсуждения&lt;/li&gt;
&lt;li&gt;Порно-хабы&lt;/li&gt;
&lt;li&gt;Операционные системы, блять!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Впишите ещё 200 вариантов&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/markup-vs-stuff.png&#34; alt=&#34;Markup vs Stuff&#34;&gt;&lt;/p&gt;

&lt;p&gt;Теперь в одной спецификации разметки у нас &lt;em&gt;перемешаны&lt;/em&gt; (сравните с вариантом из прошлого):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;разметка документа (кстати, таблицы всё ещё чрезвычайно сложны и имеют много древних артефактов);&lt;/li&gt;
&lt;li&gt;поддержка Unicode;&lt;/li&gt;
&lt;li&gt;ссылки и якоря;&lt;/li&gt;
&lt;li&gt;возможность прикрутить динамику (стало хорошей традицией выносить вовне);&lt;/li&gt;
&lt;li&gt;CSS-стили (стало хорошей традицией выносить вовне);&lt;/li&gt;
&lt;li&gt;непонятно вообще куда записать: &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &amp;hellip; (насколько я знаю, у этих тэгов до сих пор нет однозначного и короткого определения; при этом ещё открыт вопрос: кто их реально использует?);&lt;/li&gt;
&lt;li&gt;видео/аудио (ну ок, видео и аудио относятся к понятию документа. Но почему тогда нет встроенной поддержки слайдов презентаций?);&lt;/li&gt;
&lt;li&gt;векторная графика;&lt;/li&gt;
&lt;li&gt;улучшенные формы; (форма — это документ?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iframe&lt;/code&gt;; (документ в документе, по сути)&lt;/li&gt;
&lt;li&gt;работа с историей; (что-то для браузера)&lt;/li&gt;
&lt;li&gt;работа с USB и RS232; (&lt;em&gt;ээээ&amp;hellip;&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;поддержка видеокарт; (&lt;strong&gt;стоп, ЧТО!?&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Возьмём термин «Игра на HTML5» и посмотрим цепочку, откуда она такая берётся:&lt;/p&gt;

&lt;p&gt;Игра на HTML5 ← Canvas ← WebGL ← видеокарта ← ничего общего с разметкой&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/html5-canvas-videocard.png&#34; alt=&#34;HTML5 ← Canvas&#34;&gt;&lt;/p&gt;

&lt;p&gt;Явно видно, что логическая цепочка рвётся уже между понятиями «HTML» и «Canvas»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;И это — одна спецификация, один &lt;em&gt;МНОГОФУНКЦИОНАЛЬНЫЙ-СУКА-ГИПЕРДОКУМЕНТ&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/multi-dammit-hyperdocument.png&#34; alt=&#34;Multi-dammit-hyper-document&#34;&gt;&lt;/p&gt;

&lt;p&gt;Ведь это правда &lt;strong&gt;МЕССИВО&lt;/strong&gt;!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/mess.png&#34; alt=&#34;mess&#34;&gt;&lt;/p&gt;

&lt;p&gt;И при этом у нас до сих пор нет унифицированного, легко читаемого формата для книги (&lt;code&gt;fb2&lt;/code&gt; хорош, но не подходит для книг издательства &lt;a href=&#34;http://oreilly.com/&#34;&gt;OReilly&lt;/a&gt;!). (Зато есть интерактивные книги: это, кстати, хорошо). Нет поддержки математических формул, до сих пор нет редакторов, которые бы производили &lt;em&gt;стандартный&lt;/em&gt; результат, одинаковый между ними самими.&lt;/p&gt;

&lt;p&gt;Ошибки двигают прогресс, это давно известно. И благодаря HTML у нас появилось куча полезных вещей, кстати как раз &lt;em&gt;вопреки&lt;/em&gt; — как, например, &lt;a href=&#34;http://www.wikipedia.org/&#34;&gt;Wiki&lt;/a&gt;, &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;, &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.JS&lt;/a&gt;. Но источник революционного вдохновения от ошибок когда-то кончается, и тогда настаёт пора эти ошибки &lt;em&gt;исправлять&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;как-решить.-метатипы.&#34;&gt;&lt;a href=&#34;#как-решить.-метатипы.&#34; title=&#34;Как решить. Метатипы.&#34;&gt;Как решить. Метатипы.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Я считаю, что основная цель — добиться типизации: отделить мух (разметку документа) от тараканов (блоков аудио/видео/канвас), тараканов от котлет (блочной разметки aside/nav/header). Поэтому требуется &lt;em&gt;классифицировать&lt;/em&gt; все те варианты, которые сейчас оказались перемешаны в кучу. Выделим пяток основных пунктов:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/fly-cockroach-cutlet.png&#34; alt=&#34;Fly-Cockroach-Cutlet&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Простой Текстовый Документ (статья, резюме, обзор, докторская)&lt;/li&gt;
&lt;li&gt;Блог, Вики-портал (набор статей) (&lt;a href=&#34;http://tumblr.com&#34;&gt;tumblr&lt;/a&gt;, &lt;a href=&#34;http://blogspot.com&#34;&gt;blogspot&lt;/a&gt;, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;Презентация (слайды) (&lt;a href=&#34;http://slideshare.net&#34;&gt;slideshare&lt;/a&gt;, &lt;a href=&#34;http://scribd.com&#34;&gt;scribd&lt;/a&gt;, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;Веб-приложение (структура виджетов + локальный storage) (&lt;a href=&#34;http://gmail.com&#34;&gt;gmail&lt;/a&gt;, &lt;a href=&#34;http://evernote.com&#34;&gt;evernote&lt;/a&gt;, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;Игра (интерактивная растровая и векторная графика, работа с видеокартой) (&lt;a href=&#34;http://www.yvoschaap.com/chainrxn/&#34;&gt;chain reaction&lt;/a&gt;, &lt;a href=&#34;http://playbiolab.com/&#34;&gt;biolab disaster&lt;/a&gt;, &lt;a href=&#34;http://www.benjoffe.com/code/games/torus/&#34;&gt;torus&lt;/a&gt;, &lt;a href=&#34;http://chrome.angrybirds.com/&#34;&gt;angry birds&lt;/a&gt;&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Видео, Аудио, Изображение&lt;/li&gt;
&lt;li&gt;и т.п.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как плавно ввести эти метатипы в современный веб? Например, у нас есть в вооружении такая превосходная вещь как &lt;a href=&#34;http://ru.wikipedia.org/wiki/Internet_media_type&#34;&gt;MIME-типы&lt;/a&gt;. Уже сейчас браузеры умеют сами (через плагины) отображать файлы PDF, видео, XML, RSS, так что путь начат.&lt;/p&gt;

&lt;p&gt;Например:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вы запрашиваете в браузере адрес &lt;code&gt;http://steve.jobs/resume&lt;/code&gt;, браузер обнаруживает в заголовке ответа MIME-тип &lt;code&gt;text/markdown&lt;/code&gt; или &lt;code&gt;text/extended-markdown&lt;/code&gt;, собственноручно рендерит полученный markdown-текст в нынешний HTML — и всё ок; (в markdown-документе можно использовать параметры в заголовке, например пути к теме-стилю (но ни в коем случае не к скриптам!), как в &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt;). Или, например, он может получить MIME-тип &lt;code&gt;text/latex&lt;/code&gt; и отрендерить это дело в PDF или HTML. &lt;code&gt;text/wiki-like-in-wikipedia&lt;/code&gt; тоже подойдёт.&lt;/li&gt;
&lt;li&gt;Вы запрашиваете в браузере адрес &lt;code&gt;http://idsoftware.org/quake7.game&lt;/code&gt;, браузер обнаруживает в заголовке ответа MIME-тип &lt;code&gt;game/webgl&lt;/code&gt;, отображает один только &lt;code&gt;canvas&lt;/code&gt; и отдаёт управление пришедшему WebGL-скрипту. Понятное дело, &lt;code&gt;game/flash&lt;/code&gt; нужно запретить сразу же.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Вы запрашиваете в браузере адрес &lt;code&gt;http://mikashkin/blog&lt;/code&gt;, браузер прищуривается, распознаёт MIME-тип &lt;code&gt;text/blog&lt;/code&gt;, а внутри (например) YAML-структуру типа&lt;/p&gt;
&lt;pre lang=&#34;yaml&#34;&gt;&lt;code&gt;
blog:
    author: mikashkin
    sort-by: date
    paging: 20
    style: blog.css
    entries:
        - buildout-lecture.markdown
        - python-is-great.markdown
        - why-gae-is-cool.markdown
        . . .

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ну, вы представляете что получится в результате.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Вы запрашиваете в браузере адрес &lt;code&gt;http://evernote.app&lt;/code&gt;, браузер получает в ответ структуру виджетов на неком UI-языке, MIME-тип, например: &lt;code&gt;application/ui-declarative&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;yaml&#34;&gt;&lt;code&gt;
DockLayout:
    north:
        evn-Toolbar
        evn-LoginBlock loggedin=true
    west:
        evn-NotesTree
    center:
        evn-NotepadWidget
    south height=0.1:
        text &amp;#34;copyright © %year&amp;#34;
        link &amp;#34;http://evernote.app&amp;#34;
        input &amp;#34;Feedback&amp;#34; active=true
        button &amp;#34;send&amp;#34;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В результате, браузер &lt;em&gt;сам&lt;/em&gt; парсит этот язык и отображает его как надо. Кстати, такой UI хорошо смасштабруется и на мобильный браузер.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вы запрашиваете в браузере адрес &lt;code&gt;http://chromium.os&lt;/code&gt;, браузер видит MIME-тип &lt;code&gt;application/os&lt;/code&gt; и редерит полученный ассемблерный код на клиенте&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;А потом, постепенно, можно заменить в этих сценариях HTML на что-то более вразумительное и строгое: но это будет внутренний формат браузера, обычному веб-разработчику до него не должно будет быть дела: блоггеру нужно будет знать только markdown/latex/wiki, веб-UI-разработчику — декларативный язык виджетов, разработчику игр — только WebGL. Им не нужно будет знать HTML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/html5-not-a-markup-language-but-a-mess/inserted-there-happy.png&#34; alt=&#34;Inserted there: happy&#34;&gt;&lt;/p&gt;

&lt;p&gt;Я думаю, вы поняли принцип. По-моему этот подход вполне логичен и оправдан, типы контента &lt;em&gt;строго разделены&lt;/em&gt; и разработчики и пользователи счастливы, им не нужно знать кучу веб-стандартов.&lt;/p&gt;

&lt;p&gt;Правда, после этих манипуляций браузер станет чем-то вроде напичканного плагинами &lt;em&gt;просмотрщика файлов&lt;/em&gt;, только исключительно по сети. Ну, а к чему мы шли? Разве это не лучше, чем спецификация, у которой внутри одно &lt;strong&gt;мессиво&lt;/strong&gt;?&lt;/p&gt;
&lt;h3 id=&#34;ссылки&#34;&gt;&lt;a href=&#34;#ссылки&#34; title=&#34;Ссылки&#34;&gt;Ссылки&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;(Несмотря на скудное разнообразие названий — ручаюсь, это разные статьи)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://marvinserrano.wordpress.com/2011/05/26/html5-the-good-the-bad-and-the-ugly/&#34;&gt;HTML5 — The Goog, The Bad, The Ugly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://channel9.msdn.com/Series/HTML5-Day/HTML5-The-Bad-The-Good-and-the-Ugly&#34;&gt;HTML5 — The Good, The Bad, The Ugly&lt;/a&gt; (видео, польский)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/x00mario/html5-preso-rub2010&#34;&gt;HTML5 — The Good, The Bad, The Ugly&lt;/a&gt; (слайды)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.whitewallweb.com/blog/2010/05/20/the-html5-buzz/&#34;&gt;HTML5 Buzz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/CannedTuna/the-good-the-bad-and-the-ugly-of-html-5-presentation&#34;&gt;The Good, The Bad And The Ugly of HTML5&lt;/a&gt; (слайды)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itworld.com/open-source/113469/preparing-good-and-bad-html5&#34;&gt;Preparing for the Goog and Bad with HTML5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eccnet.com/xmlug/html5&#34;&gt;HTML5 — Bad Idea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
        
            <entry>
                <title>JavaScript Гарден на русском</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/javascript-garden-translation/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/javascript-garden-translation/</id>
                <updated>2011-05-21T00:46:00Z</updated>
                
                <summary type="html">Стараниями четырёх людей мы перевели &lt;a href=&#34;http://bonsaiden.github.com/JavaScript-Garden/&#34;&gt;JavaScript Garden&lt;/a&gt; на русский язык!</summary>
                <content type="html">&lt;p&gt;Стараниями четырёх людей мы перевели &lt;a href=&#34;http://bonsaiden.github.com/JavaScript-Garden/&#34;&gt;JavaScript Garden&lt;/a&gt; на русский язык!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript Garden&lt;/em&gt; — обновляющаяся (с учётом новых веяний и поправок) документация по трюкам и хитростям JavaScript, находящаяся в одном, постоянном, месте. В этой документации рассматриваются практически все распространённые и влияющие на производительность ошибки программистов, поясняются таинства спецификаций и премудрости работы движков JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/JavaScript-Garden/&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/javascript-garden-translation/screenshot.png&#34; alt=&#34;JavaScript Гарден на русском&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Поскольку это слишком крупный перевод и нет смысла переносить один симпатичный маркдаун в другой менее симпатичный, просто даю вам ссылку: &lt;a href=&#34;http://shamansir.github.com/JavaScript-Garden/&#34;&gt;JavaScript Гарден на русском&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;в-переводе-участвовали&#34;&gt;&lt;a href=&#34;#в-переводе-участвовали&#34; title=&#34;В переводе участвовали&#34;&gt;В переводе участвовали&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shamansir.madfire.net&#34;&gt;&amp;#39;shaman.sir&amp;#39;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://anton.shevchuk.name/&#34;&gt;Антон Шевчук&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nixsolutions.com/&#34;&gt;Максим Лозовой&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nixsolutions.com/&#34;&gt;Елена Пашкова&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Найденные ошибки и опечатки можно &lt;a href=&#34;https://github.com/BonsaiDen/JavaScript-Garden/issues&#34;&gt;вешать на авторов&lt;/a&gt;, а они передадут их переводчикам.&lt;/p&gt;

&lt;p&gt;Весь перевод производится в &lt;a href=&#34;https://github.com/shamansir/JavaScript-Garden&#34;&gt;соответствующем github-репозитории&lt;/a&gt;, так что если вы хотите помогать — you&amp;#39;re welcome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Когда авторы вольют перевод к себе на сайт, если примут, он будет также располагаться &lt;a href=&#34;http://bonsaiden.github.com/JavaScript-Garden/ru&#34;&gt;где-то здесь&lt;/a&gt;, но всё равно обновлять его мы будем чаще по ссылке из поста.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Слайды мастер-класса по GWT и mvp4g</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/gwt-mvp4g-slides/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/gwt-mvp4g-slides/</id>
                <updated>2011-05-04T00:46:00Z</updated>
                
                <summary type="html">29 апреля я читал мастер-класс по веб-разработке на &lt;a href=&#34;http://code.google.com/intl/ru/webtoolkit/&#34;&gt;GWT&lt;/a&gt; с использованием фреймворка &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt;, на конференции &lt;a href=&#34;http://addconf.ru&#34;&gt;Application Developer Days&lt;/a&gt; 2011. Предоставляю вам слайды (видео должно быть позже).</summary>
                <content type="html">&lt;p&gt;29 апреля я читал мастер-класс по веб-разработке на &lt;a href=&#34;http://code.google.com/intl/ru/webtoolkit/&#34;&gt;GWT&lt;/a&gt; с использованием фреймворка &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt;, на конференции &lt;a href=&#34;http://addconf.ru&#34;&gt;Application Developer Days&lt;/a&gt; 2011. Предоставляю вам слайды (видео должно быть позже).&lt;/p&gt;
&lt;h3 id=&#34;слайды&#34;&gt;&lt;a href=&#34;#слайды&#34; title=&#34;Слайды&#34;&gt;Слайды&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B9lKUPDNyz1vYTViZjYwZTEtODNmNC00OWZlLWFhODUtMDNkYzE5N2NjM2Fk&amp;amp;hl=en&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/gwt-mvp4g-slides/gdocs.ru.png&#34; alt=&#34;Cлайды&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scribd.com/doc/54690967/&#34;&gt;Также на Scribd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;план&#34;&gt;&lt;a href=&#34;#план&#34; title=&#34;План&#34;&gt;План&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Введение. Краткая история и примеры использования GWT.&lt;/li&gt;
&lt;li&gt;Краткое описание концепций GWT

&lt;ol&gt;
&lt;li&gt;JSNI&lt;/li&gt;
&lt;li&gt;Code Splitting&lt;/li&gt;
&lt;li&gt;MVP, RMVP, EventBus&lt;/li&gt;
&lt;li&gt;Deferred Binding&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;Remote Services&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;mvp4g

&lt;ol&gt;
&lt;li&gt;Чем помогает, отличия и достоинства&lt;/li&gt;
&lt;li&gt;Система аннотаций&lt;/li&gt;
&lt;li&gt;Реализация RMVP, EventBus&lt;/li&gt;
&lt;li&gt;History, &lt;code&gt;#!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Мультимодульность&lt;/li&gt;
&lt;li&gt;Замечания&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Компоненты в GWT

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UiBinder&lt;/code&gt;, стандартные компоненты&lt;/li&gt;
&lt;li&gt;Разработка каастомных компонентов&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Наша разработка Layouting-системы&lt;/li&gt;
&lt;li&gt;Работа с не-Java Server-Side API&lt;/li&gt;
&lt;li&gt;i18n в GWT&lt;/li&gt;
&lt;li&gt;Заключение. Ссылки на примеры&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ссылки-со-слайдов&#34;&gt;&lt;a href=&#34;#ссылки-со-слайдов&#34; title=&#34;Ссылки со слайдов&#34;&gt;Ссылки со слайдов&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://goo.gl/4GgnS&#34;&gt;Слайды в PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Кратко о GWT

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://quake2-gwt-port.appspot.com&#34;&gt;Quake 2 в браузере&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Концепции GWT

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://geekswithblogs.net/kobush/archive/2006/01/09/65305.aspx&#34;&gt;Статья про разницу MVC и MVP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=PDuhR18-EdM&#34;&gt;Ray Ryan про Архитектуру GWT-приложений&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tv.jetbrains.net/videocontent/gwt-event-bus-basics&#34;&gt;Видео про EventBus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.docstoc.com/docs/53396874/Deferred-Binding-The-Magic-of-GWT&#34;&gt;Презентация по Deferred Binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/google-guice/wiki/Motivation?tm=6&#34;&gt;Вики-страницы Guice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developerlife.com/tutorials/?p=125&#34;&gt;Руководство по созданию Remote Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linux.org.ru/forum/talks/4497412&#34;&gt;Обсуждение недостатков GWT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://galak-sandbox.blogspot.com/2010/10/gwt.html&#34;&gt;Резюме по оптимизации GWT-кода&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mvp4g

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;Страница фреймворка mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mvp4gshowcase.appspot.com&#34;&gt;Showcase фреймворка mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/mvp4g/wiki/Mvp4g_vs_GWTP&#34;&gt;Сравнение GWT и фреймворка mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cambiatablog.wordpress.com/2010/12/04/gwt-and-mvp4g-tutorial-1/&#34;&gt;Небольшой туториал по созданию проекта на mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UI компоненты

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/webtoolkit/doc/latest/RefWidgetGallery.html&#34;&gt;Библиотека компонентов GWT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Layouting

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/shamansir/gwt-mvp4g-layouting-demo&#34;&gt;Демонстрация Layouting (в процессе) на GWT+mvp4g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Non-Java API

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/google-web-toolkit-doc-1-5/wiki/GettingStartedJSON&#34;&gt;Суть&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shamansir-ru.tumblr.com/post/1728720550/deferred-api-gwt-rpc&#34;&gt;Описание с исходным кодом&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;i18n&lt;/li&gt;
&lt;li&gt;Заключение

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://experika.com&#34;&gt;Сайт Experika&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/vgashock&#34;&gt;Твиттер Виталия Гашка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vurt.ru&#34;&gt;Сайт Михаила Кашкина&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emdev.ru&#34;&gt;Сайт компании EmDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://profiles.google.com/shaman.sir&#34;&gt;Мой Google-профиль&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;вопросы&#34;&gt;&lt;a href=&#34;#вопросы&#34; title=&#34;Вопросы&#34;&gt;Вопросы&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Во время презентации задавали вопросы, из которых я выделил самые важные:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Для каких сайтов подходит GWT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;По текущему состоянию, значительное расширение функциональности стандартных компонентов GWT вручную или добавление новых компонентов практически неизбежно ведёт к потере сразу нескольких достоинств GWT &amp;mdash; кроссбраузерности и системы переопределения стилей: эти компоненты придётся отлаживать и верстать в различных браузерах самостоятельно.&lt;/p&gt;

&lt;p&gt;Поэтому, самое очевидное применение GWT &amp;mdash; сайты, где удобство пользователя достигается засчёт &lt;em&gt;существующей&lt;/em&gt; компонентной базы и _не_изощрённого дизайном интерфейса (например, подобные &lt;a href=&#34;http://groups.google.com&#34;&gt;Google Groups&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Это больше &lt;em&gt;прикладные&lt;/em&gt; сайты, чем красивые. У таких сайтов часто вся функциональность происходит на одной странице, а не на нескольких. Нельзя сказать, что всё обратное &amp;mdash; невозможно: возможно, и примером служит &lt;a href=&#34;http://experika.com/ui/#!job/start&#34;&gt;наш сайт&lt;/a&gt;, но всё это стоит намного больших трудов, чем использование стандартных компонентов и подходов. Однако, при всём при этом, для других UI-фреймворков упомянутое верно даже в большей степени, чем для GWT (то есть с использованием Apache Wicket сложнее сделать сложный красивый сайт, чем с использованием GWT).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Как работать с дизайнерами и верстальщиками при разработке сайта на GWT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Дизайнерам надо дать установку либо на подавляющее использование стандартных компонентов/лэйаутов GWT в дизайне, либо на кропотливую разработку собственной библиотеки виджетов.&lt;/p&gt;

&lt;p&gt;В первом случае вёрстка может даже не понадобиться (дизайн на страницы смогут наложить GWT-разработчики), во втором случае сдизайненную библиотеку виджетов верстальщикам придётся верстать кроссбраузерно, при этом верстальщиков придётся (очень желательно) учить лэйаутам GWT, системе CSS-стилей в GWT, концепциям виджето-ориентированного декларативного UI и структуре &lt;code&gt;gwt.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Как более худший вариает, верстальщики могут верстать виджеты в HTML (но всё равно, каждый виджет по отдельности), а GWT-разработчики &amp;ldquo;накладывать&amp;rdquo; эту вёрстку на виджеты, уже в стиле GWT. Но это, и правда, &lt;em&gt;худший&lt;/em&gt; вариант.&lt;/dd&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Как связаны понятия модулей в GWT и mvp4g?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;На практике модуль в GWT &amp;mdash; это чаще либо отдельная библиотека, либо веб-приложение целиком, либо его крупная часть. Модуль в mvp4g &amp;mdash; это более атомарное понятие, например один модуль mvp4g полностью отвечает за работу с пользователями, второй модуль &amp;mdash; за работу с новостями, третий &amp;mdash; за работу с компаниями. При этом модуль mvp4g подразумевает одну шину событий для модуля, один &lt;code&gt;HistoryConverter&lt;/code&gt; и несколько презентеров и вьюх внутри. См. тж. &lt;a href=&#34;http://github.com/shamansir/gwt-mvp4g-layouting-demo&#34;&gt;демонстрацию Layouting (в процессе)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;То есть в модуль mvp4g рекомендуется выделять работу с одним типом &lt;em&gt;сущностей&lt;/em&gt;, в котором шина событий будет отвечать за &lt;em&gt;действия&lt;/em&gt; с этим типом сущностей.&lt;/p&gt;

&lt;p&gt;В этом есть огромное преимущество, потому что модули mvp4g можно загружать асинхронно (&lt;em&gt;Code Splitting&lt;/em&gt;) &amp;mdash; если пользователь не работает с какой-либо сущностью, эта часть JavaScript-кода даже не будет загружена в его браузер.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Как устроена система навигации в фреймворке mvp4g?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Из ответа на предыдущий вопрос сделаем вывод &amp;mdash; поскольку в модуль mvp4g рекомендуется выделять работу с одним типом сущностей и такой модуль имеет один &lt;code&gt;HistoryConverter&lt;/code&gt;, предпочтительнее строить систему навигации по той же логике &lt;code&gt;сущность -&amp;gt; действие&lt;/code&gt;, например:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user/edit?56 // или user/edit/56, mvp4g позволяет это
user/show?56 // или user/show/56
user/friends?56 // или user/friends/56
user/list
company/edit?72 // или company/edit/72
company/show?72 // или company/show/72
company/employee?72 // или company/employee/72
company/list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можно строить систему на URL вида &lt;code&gt;user/56/edit&lt;/code&gt;, принимая в HistoryConverter &lt;code&gt;id&lt;/code&gt; сущности и действие и в зависимости от действия вызывать соответствующее событие.&lt;/p&gt;

&lt;p&gt;Это всё рекомендации, mvp4g на данный момент никак не ограничивает разработчика в разбиении кода на модули или способах формирования URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Концепция MVP подразумевает лёгкое тестирование. Тестируем ли мы UI и как тестируется mvp4g?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;На данный момент мы тестируем UI вручную (тестеры ходят по сайту и проверяют функциональность). Фреймворк mvp4g позволяет использовать JUnit точно так же, как и для GWT &amp;mdash; то есть никак не ограничивает. Вы всё также можете тестировать &lt;code&gt;Presenter&lt;/code&gt; как обычный класс, для моков можно использовать библиотеку &lt;a href=&#34;http://mockito.org/&#34;&gt;mockito&lt;/a&gt;. Кроме того, каждый &lt;code&gt;Presenter&lt;/code&gt; имеет методы &lt;code&gt;setView&lt;/code&gt; и &lt;code&gt;setEventBus&lt;/code&gt;, поэтому вы можете инжектить mock-view и mock-eventbus используя GIN (&lt;a href=&#34;http://groups.google.com/group/mvp4g/browse_thread/thread/82cac05eabe2401b&#34;&gt;обсуждение здесь&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Практического опыта в таком тестировании у нас нет, возможно кто-то опишется в комментариях по этому поводу.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Лекция по GWT+mvp4g на ADDConf &#39;11</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/about-future-gwt-mvp4g-lecture/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/about-future-gwt-mvp4g-lecture/</id>
                <updated>2011-04-21T00:46:00Z</updated>
                
                <summary type="html">Буду читать мастер-класс на &lt;a href=&#34;http://addconf.ru/&#34;&gt;ADDConf 2011&lt;/a&gt; по разработке веб-приложений с помощью &lt;a href=&#34;http://code.google.com/webtoolkit/&#34;&gt;GWT&lt;/a&gt; и &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt; (29 апреля, 15:10). Санкт-Петербург, Россия</summary>
                <content type="html">&lt;p&gt;Буду читать мастер-класс на &lt;a href=&#34;http://addconf.ru/&#34;&gt;ADDConf 2011&lt;/a&gt; по разработке веб-приложений с помощью &lt;a href=&#34;http://code.google.com/webtoolkit/&#34;&gt;GWT&lt;/a&gt; и &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt; (29 апреля, 15:10). Санкт-Петербург, Россия&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/about-future-gwt-mvp4g-lecture/firstslide.png&#34; alt=&#34;Первый слайд презентации&#34;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&#34;план&#34;&gt;&lt;a href=&#34;#план&#34; title=&#34;План&#34;&gt;План&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;План на данный момент складывается такой:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Введение. Краткая история и примеры использования GWT.&lt;/li&gt;
&lt;li&gt;Краткое описание концепций GWT

&lt;ol&gt;
&lt;li&gt;JSNI&lt;/li&gt;
&lt;li&gt;Code Splitting&lt;/li&gt;
&lt;li&gt;MVP, RMVP, EventBus&lt;/li&gt;
&lt;li&gt;Deferred Binding&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;Remote Services&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;mvp4g

&lt;ol&gt;
&lt;li&gt;Чем помогает, отличия и достоинства&lt;/li&gt;
&lt;li&gt;Система аннотаций&lt;/li&gt;
&lt;li&gt;Реализация RMVP, EventBus&lt;/li&gt;
&lt;li&gt;History, &lt;code&gt;#!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Мультимодульность&lt;/li&gt;
&lt;li&gt;Замечания&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Компоненты в GWT

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UiBinder&lt;/code&gt;, стандартные компоненты&lt;/li&gt;
&lt;li&gt;Разработка каастомных компонентов&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Наша разработка Layouting-системы&lt;/li&gt;
&lt;li&gt;Работа с не-Java Server-Side API&lt;/li&gt;
&lt;li&gt;i18n в GWT&lt;/li&gt;
&lt;li&gt;Заключение. Ссылки на примеры&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Будут рассказы о недостатках, можно будет обсудить опыт написания проектов на GWT (пример с моей стороны &amp;mdash; сайт &lt;a href=&#34;http://experika.com&#34;&gt;Experika&lt;/a&gt;) и тонкие моменты. Ещё не знаю, получится ли уложить всё это в полтора часа, возможно придётся от чего-то отказаться (от частей доклада, в пользу вопросов и обсуждений).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/about-future-gwt-mvp4g-lecture/add_logo.png&#34; alt=&#34;Логотип ADDConf&#34;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&#34;анонс&#34;&gt;&lt;a href=&#34;#анонс&#34; title=&#34;Анонс&#34;&gt;Анонс&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Художественный анонс мастер-класса &amp;mdash; &lt;a href=&#34;http://addconf.ru/event.sdf/ru/add_2011/authors/AntonKotenko/313&#34;&gt;здесь&lt;/a&gt;, цитирую:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GWT - это библиотека инструментов от Google для написания сложных (и не очень) веб-приложений на Java с последующей трансляцией в качественно оптимизированный, кроссбраузерный JavaScript. В библиотеке обеспечена возможность создания декларативного пользовательского интерфейса, а также доступно множество готовых компонентов - от кнопок до разнообразных лэйаутов.&lt;/p&gt;

&lt;p&gt;Я расскажу о самой библиотеке GWT, о библиотеке mvp4g, значительно упрощающей работу по концепциям MVP и поддерживающей мульти-модульную архитектуру проекта, и о том как это сочетание используется в нашем текущем проекте, о наших достижениях, ошибках и опыте, который мы получили. Лекция, полагаю, будет интересна и тем, кто работает с GWT и тем, кто хочет подробнее ознакомиться с возможностями обоих библиотек на примере готового крупного проекта.&lt;/p&gt;

&lt;p&gt;В каждой части доклада я собираюсь рассказать и о достоинствах и о недостатках того или иного подхода, той или иной библиотеки. Также, если позволит время, постараюсь вкратце затронуть организационные моменты касающиеся разработки на GWT - о том, что нужно учитывать команде проекта при взаимодействии с GWT-разработчиками.&lt;/p&gt;

&lt;p&gt;Кстати, для разработчиков десктоп-приложений вход не менее свободный :).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ещё собираюсь устроить там же Livecoding-сессию на &lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;fluxus&lt;/a&gt;, но это уже другая история, возможно о ней будет отдельно.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>LimeJS: Пишем кроссплатформенную игру на HTML5 с поддержкой прикосновений</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/limejs-writing-a-game/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/limejs-writing-a-game/</id>
                <updated>2011-02-15T00:46:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;http://www.limejs.com&#34;&gt;LimeJS&lt;/a&gt; - 2D Open Source HTML5 движок для написания игр с поддержкой прикосновений и работающий (по описанию) на большинстве мобильных платформ. Я наткнулся на него не сам, мне прислали письмо с просьбой рассказать о нём сообществу и я решил, раз так - что уж мелочиться, надо попробовать его в деле. Кроме того, я заранее договорился с авторами движка, что буду честен - буду рассказывать и о достоинствах и о недостатках, так что надеюсь убрать из статьи ореол рекламы (хотя какая реклама может быть связана с open source)..?</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;http://www.limejs.com&#34;&gt;LimeJS&lt;/a&gt; - 2D Open Source HTML5 движок для написания игр с поддержкой прикосновений и работающий (по описанию) на большинстве мобильных платформ. Я наткнулся на него не сам, мне прислали письмо с просьбой рассказать о нём сообществу и я решил, раз так - что уж мелочиться, надо попробовать его в деле. Кроме того, я заранее договорился с авторами движка, что буду честен - буду рассказывать и о достоинствах и о недостатках, так что надеюсь убрать из статьи ореол рекламы (хотя какая реклама может быть связана с open source)..?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Open Source&lt;/em&gt;, &lt;em&gt;кроссплатформенность&lt;/em&gt; и &lt;em&gt;HTML5&lt;/em&gt; - это то, что я люблю - инновации и свобода :). И ещё, сам движок написан на &lt;a href=&#34;http://code.google.com/closure/&#34;&gt;Closure&lt;/a&gt; и поддерживает &lt;em&gt;chaining&lt;/em&gt;, это вносит дополнительные яркие цвета в свойства движка и программирование с его использованием. Конечно, необходимо ещё и удобство разработки игр само по себе, на что мы и испытаем LimeJS вместе с вами в этой статье. Движок преподносится как кроссплатформенный, на iPad&amp;#39;е представленные на сайте игры вполне себе работают, немного медленно, но вполне играбельно, ну а на моём Hero/Android2.1 (HTML5, наверное, неполный) они естественно подтормаживают и глючат - то есть буквально, играть в эти игры нельзя. Впрочем, практически все объекты в играх даже на смартфоне отображаются и действуют корректно, так что будем надеяться что с последующуей оптимизацией всё будет отлично даже на хилых смартфонах типа моего.&lt;/p&gt;

&lt;p&gt;Движок, кстати, позиционируется как замена Flash-технологий в играх. Это болезненная тема для многих среди нас в связи с общим гноблением флэша, но при этом существующими и даже создающимися на нём отличными играми. (И, как я лично считаю, удобство самого механизма создания анимации в Flash пока ещё не повторено ни для HTML5/SVG ни для альтернатив). Так вот, может быть у этого движка действительно есть шанс завоевать любовь разработчиков на Flash и привить им любовь к HTML5. Решать им и вам. &lt;em&gt;Главное отличие&lt;/em&gt; &lt;a href=&#34;http://www.limejs.com&#34;&gt;LimeJS&lt;/a&gt; от, допустим, &lt;a href=&#34;http://processingjs.org/&#34;&gt;ProcessingJS&lt;/a&gt; - ориентировка не на машину состояний, не на обновление в каждом кадре, а на &amp;ldquo;таймлайн&amp;rdquo; - &lt;em&gt;событийность&lt;/em&gt; в сценарии игры.&lt;/p&gt;

&lt;p&gt;Кстати, вот пример кода: &lt;a href=&#34;http://paste.pocoo.org/show/336927/&#34;&gt;&lt;code&gt;javascript&lt;/code&gt;&lt;/a&gt; и &lt;a href=&#34;http://paste.pocoo.org/show/336929/&#34;&gt;&lt;code&gt;html&lt;/code&gt;&lt;/a&gt; - чтобы вы могли сразу сделать какой-то вывод, а то я изначально относился к движку довольно скептически, а вот сейчас думаю, что наверняка зря.&lt;/p&gt;
&lt;h3 id=&#34;что-получится&#34;&gt;&lt;a href=&#34;#что-получится&#34; title=&#34;Что получится&#34;&gt;Что получится&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В течении прочтения статьи мы напишем очень упрощённую версию пинг-понга на LimeJS. Вот так будет выглядеть результат:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/stage-designed.png&#34; alt=&#34;Мужчины в синих шортах на футбольном поле с детским мячиком&#34;&gt;&lt;/p&gt;

&lt;p&gt;В конце статьи видео с демонстрацией написанной игры на iPad, iPhone и Android.&lt;/p&gt;
&lt;h3 id=&#34;подготовка-к-разработке&#34;&gt;&lt;a href=&#34;#подготовка-к-разработке&#34; title=&#34;Подготовка к разработке&#34;&gt;Подготовка к разработке&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;У движка есть небольшой CLI, Command Line Interface. Он написан на Python и скачивает нужные пакеты с помощью &lt;code&gt;git&lt;/code&gt;, поэтому для работы с движком нужно установить &lt;a href=&#34;http://python.org/download/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;http://git-scm.com/download&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; и &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-svn.html&#34;&gt;&lt;code&gt;git-svn&lt;/code&gt;&lt;/a&gt; соответственно, если вдруг они не установлены (разработчикам с Windows видимо &lt;a href=&#34;http://stackoverflow.com/questions/350907/git-svn-on-windows-where-to-get-binaries&#34;&gt;придётся помучиться&lt;/a&gt;). Затем берём исходники &lt;a href=&#34;http://github.com/digitalfruit/limejs&#34;&gt;из github&lt;/a&gt; или &lt;a href=&#34;https://github.com/digitalfruit/limejs/zipball/master&#34;&gt;скачиваем zip&lt;/a&gt; и распаковываем. На Ubuntu это будет выглядеть примерно так:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python git-core git-svn
$ wget https://github.com/digitalfruit/limejs/zipball/master -no-check-certificate
$ unzip ./master ./digitalfruit-limejs
$ cd ./digitalfruit-limejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Чтобы автоматически установить другие нужные для разработки пакеты (включая Closure), запускаем:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/lime.py init
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;начинаем-наш-проект&#34;&gt;&lt;a href=&#34;#начинаем-наш-проект&#34; title=&#34;Начинаем наш проект&#34;&gt;Начинаем наш проект&lt;/a&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ ./bin/lime.py create pingpong
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Да, пусть это будет пинг-понг, подобный тому, который показывает Dominic в руководстве по &lt;a href=&#34;http://vimeo.com/17161851&#34;&gt;созданию игры на Impact HTML5 Engine&lt;/a&gt;. Я потом обнаружил, что в &lt;a href=&#34;https://github.com/digitalfruit/limejs/tree/master/lime/demos/pong&#34;&gt;демо-исходниках&lt;/a&gt; есть что-то похожее, но пусть у нас будет намного более простой вариант.&lt;/p&gt;

&lt;p&gt;В каталоге &lt;code&gt;pingpong&lt;/code&gt; будут созданы файлы &lt;code&gt;pingpong.html&lt;/code&gt; и &lt;code&gt;pingpong.js&lt;/code&gt;. Откройте &lt;code&gt;.html&lt;/code&gt; файл в браузере, он уже довольно интересен - в центре вы увидите симпатичный круг, который можно таскать по странице мышкой или пальцем. В &lt;code&gt;.js&lt;/code&gt;-файле тоже много полезного - показано как создаётся сцена и видно, как организовывается слежение за событиями. Код остаётся при этом вполне понятным и читаемым. Я не буду разбирать его подробно, это всё-таки просто пример-заглушка, а ссылки по которым можно посмотреть его &amp;ldquo;нутро&amp;rdquo; я привёл в начале статьи.&lt;/p&gt;
&lt;h3 id=&#34;основные-классы-и-концепции&#34;&gt;&lt;a href=&#34;#основные-классы-и-концепции&#34; title=&#34;Основные классы и концепции&#34;&gt;Основные классы и концепции&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Краткое резюме &lt;a href=&#34;http://www.limejs.com/0-getting-started&#34;&gt;Programming guide&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Director&lt;/code&gt; - это &lt;em&gt;режиссёр&lt;/em&gt; игры, он управляет переходами между сценами (включая анимацию переходов) и содержит основные настройки игры;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scene&lt;/code&gt; - это сцена, отдельный &lt;em&gt;экран&lt;/em&gt; в игре, на него добавляются дочерние объекты и слои;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Layer&lt;/code&gt; - это &lt;em&gt;слой&lt;/em&gt;, участки экрана удобно разделять/распределять на слои  и слои тоже могут быть контейнерами дочерних объектов. При этом они вполне могут перекрываться, как в фотошопе;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScheduleManager&lt;/code&gt; - &lt;em&gt;планировщик&lt;/em&gt;, помогает запускать определённые функции либо в каждом кадре, либо по прошествию указанного времени;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node&lt;/code&gt; - любая &lt;em&gt;сущность&lt;/em&gt; в игре, имеет свою позицию, локальную систему координат и размер, может перемещаться, вращаться, масштабироваться и анимироваться;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sprite&lt;/code&gt; - наследник &lt;code&gt;Node&lt;/code&gt;, имеет все его свойства/способности и может представлять собой &lt;em&gt;изображение&lt;/em&gt; и/или &lt;em&gt;геометрический объект&lt;/em&gt; (от круга до любого полигона); спрайты можно отрезать друг от друга с использованием масок, заполнять градиентами и проверять на коллизии методом &lt;code&gt;hitTest&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Движок ориентируется на таймлайн, а не на то что должно отображаться в текущем кадре;&lt;/li&gt;
&lt;li&gt;Всё разнообразные события, связанные с контроллерами обрабатываются через механизмы Closure;&lt;/li&gt;
&lt;li&gt;Анимации - переместить, масштабировать, вращать, пропасть - могут применяться и к одному объекту и к нескольким сразу и могут объединяться в цепочки (последовательные, одновременные, циклические);&lt;/li&gt;
&lt;li&gt;Поддерживается &lt;code&gt;DOM&lt;/code&gt;- и &lt;code&gt;Canvas&lt;/code&gt;-рендеринг. &lt;code&gt;WebGL&lt;/code&gt;-реднеринг планируется;&lt;/li&gt;
&lt;li&gt;Если анимация применяется к DOM-эелемнту, она транслируется в CSS3-свойство;&lt;/li&gt;
&lt;li&gt;Скрипты на выходе можно оптимизировать;&lt;/li&gt;
&lt;li&gt;Есть класс &lt;code&gt;Audio&lt;/code&gt; для проигрывания звука;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;строим-сцену&#34;&gt;&lt;a href=&#34;#строим-сцену&#34; title=&#34;Строим сцену&#34;&gt;Строим сцену&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Оставим из переданной нам от разработчиков функции &lt;code&gt;pingpong.start&lt;/code&gt; только несколько строк:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// entrypoint
pingpong.start = function(){

    var director = new lime.Director(document.body),
        scene = new lime.Scene();

    director.makeMobileWebAppCapable();

    // set current scene active
    director.replaceScene(scene);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Не забудьте убрать ненужные строки &lt;code&gt;goog.require&lt;/code&gt;. Я не буду напоминать про это в дальнейшем, как должен будет выглядеть заголовок файла вы всегда сможете посмотреть в конце статьи. Добавим в сцену три слоя - фон &lt;code&gt;floor_&lt;/code&gt;, стены &lt;code&gt;walls_&lt;/code&gt; и доску, на которой будет происходить всё действие - &lt;code&gt;board_&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var director = new lime.Director(document.body),
    scene = new lime.Scene(),

    floor_ = new lime.Layer().setPosition(0,0),
    walls_ = new lime.Layer().setPosition(0,0),
    board_ = new lime.Layer().setPosition(0,0);

scene.appendChild(floor_);
scene.appendChild(walls_);
scene.appendChild(board_);

. . .

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;заготовка-игрока&#34;&gt;&lt;a href=&#34;#заготовка-игрока&#34; title=&#34;Заготовка игрока&#34;&gt;Заготовка игрока&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;В отдельном файле &lt;code&gt;player.js&lt;/code&gt; опишем класс игрока - это будет полигон в форме скейтборда (чтобы хорошо проверить как работают коллизии):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
goog.provide(&amp;#39;pingpong.Player&amp;#39;);

goog.require(&amp;#39;lime.Polygon&amp;#39;);

pingpong.Player = function() {
    goog.base(this);

    // ... собираем полигон
}
goog.inherits(pingpong.Player, lime.Polygon);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;На месте комментария опишем точки полигона и зальём полупрозрачным синим. Так будет выглядеть игрок (в руководстве для координат полигона используются дробные числа от -1 до 1, но в текущей версии они у меня не заработали):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
// -1,-2.5, 0,-3.5, 1,-2.5, 1,2.5, 0,3.5, -1,2.5, 0,1.5, 0,-1.5
this.addPoints(-50,-125, 0,-175, 50,-125, 50,125, 0,175, -50,125, 0,75, 0,-75)
    .setFill(0,0,210,.7)
    .setScale(.4);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/player.png&#34; alt=&#34;Игрок&#34;&gt;&lt;/p&gt;

&lt;p&gt;Красной точкой на рисунке помечена так называемая &lt;code&gt;anchorPoint&lt;/code&gt;, для полигона она рассчитывается автоматически. Это точка отсчёта локальной системы координат спрайта - от неё высчитываются все относительные размеры и расстояния, к нему относящиеся.&lt;/p&gt;

&lt;p&gt;Пока что код равноценен вызову:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var playerOne = new lime.Polygon().addPoints(...).setFill(...);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Но позже мы добавим поведение к игроку и будет очевидно, что выделить класс было разумным. Давайте проверим, корректно ли отображается игрок в сцене - вернёмся к файлу &lt;code&gt;pingpong.js&lt;/code&gt;&amp;hellip; впрочем, что уж тянуть, давайте добавим сразу обоих игроков и отразим первого, чтобы они стояли лицом к лицу:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
. . .
goog.require(&amp;#39;pingpong.Player&amp;#39;);

. . .
    board_ = new lime.Layer().setPosition(0,0),

    playerOne = new pingpong.Player().setPosition(50,150).setRotation(180),
    playerTwo = new pingpong.Player().setPosition(400,150);

board_.appendChild(playerOne);
board_.appendChild(playerTwo);

. . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Перед запуском в браузере, нужно произвести ещё одно мановение - обновить зависимости Closure (за счёт этого в &lt;code&gt;.html&lt;/code&gt; могут быть включены только &lt;code&gt;base.js&lt;/code&gt; и &lt;code&gt;pingpong.js&lt;/code&gt;, а остальные внешние файлы подгружаются автоматически через &lt;code&gt;goog.require&lt;/code&gt;). При этом в текущей версии библиотеки есть небольшой баг - при создании имя проекта не добавляется в файл &lt;code&gt;./bin/projects&lt;/code&gt;. Поэтому прежде нужно добавить строку &lt;code&gt;pingpong&lt;/code&gt; в &lt;code&gt;./bin.projects&lt;/code&gt;, а потом обновить зависимости:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim ./bin/projects   # add `pingpong` line
$ ./bin/lime.py update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Итак, вот что сейчас на экране:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/stage1.png&#34; alt=&#34;Пляжники в синих плавках&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;заготовка-мячика&#34;&gt;&lt;a href=&#34;#заготовка-мячика&#34; title=&#34;Заготовка мячика&#34;&gt;Заготовка мячика&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Создадим файл &lt;code&gt;ball.js&lt;/code&gt; с таким содержимым:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
goog.provide(&amp;#39;pingpong.Ball&amp;#39;);

goog.require(&amp;#39;lime.Circle&amp;#39;);

pingpong.Ball = function() {
    goog.base(this);

    this.setFill(255,0,0,.7)
        .setSize(20,20);
}
goog.inherits(pingpong.Ball, lime.Circle);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Обновим зависимости:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/lime.py update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И добавим мячик на доску в &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
. . .
goog.require(&amp;#39;pingpong.Ball&amp;#39;);
. . .

    playerOne = new pingpong.Player().setPosition(50,150).setRotation(180),
    playerTwo = new pingpong.Player().setPosition(400,150),
    ball = new pingpong.Ball().setPosition(275,150);

board_.appendChild(playerOne);
board_.appendChild(playerTwo);
board_.appendChild(ball);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/stage2.png&#34; alt=&#34;Пляжники в синих плавках с мячиком&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;фон&#34;&gt;&lt;a href=&#34;#фон&#34; title=&#34;Фон&#34;&gt;Фон&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Давайте зададим фон на поле с игроками, для каждого игрока половина поля своего цвета. Добавим к &lt;code&gt;Director&lt;/code&gt; параметры размеров экрана игры:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var director = new lime.Director(document.body,600,480),

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Эти размеры никак не соотносятся с какими-либо пикселями - полотно игры автоматически масштабируется или разворачивается на весь экран при необходимости, но эти размеры позволяют задавать относительное положение элементов на полотне. Поправим позиции мяча и игроков в соответствии с ними:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
playerOne = new pingpong.Player().setPosition(40,240).setRotation(180),
playerTwo = new pingpong.Player().setPosition(600,240),
ball = new pingpong.Ball().setPosition(320,240);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;При изменении размеров окна так, чтобы поле было меньше чем указанные размеры, логика может сбиваться - хотя скорее всего, это я при тестированиях указал в каком-то месте координаты не так, как нужно было.&lt;/p&gt;

&lt;p&gt;Теперь, наконец, фон. Это будут просто два спрайта, разделяющие экран пополам - никакой побочной логики.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
floor_.appendChild(new lime.Sprite().setPosition(160,240)
                                    .setSize(320,480)
                                    .setFill(100,100,100));
floor_.appendChild(new lime.Sprite().setPosition(480,240)
                                    .setSize(320,480)
                                    .setFill(200,200,200));

board_.appendChild(...);
. . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/stage3.png&#34; alt=&#34;Пляжники в синих плавках с мячиком на асфальте&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;заготовка-стен&#34;&gt;&lt;a href=&#34;#заготовка-стен&#34; title=&#34;Заготовка стен&#34;&gt;Заготовка стен&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;У стен будет совсем немного логики, но тем не менее тоже выделим их в отдельный класс. Стены будут размером 20x20. Создадим файл &lt;code&gt;wall.js&lt;/code&gt; с таким содержимым:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
goog.provide(&amp;#39;pingpong.Wall&amp;#39;);

goog.require(&amp;#39;lime.Sprite&amp;#39;);

pingpong.Wall = function() {
    goog.base(this);

    this.setFill(255,255,0)
        .setSize(20,20);
}
goog.inherits(pingpong.Wall, lime.Sprite);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Обновим зависимости:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/lime.py update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И расставим стены вдоль краёв полотна в &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
. . .
goog.require(&amp;#39;pingpong.Wall&amp;#39;);
. . .

floor_.appendChild(...);

// horizontal walls
for (x = 10; x &amp;lt;= 630; x += 20) {
    walls_.appendChild(new pingpong.Wall().setPosition(x, 10));
    walls_.appendChild(new pingpong.Wall().setPosition(x, 470));
}
// vertical walls
for (y = 30; y &amp;lt;= 450; y += 20) {
    walls_.appendChild(new pingpong.Wall().setPosition(10, y));
    walls_.appendChild(new pingpong.Wall().setPosition(630, y));
}

board_.appendChild(...);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Всё, поле наконец готово - можно приступать к логике!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/stage4.png&#34; alt=&#34;Пляжники в синих плавках с мячиком на серых квадратах, окружённые жёлтыми ящиками&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;логика-игроков&#34;&gt;&lt;a href=&#34;#логика-игроков&#34; title=&#34;Логика игроков&#34;&gt;Логика игроков&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Спрайт игрока должен постепенно двигаться по вертикали к точке, в которую нажали мышью или пальцем, при этом не врезаясь в стены. Движение делается просто:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
. . .

director.makeMobileWebAppCapable();

goog.events.listen(floor_,[&amp;#39;mousedown&amp;#39;,&amp;#39;touchstart&amp;#39;],function(e){
    var player_ = (e.position.x &amp;lt;= 320) ? playerOne : playerTwo;
    player_.runAction(
            new lime.animation.MoveTo(
                        player_.alignBounds(player_.getPosition().x,
                                            e.position.y))
                              .setDuration(1));
});

director.replaceScene(scene);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Но при таком поведении игроки проходят сквозь стены. Не будем сохранять экзепляры каждой стены, чтобы тестировать на столкновение с игроками, просто позволим программисту задать за какие границы игроку нельзя попадать - добавим два метода в конец &lt;code&gt;player.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
pingpong.Player.prototype.setMovementBounds = function(top,right,bottom,left) {
    this._moveBounds = new goog.math.Box(top,right,bottom,left);
    return this;
}

pingpong.Player.prototype.alignBounds = function(x, y) {
    if (this._moveBounds === undefined) return new goog.math.Coordinate(x, y);
    var size_ = new goog.math.Size(this.getSize().width * this.getScale().x,
                                   this.getSize().height * this.getScale().y);
    var newX = x, newY = y;
    if (x &amp;lt; (this._moveBounds.left + (size_.width / 2)))
                  newX = this._moveBounds.left + (size_.width / 2);
    if (x &amp;gt; (this._moveBounds.right - (size_.width / 2)))
                  newX = this._moveBounds.right - (size_.width / 2);
    if (y &amp;lt; (this._moveBounds.top + (size_.height / 2)))
                  newY = this._moveBounds.top + (size_.height / 2);
    if (y &amp;gt; (this._moveBounds.bottom - (size_.height / 2)))
                  newY = this._moveBounds.bottom - (size_.height / 2);
    return new goog.math.Coordinate(newX, newY);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Первый позволяет устанавливать прямоугольные границы для игрока, а второй - вернуть выровненную относительно этих границ позицию. Заметьте, что при расчётах учитывается вектор масштабирования.&lt;/p&gt;

&lt;p&gt;Теперь в &lt;code&gt;pingpong.js&lt;/code&gt; обновим определение игроков:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
playerOne = new pingpong.Player().setPosition(40,240)
                                 .setRotation(180)
                                 .setMovementBounds(20,620,460,20),
playerTwo = new pingpong.Player().setPosition(600,240)
                                 .setMovementBounds(20,620,460,20),

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И исправим событие, их перемещающее:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
goog.events.listen(floor_,[&amp;#39;mousedown&amp;#39;,&amp;#39;touchstart&amp;#39;],function(e){
    var player_ = (e.position.x &amp;lt;= 320) ? playerOne : playerTwo;
    player_.runAction(
            new lime.animation.MoveTo(
                    player_.alignBounds(player_.getPosition().x,
                                        e.screenPosition.y))
                              .setDuration(2));
});

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;логика-мяча&#34;&gt;&lt;a href=&#34;#логика-мяча&#34; title=&#34;Логика мяча&#34;&gt;Логика мяча&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Для мяча понадобится несколько дополнительных функций. Одна позволяет ограничивать движение прямоугольным регионом, так же как и у и игрока, другая устанавливает скорость движения мяча, третья сбрасывает его положение в начальную точку (&lt;code&gt;ball.js&lt;/code&gt;):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
pingpong.Ball = function() {
    goog.base(this);

    this.setFill(255,0,0,.7)
        .setSize(20,20);

    this._xCoef = 1;
    this._yCoef = 1;

    this._resetPos = new goog.math.Coordinate(0, 0);
    this._velocity = 2;
}
goog.inherits(pingpong.Ball,lime.Circle);

pingpong.Ball.prototype.setMovementBounds = function(top,right,bottom,left) {
    this._moveBounds = new goog.math.Box(top,right,bottom,left);
    return this;
}

pingpong.Ball.prototype.setVelocity = function(velocity) {
    if (velocity) this._velocity = velocity;
    return this;
}

pingpong.Ball.prototype.setResetPosition = function(x, y) {
    this._resetPos = new goog.math.Coordinate(x, y);
    return this;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Туда же допишем основную функцию проверки, поймал ли один из игроков мяч и сброса позиции мяча, если нет. Если произошёл удар о вертикальную стенку, функция возвращает позицию удара, чтобы внешняя функция смогла определить, кто из игроков виноват, рассудив по их расположению.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
pingpong.Ball.prototype.updateAndCheckHit = function(dt,playerOne,playerTwo) {
    var newPos_ = this.getPosition();
    var size_ = new goog.math.Size(this.getSize().width * this.getScale().x,
                                   this.getSize().height * this.getScale().y);
    newPos_.x += this._xCoef * this._velocity * dt;
    newPos_.y += this._yCoef * this._velocity * dt;
    var hitVBounds_ = false; // vertical bounds were hit
    if (this._moveBounds !== undefined) {
        if (newPos_.x &amp;lt;= (this._moveBounds.left + (size_.width / 2)))
                         { this._xCoef = 1; hitVBounds_ = true; }
        if (newPos_.x &amp;gt;= (this._moveBounds.right - (size_.width / 2)))
                         { this._xCoef = -1; hitVBounds_ = true; }
        if (newPos_.y &amp;lt;= (this._moveBounds.top + (size_.height / 2)))
                         this._yCoef = 1;
        if (newPos_.y &amp;gt;= (this._moveBounds.bottom - (size_.height / 2)))
                         this._yCoef = -1;
    }
    var p1catched_ = playerOne.catched(this.getParent().localToScreen(newPos_));
    var p2catched_ = playerTwo.catched(this.getParent().localToScreen(newPos_));
    if (hitVBounds_ &amp;amp;&amp;amp; !p1catched_ &amp;amp;&amp;amp; !p2catched_) {
        this.setPosition(this._resetPos.x,this._resetPos.y);
        return newPos_;
    } else if (p1catched_) { this.xCoef = 1; return null; }
      else if (p2catched_) { this.xCoef = -1; return null; }
    this.setPosition(newPos_.x, newPos_.y);
    return null;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;В подобных функциях требуется внимательно следить за координатной системой, с которой вы&lt;br&gt;
работаете в данный момент и правильно их конвертировать при необходимости. В данном случае &lt;code&gt;parent&lt;/code&gt;  - это слой, на котором располагается мяч и позиция мяча - это позиция относительно системы координат слоя. Таким образом, мы переводим координату позиции мяча в системе координат слоя в экранную систему координат перед передачей, а в методе &lt;code&gt;catched&lt;/code&gt;, описанном ниже, переводим переданную позицию из экранной системы координат в локальную систему координат игрока.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;В &lt;code&gt;player.js&lt;/code&gt; добавим использующуйся в предыдущей функции метод &lt;code&gt;catched&lt;/code&gt;. Он, учитывая координаты всех точек полигона игрока + масштаб и поворот, возвращает попала ли переданная позиция в область полигона или нет:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
pingpong.Player.prototype.catched = function(pos) {
    var p = this.getPoints(),
        s = this.getScale(),
        r = this.getRotation(),
        plen = p.length,
        coord = this.screenToLocal(pos),
        inPoly = false;

    var rsin = Math.sin(r * Math.PI / 180),
        rcos = Math.cos(r * Math.PI / 180),
        csx = coord.x * s.x,
        csy = coord.y * s.y,
        crx = (csx * rcos) - (csy * rsin),
        cry = (csx * rsin) + (csy * rcos);
        crx = coord.x, cry = coord.y;

    if (plen &amp;gt; 2) {
        var i, j, c = 0;

        for (i = 0, j = plen - 1; i &amp;lt; plen; j = i++) {
            var pix_ = p[i].x, piy_ = p[i].y,
                pjx_ = p[j].x, pjy_ = p[j].y;

            if (((piy_ &amp;gt; cry) != (pjy_ &amp;gt; cry)) &amp;amp;&amp;amp;
                (crx &amp;lt; (pjx_ - pix_) * (cry - piy_) /
                    (pjy_ - piy_) + pix_)) {
                    inPoly = !inPoly;
                }
        }
    }

    return inPoly;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Установим все необходимые настройки при инициализации мяча в &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
ball = new pingpong.Ball().setPosition(320,240)
                          .setMovementBounds(20,620,460,20)
                          .setVelocity(.2)
                          .setResetPosition(320,240);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И, самое главное, проверка событий, произошедших с мячом. Для этого мы используем метод &lt;code&gt;schedule&lt;/code&gt; из &lt;code&gt;sheduleManager&lt;/code&gt;, он вызывает переданную функцию в каждом кадре, сообщая о прошедшем с предыдущего кадра времени. Пока будем хаять проигравшего в консоли, а в следущей подглаве сделаем для этого &lt;code&gt;Label&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
goog.events.listen(. . .);

var hitPos_;
lime.scheduleManager.schedule(function(dt){
    if (hitPos_ = ball.updateAndCheckHit(dt, playerOne, playerTwo)) {
       console.log(&amp;#39;player&amp;#39;,(hitPos_.x &amp;lt;= 320) ? 1 : 2,&amp;#39;is a loser&amp;#39;);
    };
},ball);

director.replaceScene(scene);

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;сообщение-о-проигрыше&#34;&gt;&lt;a href=&#34;#сообщение-о-проигрыше&#34; title=&#34;Сообщение о проигрыше&#34;&gt;Сообщение о проигрыше&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Теперь добавим лэйбл, который будет сообщать о проигравшем игроке. Не будем сильно заморачиваться отсчитывая очки, просто напишем кто пропустил мяч:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
ball = . . .
       .setResetPosition(320,240),

label = new lime.Label().setPosition(280,30)
                        .setText(&amp;#39;&amp;#39;).setFontFamily(&amp;#39;Verdana&amp;#39;)
                        .setFontColor(&amp;#39;#c00&amp;#39;).setFontSize(18)
                        .setFontWeight(&amp;#39;bold&amp;#39;).setSize(150,30);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Не забудем добавить лейбл на слой с доской:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
board_.appendChild(ball);
board_.appendChild(label);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И, исправим вывод текста о проигрыше на лейбл вместо консоли:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
goog.events.listen(. . .);

var hitPos_ = null, defDelay_ = 500, delay_ = defDelay_;
lime.scheduleManager.schedule(function(dt){
    delay_ -= dt;
    if (delay_ &amp;lt;= 0) label.setText(&amp;#39;&amp;#39;);
    if (hitPos_ = ball.updateAndCheckHit(dt, playerOne, playerTwo)) {
       label.setText(&amp;#39;player &amp;#39; + ((hitPos_.x &amp;lt;= 320) ? 1 : 2) + &amp;#39; is a loser&amp;#39;);
       delay_ = defDelay_;
    };
},ball);

director.replaceScene(scene);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Всё, мячик летается по полю, отбивается от игроков, пропустивший наказывается страшной красной надписью - для демонстрационной игры, я считаю, достаточно.&lt;/p&gt;
&lt;h4 id=&#34;марафет&#34;&gt;&lt;a href=&#34;#марафет&#34; title=&#34;Марафет&#34;&gt;Марафет&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Отлично, теперь давайте наведём небольшой марафет, чтобы продемонстрировать работу с градиентами и текстурами.&lt;/p&gt;

&lt;p&gt;Сделаем фон приятного зелёно-травяного цвета - поменяем инициализацию фоновых спрайтов в &lt;code&gt;pingpong.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
floor_.appendChild(new lime.Sprite().setPosition(160,240)
                                    .setSize(321,480)
                                    .setFill(new lime.fill.LinearGradient()
                                                     .setDirection(0,1,1,0)
                                                     .addColorStop(0,0,92,0,1)
                                                     .addColorStop(1,134,200,105,1)));
floor_.appendChild(new lime.Sprite().setPosition(480,240)
                                    .setSize(320,480)
                                    .setFill(new lime.fill.LinearGradient()
                                                     .setDirection(1,1,0,0)
                                                     .addColorStop(0,0,92,0,1)
                                                     .addColorStop(1,134,200,105,1)));

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Сделаем игрокам (&lt;code&gt;player.js&lt;/code&gt;) немного прозрачный синий морской градиент:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
this.addPoints(-50,-125, 0,-175, 50,-125, 50,125, 0,175, -50,125, 0,75, 0,-75)
    .setFill(new lime.fill.LinearGradient()
                          .setDirection(0,1,1,0)
                          .addColorStop(0,0,0,210,.7)
                          .addColorStop(1,0,0,105,.7))
    .setScale(.4);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Мячу (&lt;code&gt;ball.js&lt;/code&gt;) поставим текстуру с мячиком:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
this.setFill(&amp;#39;./ball.png&amp;#39;)
    .setSize(20,20);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Стену (&lt;code&gt;wall.js&lt;/code&gt;) раскрасим в бетонно-синий цвет и отнаследуем от &lt;code&gt;RoundedRect&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
pingpong.Wall = function() {
    goog.base(this);

    this.setFill(109,122,181)
        .setSize(20,20)
        .setRadius(3);
}
goog.inherits(pingpong.Wall, lime.RoundedRect);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вот, теперь у нас всё выглядит много симпатичнее:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/stage-designed.png&#34; alt=&#34;Мужчины в синих шортах на футбольном поле с детским мячиком&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;компиляция&#34;&gt;&lt;a href=&#34;#компиляция&#34; title=&#34;Компиляция&#34;&gt;Компиляция&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Итак, демонстрационная игра готова. Исходники, которые получились у меня:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://paste.pocoo.org/show/338943/&#34;&gt;&lt;code&gt;pingpong.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338944/&#34;&gt;&lt;code&gt;player.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338945/&#34;&gt;&lt;code&gt;ball.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338946/&#34;&gt;&lt;code&gt;wall.js&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://dl.dropbox.com/u/928694/test-pingpong/ball.png&#34;&gt;&lt;code&gt;ball.png&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/338948/&#34;&gt;&lt;code&gt;pingpong.html&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Теперь перепроверьте все &lt;code&gt;goog.require&lt;/code&gt; - уберите неиспользуемые вызовы, затем обновите зависимости и соберите всё в один скрипт:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/lime.py update
$ ./bin/lime.py build pingpong -o pingpong/compiled/pp.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь в папку &lt;code&gt;compiled&lt;/code&gt; можно скопировать &lt;code&gt;pingpong.html&lt;/code&gt; и в заголовке поменять&lt;br&gt;
вызовы JavaScript:&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
&amp;lt;!DOCTYPE HTML&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;pingpong&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;pp.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body onload=&amp;#34;pingpong.start()&amp;#34;&amp;gt;&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;резюме&#34;&gt;&lt;a href=&#34;#резюме&#34; title=&#34;Резюме&#34;&gt;Резюме&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Сначала я относился к движку немного скептически, представленные на сайте две (всего) игры чересчур каузальны, я не очень это люблю. Мало примеров и подробностей в документации и многовато всего нужно для установки. И ещё очень кислотный незамысловатый квадратик в &lt;code&gt;favicon&lt;/code&gt;&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;Но потом я поиграл в игру с числами и она оказалась довольно-таки захватывающей (похожа на &lt;code&gt;Super 7 HD&lt;/code&gt; для iPad - попроще конечно, раз демка). А потом, когда потренировался при написании игры из статьи, всё оказалось довольно удобно, продумано и даже минималистично. Есть мелкие сырости и неосвещённые в документации вещи, но если код forward-compatible, то почему-бы и нет - ребята прямо сейчас исправляют все эти вещи.&lt;/p&gt;

&lt;p&gt;Главное - это действительно не state-machine, которые сейчас модно делать - здесь можно отталкиваться от сценария игры, привязываясь к событиям, а не ко времени или текущему кадру, вам не надо думать как оптимизировать отрисовку многих объектов в следующем кадре - да, почти что Flash, жаль что без редактора.&lt;/p&gt;
&lt;h3 id=&#34;видео&#34;&gt;&lt;a href=&#34;#видео&#34; title=&#34;Видео&#34;&gt;Видео&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/19973495&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/19973495&#34;&gt;LimeJS Engine demonstation on iPhone - PingPong game&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;
&lt;iframe src=&#34;http://player.vimeo.com/video/19973601&#34; width=&#34;400&#34; height=&#34;706&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/19973601&#34;&gt;LimeJS Engine demonstation on Android - PingPong game&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;
&lt;iframe src=&#34;http://player.vimeo.com/video/19973167&#34; width=&#34;400&#34; height=&#34;225&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/19973167&#34;&gt;LimeJS Engine demonstation on iPad - PingPong game&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;(Видео записаны с помощью авторов движка)&lt;/p&gt;
&lt;h3 id=&#34;поиграть&#34;&gt;&lt;a href=&#34;#поиграть&#34; title=&#34;Поиграть&#34;&gt;Поиграть&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://shamansir.madfire.net/_pingpong/pingpong.html&#34;&gt;Здесь можно попробовать поиграть&lt;/a&gt; (может глючить, потому что это очень упрощённая версия, сравнивайте пожалуйста ожидания работы на вашей платформе с приведёнными выше видео)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/limejs-writing-a-game/qrcode.png&#34; alt=&#34;QRCode&#34;&gt;&lt;/p&gt;

&lt;p&gt;P.S. Отдельное спасибо &lt;a href=&#34;http://www.lazio.com.ua/&#34;&gt;lazio_od&lt;/a&gt;, он помогал мне в тестировании одновременно с авторами движка.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Разбирая фонтан на Renderscript</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/android-renderscript-example-translation/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/android-renderscript-example-translation/</id>
                <updated>2011-02-11T00:46:00Z</updated>
                
                <summary type="html">&lt;strong&gt;Примечание&lt;/strong&gt;: Это не авторская статья, но мой вольный перевод &lt;a href=&#34;http://www.inter-fuser.com/2009/11/android-renderscript-more-info-and.html&#34;&gt;статьи из далёкого 2009 года&lt;/a&gt;, в которой написавший её &lt;a href=&#34;http://www.inter-fuser.com/&#34;&gt;Neil Davies&lt;/a&gt; знакомится с Renderscript и разбирает (не запуская) код из примера Fountain, выдранного из исходников Android. Что такое Renderscript и как он относится к Андроидам подробно рассказано &lt;a href=&#34;http://habrahabr.ru/blogs/android_development/113535/&#34;&gt;здесь&lt;/a&gt;; вкратце - это возможность нативной (без каких-либо прослоек) работы с 3D-механизмами мобильных систем на Android. Вот, кстати, &lt;a href=&#34;http://www.andrada-dev.org/android-sdk-mac_x86/samples/android-Honeycomb/RenderScript/Fountain/src/com/android/fountain/&#34;&gt;исходники этого самого примера&lt;/a&gt; в Honeycomb. Я осознаю, что эта статья не содержит ничего большего чем  разбор исходников, но это пока единственная статья на тему которая, возможно, поможет кому-то легче вникнуть в эту самую тему, чтобы быть в теме&amp;hellip; короче:</summary>
                <content type="html">&lt;p&gt;&lt;strong&gt;Примечание&lt;/strong&gt;: Это не авторская статья, но мой вольный перевод &lt;a href=&#34;http://www.inter-fuser.com/2009/11/android-renderscript-more-info-and.html&#34;&gt;статьи из далёкого 2009 года&lt;/a&gt;, в которой написавший её &lt;a href=&#34;http://www.inter-fuser.com/&#34;&gt;Neil Davies&lt;/a&gt; знакомится с Renderscript и разбирает (не запуская) код из примера Fountain, выдранного из исходников Android. Что такое Renderscript и как он относится к Андроидам подробно рассказано &lt;a href=&#34;http://habrahabr.ru/blogs/android_development/113535/&#34;&gt;здесь&lt;/a&gt;; вкратце - это возможность нативной (без каких-либо прослоек) работы с 3D-механизмами мобильных систем на Android. Вот, кстати, &lt;a href=&#34;http://www.andrada-dev.org/android-sdk-mac_x86/samples/android-Honeycomb/RenderScript/Fountain/src/com/android/fountain/&#34;&gt;исходники этого самого примера&lt;/a&gt; в Honeycomb. Я осознаю, что эта статья не содержит ничего большего чем  разбор исходников, но это пока единственная статья на тему которая, возможно, поможет кому-то легче вникнуть в эту самую тему, чтобы быть в теме&amp;hellip; короче:&lt;/p&gt;
&lt;h3 id=&#34;разбирая-фонтан-на-renderscript&#34;&gt;&lt;a href=&#34;#разбирая-фонтан-на-renderscript&#34; title=&#34;Разбирая фонтан на Renderscript&#34;&gt;Разбирая фонтан на Renderscript&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вот несколько суждений, которые я вывел для себя, столкнувшись с Renderscript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Комилируется на самом устройстве&lt;/li&gt;
&lt;li&gt;Использует компилятор &lt;code&gt;acc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Нет проблем с поддержкой различных архитектур&lt;/li&gt;
&lt;li&gt;Не используются внешние библиотеки&lt;/li&gt;
&lt;li&gt;Никаких &lt;code&gt;#include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Не разрешается выделять память&lt;/li&gt;
&lt;li&gt;Довольно предсказуем&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Я признаю, что некоторые из этих утверждений не особо информативны, но на данный момент особо и негде развернуться. Стоит заметить, что сам язык компилируем и похож на C но, похоже, не имеет всей силы C, поскольку выделения памяти запрещены.&lt;/p&gt;

&lt;p&gt;В попытках пролить для себя больше света на суть проблемы, я ещё раз взглянул на исходные коды и нашёл пару простых примеров, использующих renderscript, представленных в виде Android-приложений. Один из этих примеров назывался Fountain и, похоже, был наиболее простым из этих приложений, так что я решил - начну именно с него.&lt;/p&gt;
&lt;h4 id=&#34;пример-fountain-на-android-renderscript&#34;&gt;&lt;a href=&#34;#пример-fountain-на-android-renderscript&#34; title=&#34;Пример Fountain на Android Renderscript&#34;&gt;Пример Fountain на Android Renderscript&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Что делает это приложение? Я не особо знаю: я не запускал его самостоятельно и, честно говоря, в коде не так много комментариев, поэтому и правда стоит приглядеться к коду и разобраться. Лучшее, что я мог предположить - это то, что оно воспроизводит схожую с фонтаном анимацию, в которой случайные точки взлетают вверх и вылетают вовне экрана, подобно потокам воды в фонтанах. Анимация запускается когда пользователь прикасается к экрану, взяв эту точку прикосновения за отправную. Это то что я предполагаю, основываясь на исходном коде примера.&lt;/p&gt;

&lt;p&gt;Хорошо, так как же всё-таки выглядит код? Сперва давайте взглянем на файлы и на то, как они упорядочены. Структура такова:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Android.mk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drawable&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gadgets_clock_mp3.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;raw

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fountain.c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com/android/fountain&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fountain.java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FountainRS.java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FountainView.java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Большая часть из того, что мы видим - это привычное нам приложение для Android: у нас присутствуют основные android-файлы такие как &lt;code&gt;AndroidManifest&lt;/code&gt;. Потом, у нас есть каталог &lt;code&gt;src&lt;/code&gt;, в нём хранятся исходные файлы приложения; и ещё у нас есть каталог &lt;code&gt;res&lt;/code&gt;, ничего особенного поскольку он содержит каталоги &lt;code&gt;drawable&lt;/code&gt; и &lt;code&gt;raw&lt;/code&gt;&amp;hellip; но, как вы можете заметить, каталог &lt;code&gt;raw&lt;/code&gt; содержит один очень интересный и вполне себе особенный файл, и имя ему &lt;code&gt;fountain.c&lt;/code&gt;. Вот где, похоже, покоится код на Renderscript, пусть имя файла и пытается навязать нам, что это файл с исходниками на C. Давайте же взглянем на то, что содержится в этом файле:&lt;/p&gt;
&lt;pre lang=&#34;cpp&#34;&gt;&lt;code&gt;
// Fountain test script
#pragma version(1)

int newPart = 0;

int main(int launchID) {
    int ct;
    int count = Control-&amp;gt;count;
    int rate = Control-&amp;gt;rate;
    float height = getHeight();
    struct point_s * p = (struct point_s *)point;

    if (rate) {
        float rMax = ((float)rate) * 0.005f;
        int x = Control-&amp;gt;x;
        int y = Control-&amp;gt;y;
        char r = Control-&amp;gt;r * 255.f;
        char g = Control-&amp;gt;g * 255.f;
        char b = Control-&amp;gt;b * 255.f;
        struct point_s * np = &amp;amp;p[newPart];

        while (rate--) {
            vec2Rand((float *)np, rMax);
            np-&amp;gt;x = x;
            np-&amp;gt;y = y;
            np-&amp;gt;r = r;
            np-&amp;gt;g = g;
            np-&amp;gt;b = b;
            np-&amp;gt;a = 0xf0;
            newPart++;
            np++;
            if (newPart &amp;gt;= count) {
                newPart = 0;
                np = &amp;amp;p[newPart];
            }
        }
    }

    for (ct=0; ct &amp;lt; count; ct++) {
        float dy = p-&amp;gt;dy + 0.15f;
        float posy = p-&amp;gt;y + dy;
        if ((posy &amp;gt; height) &amp;amp;&amp;amp; (dy &amp;gt; 0)) {
            dy *= -0.3f;
        }
        p-&amp;gt;dy = dy;
        p-&amp;gt;x += p-&amp;gt;dx;
        p-&amp;gt;y = posy;
        p++;
    }

    uploadToBufferObject(NAMED_PartBuffer);
    drawSimpleMesh(NAMED_PartMesh);
    return 1;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Да, очень смахивает на C. Есть структуры, указатели и символы. Начнём с первых строк файла. Есть некий класс или структура &lt;code&gt;Control&lt;/code&gt;, из которой мы получаем информацию количестве и частоте распостранения частиц, а также значения &lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; и &lt;code&gt;r&lt;/code&gt;,&lt;code&gt;g&lt;/code&gt;,&lt;code&gt;b&lt;/code&gt;. Но где же создаётся структура &lt;code&gt;Control&lt;/code&gt;? Я вернусь к этому вопросу. Другая структура, которая используется в коде - это &lt;code&gt;point_s&lt;/code&gt;. Эта структура тоже содержит координаты &lt;code&gt;x&lt;/code&gt; и &lt;code&gt;y&lt;/code&gt;, значения &lt;code&gt;r&lt;/code&gt;,&lt;code&gt;g&lt;/code&gt;,&lt;code&gt;b&lt;/code&gt;, которые, скорее всего представляют собой красный, зелёный и синий компоненты цвета, и значение &lt;code&gt;a&lt;/code&gt; которое является величиной прозрачности (&lt;code&gt;alpha&lt;/code&gt;). Без дополнительной информации я не могу точно сказать, что происходит в этом коде, но я предполагаю, что скорее всего на основе переданного массива точек создаётся массив новых точек, и всё это чтобы создать какую-то анимацию.&lt;/p&gt;

&lt;p&gt;Если мы посмотрим на каталог &lt;code&gt;src&lt;/code&gt; с исходными кодами - там у нас лежат три файла &lt;code&gt;.java&lt;/code&gt;. &lt;code&gt;Fountain.java&lt;/code&gt;, &lt;code&gt;FountainView.java&lt;/code&gt; и &lt;code&gt;FountainRS.java&lt;/code&gt;. &lt;code&gt;Fountain.java&lt;/code&gt; - это обычный потомок &lt;code&gt;Activity&lt;/code&gt;, который в методе &lt;code&gt;onCreate&lt;/code&gt; устанавливает &lt;code&gt;contentView&lt;/code&gt; в экземпляр &lt;code&gt;FountainView&lt;/code&gt;. Исходный код файла &lt;code&gt;FountainView.java&lt;/code&gt; выглядит так:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.fountain;

import java.io.Writer;
import java.util.ArrayList;
import java.util.concurrent.Semaphore;

import android.renderscript.RSSurfaceView;
import android.renderscript.RenderScript;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.Log;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.KeyEvent;
import android.view.MotionEvent;

public class FountainView extends RSSurfaceView {

    public FountainView(Context context) {
        super(context);
        //setFocusable(true);
    }

    private RenderScript mRS;
    private FountainRS mRender;

    private void destroyRS() {
        if(mRS != null) {
            mRS = null;
            destroyRenderScript();
        }
        java.lang.System.gc();
    }

    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
        super.surfaceChanged(holder, format, w, h);
        destroyRS();
        mRS = createRenderScript(false, true);
        mRender = new FountainRS();
        mRender.init(mRS, getResources(), w, h);
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
        // Surface will be destroyed when we return
        destroyRS();
    }



    @Override
    public boolean onTouchEvent(MotionEvent ev)
    {
        int act = ev.getAction();
        if (act == ev.ACTION_UP) {
            mRender.newTouchPosition(0, 0, 0);
            return false;
        }
        float rate = (ev.getPressure() * 50.f);
        rate *= rate;
        if(rate &amp;gt; 2000.f) {
            rate = 2000.f;
        }
        mRender.newTouchPosition((int)ev.getX(), (int)ev.getY(), (int)rate);
        return true;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Класс &lt;code&gt;FountainView&lt;/code&gt; - это вид (&lt;code&gt;View&lt;/code&gt;) в контексте понятий Android. Как вы можете увидеть из кода, &lt;code&gt;FountainView&lt;/code&gt; наследуется от нового подтипа видов по имени &lt;code&gt;RSSurfaceView&lt;/code&gt; (&lt;strong&gt;Пер.:&lt;/strong&gt; RSS тут не при чём, не запутайтесь). У него также есть ссылки на экземпляры классов &lt;code&gt;RenderScript&lt;/code&gt; и описанного нами &lt;code&gt;FountainRS&lt;/code&gt;. При создании новой поверхности (&lt;code&gt;surface&lt;/code&gt;) в методе &lt;code&gt;surfaceChanged&lt;/code&gt; кроме прочего создаются эти экземпляры и устанавливаются соответствующие ссылки. Здесь же мы вызывам метод &lt;code&gt;init&lt;/code&gt; класса &lt;code&gt;FountainRS&lt;/code&gt; и передаём несколько аргументов, включая ссылку на объект &lt;code&gt;RenderScript&lt;/code&gt;. Так что давайте, наконец, посмотрим на файл &lt;code&gt;FountainRS.java&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.fountain;

import android.content.res.Resources;
import android.renderscript.*;
import android.util.Log;


public class FountainRS {
    public static final int PART_COUNT = 20000;

    static class SomeData {
        public int x;
        public int y;
        public int rate;
        public int count;
        public float r;
        public float g;
        public float b;
    }

    public FountainRS() {
    }

    public void init(RenderScript rs, Resources res, int width, int height) {
        mRS = rs;
        mRes = res;
        initRS();
    }

    public void newTouchPosition(int x, int y, int rate) {
        if (mSD.rate == 0) {
            mSD.r = ((x &amp;amp; 0x1) != 0) ? 0.f : 1.f;
            mSD.g = ((x &amp;amp; 0x2) != 0) ? 0.f : 1.f;
            mSD.b = ((x &amp;amp; 0x4) != 0) ? 0.f : 1.f;
            if ((mSD.r + mSD.g + mSD.b) &amp;lt; 0.9f) {
                mSD.r = 0.8f;
                mSD.g = 0.5f;
                mSD.b = 1.f;
            }
        }
        mSD.rate = rate;
        mSD.x = x;
        mSD.y = y;
        mIntAlloc.data(mSD);
    }


    /////////////////////////////////////////

    private Resources mRes;

    private RenderScript mRS;
    private Allocation mIntAlloc;
    private SimpleMesh mSM;
    private SomeData mSD;
    private Type mSDType;

    private void initRS() {
        mSD = new SomeData();
        mSDType = Type.createFromClass(mRS, SomeData.class, 1, &amp;#34;SomeData&amp;#34;);
        mIntAlloc = Allocation.createTyped(mRS, mSDType);
        mSD.count = PART_COUNT;
        mIntAlloc.data(mSD);

        Element.Builder eb = new Element.Builder(mRS);
        eb.addFloat(Element.DataKind.USER, &amp;#34;dx&amp;#34;);
        eb.addFloat(Element.DataKind.USER, &amp;#34;dy&amp;#34;);
        eb.addFloatXY(&amp;#34;&amp;#34;);
        eb.addUNorm8RGBA(&amp;#34;&amp;#34;);
        Element primElement = eb.create();


        SimpleMesh.Builder smb = new SimpleMesh.Builder(mRS);
        int vtxSlot = smb.addVertexType(primElement, PART_COUNT);
        smb.setPrimitive(Primitive.POINT);
        mSM = smb.create();
        mSM.setName(&amp;#34;PartMesh&amp;#34;);

        Allocation partAlloc = mSM.createVertexAllocation(vtxSlot);
        partAlloc.setName(&amp;#34;PartBuffer&amp;#34;);
        mSM.bindVertexAllocation(partAlloc, 0);

        // All setup of named objects should be done by this point
        // because we are about to compile the script.
        ScriptC.Builder sb = new ScriptC.Builder(mRS);
        sb.setScript(mRes, R.raw.fountain);
        sb.setRoot(true);
        sb.setType(mSDType, &amp;#34;Control&amp;#34;, 0);
        sb.setType(mSM.getVertexType(0), &amp;#34;point&amp;#34;, 1);
        Script script = sb.create();
        script.setClearColor(0.0f, 0.0f, 0.0f, 1.0f);

        script.bindAllocation(mIntAlloc, 0);
        script.bindAllocation(partAlloc, 1);
        mRS.contextBindRootScript(script);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Я не буду подробно рассматривать каждую строчку этого файла но, похоже, самые интересные вещи находятся в функции &lt;code&gt;initRS&lt;/code&gt;. Там у нас есть построитель элементов (&lt;code&gt;element builder&lt;/code&gt;), построитель простейших моделей (&lt;code&gt;Simple Mesh builder&lt;/code&gt;) и последнее, но совсем не маловажное - у нас есть &lt;em&gt;построитель скриптов&lt;/em&gt; (&lt;code&gt;script builder&lt;/code&gt;). Мы получаем экземпляр скрипта, связав его с файлом &lt;code&gt;fountain.c&lt;/code&gt; и устанавливаем необходимые типы, такие как &lt;code&gt;Control&lt;/code&gt; и &lt;code&gt;point&lt;/code&gt; (помните, они использовались в файле &lt;code&gt;fountain.c&lt;/code&gt;?), а затем создаём и привязываем к контексту сценарий (&lt;strong&gt;Пер.:&lt;/strong&gt; как видно, скрипт компилируется во время исполнения Java-кода).&lt;/p&gt;

&lt;p&gt;Ну, вот оно и есть - быстрый взгляд на то, как должен использоваться Renderscript. Всё ещё остаётся множетсво неотвеченных вопросов, и много остаётся ещё изучить о том как может, и как сможет, работать Renderscript, но я надеюсь что эти несколько выдержек из кода дадут, по крайней мере, людям начальную точку. Ну и как всегда, если ещё кто-то [в этом мире] знает какие-либо интересные подробности или комментарии, я бы был очень заинтересован &lt;a href=&#34;http://www.inter-fuser.com/2009/11/android-renderscript-more-info-and.html#comment-form&#34;&gt;их услышать&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>3 Маленьких JS-Сниппета</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/3-tiny-javascript-snippets/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/3-tiny-javascript-snippets/</id>
                <updated>2011-02-03T00:46:00Z</updated>
                
                <summary type="html">В данный момент я делаю разные вещи на JavaScript и мне нужно, чтобы код с которым я работаю, был насколько возможно лёгок и прост. Лёгок и прост так же, как и эта статья. Но есть вещи, которые для комфортного программирования мне обязательны. Поэтому и от них тоже я требую лёгкости и простоты.</summary>
                <content type="html">&lt;p&gt;В данный момент я делаю разные вещи на JavaScript и мне нужно, чтобы код с которым я работаю, был насколько возможно лёгок и прост. Лёгок и прост так же, как и эта статья. Но есть вещи, которые для комфортного программирования мне обязательны. Поэтому и от них тоже я требую лёгкости и простоты.&lt;/p&gt;
&lt;h3 id=&#34;сниппет-первый.-двустрочный-each-одна-функция&#34;&gt;&lt;a href=&#34;#сниппет-первый.-двустрочный-each-одна-функция&#34; title=&#34;Сниппет первый. Двустрочный each (одна функция)&#34;&gt;Сниппет первый. Двустрочный each (одна функция)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Работает с массивами и объектами. В случае объектов в колбэк передаются ключ и значение. В случае массивов - элемент.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/**
 * Нано-each
 * @param {Array, Object} iterable сущность, по которой производится итерирование
 * @param {Function} func вызвается на каждой итерации, в режиме массива принимает элемент (func(elem)),
                                                        в режиме объекта принимает ключ и значение (func(v, k))
 */
function each(iterable, func) {
    if (iterable instanceof Array) for (var i = 0; i &amp;lt; iterable.length; i++) func.call(iterable, iterable[i]);
    else if (iterable instanceof Object) for (field in iterable) func.call(iterable, iterable[field], field);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;сниппет-второй.-быстрое-создание-объекта-одиночное-наследование-одна-функция&#34;&gt;&lt;a href=&#34;#сниппет-второй.-быстрое-создание-объекта-одиночное-наследование-одна-функция&#34; title=&#34;Сниппет второй. Быстрое создание объекта (Одиночное наследование, одна функция)&#34;&gt;Сниппет второй. Быстрое создание объекта (Одиночное наследование, одна функция)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Это совсем чуть-чуть изменённая версия &lt;a href=&#34;http://www.willmcgugan.com/blog/tech/2009/12/5/javascript-snippets/&#34;&gt;из этой прелестной статьи&lt;/a&gt;. Кстати, функция &lt;code&gt;bind&lt;/code&gt; полезна для случаев типа такого: &lt;code&gt;var catMeow = bind(cat, Cat.meow);&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function class_(def) {
    var _proto = def;
    if (def[&amp;#39;_extends&amp;#39;] !== undefined) {
        var _ex = def[&amp;#39;_extends&amp;#39;];
        if (typeof _ex === &amp;#39;function&amp;#39;) {
            each(_ex.prototype, function(v, k){
                if (_proto[k] === undefined) {
                    _proto[k] = v;
                } else {
                    _proto[&amp;#39;_s_&amp;#39;+k] = v;
                }
            });
        } else throw new Error(&amp;#39;Wrong _extends field&amp;#39;);
    }

    var _init = def[&amp;#39;_init&amp;#39;];
    if (_init === undefined) {
        _init = function() {
            if (this.prototype[&amp;#39;_s__init&amp;#39;]) this._init_super();
        }
    }
    _init.prototype = _proto;

    def[&amp;#39;hasOwnProperty&amp;#39;] = function(k) {
        return (k !== &amp;#39;hasOwnProperty&amp;#39;)
               &amp;amp;&amp;amp; (Object.prototype.hasOwnProperty.call(this, k)
                  || Object.prototype.hasOwnProperty.call(_proto, k));
    }

    return _init;
}

function bind(obj, method) {
    return function() { return method.apply(obj, arguments); }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;использование&#34;&gt;&lt;a href=&#34;#использование&#34; title=&#34;Использование&#34;&gt;Использование&lt;/a&gt;&lt;/h4&gt;&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var Base = class_({

    _init: function(a, b) {
        this.a = a;
        this.b = b;
    }

    someMethod: function() {
        console.log(&amp;#39;parent&amp;#39;);
    }

});

var Child = class_({

    _extends: Base,

    _init: function(c) {
        this._s__init(5, 6);
        this.c = 7;
        console.log(this.a);
        console.log(this.b);
        console.log(this.c);
    },

    someMethod: function() {
        this._s_someMethod();
        console.log(&amp;#39;child&amp;#39;);
    }

});

var b = new Base();
var c = new Child();

b.someMethod();
c.someMethod();

console.log(b instanceof Base);
console.log(b instanceof Child);
console.log(c instanceof Base);
console.log(c instanceof Child);

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;сниппет-третий.-легкий-механизм-тестирования-одна-или-две-функции&#34;&gt;&lt;a href=&#34;#сниппет-третий.-легкий-механизм-тестирования-одна-или-две-функции&#34; title=&#34;Сниппет третий. Легкий механизм тестирования (одна или две функции)&#34;&gt;Сниппет третий. Легкий механизм тестирования (одна или две функции)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для быстрого TDD, если вам оно нравится. Если вам нужно просто проверять ассерты, а не запускать большие сложные тесты, берите только &lt;code&gt;AssertException&lt;/code&gt; и функцию &lt;code&gt;assert&lt;/code&gt; - это всё что вам нужно. Если нет, &lt;code&gt;runTests&lt;/code&gt; позволяет вам запускать &lt;code&gt;JUnit&lt;/code&gt;-подобные коллекции текстов, даже с использованием  &lt;code&gt;setUp&lt;/code&gt; и &lt;code&gt;tearDown&lt;/code&gt;. (Использует консоль для вывода результатов тестов, так что в этом варианте может работать только в Firefox и WebKit)&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function AssertException(result, expectation) { this.result = result;
                                                this.expectation = expectation; }
AssertException.prototype.toString = function () {
    if (this.expectation) return (&amp;#39;AssertException: Expected: &amp;#39; + this.expectation + &amp;#39; Got: &amp;#39; + this.result);
    else return (&amp;#39;AssertException: Got: &amp;#39; + this.result);
}

/**
 * Нано-ассерт
 * @param {Boolean} test тестируемое выражение
 * @param {String} [_expectation] что ожидалось
 * @throws {AssertException} если ассерт не прошёл
 */
function assert(test, _expectation) {
    if (!test) throw new AssertException(test, _expectation);
}

function _assert(test, val, expectation) {
    if (!test) throw new AssertException(val, expectation);
}

function assertNotNull(test) { _assert(test !== null, test + &amp;#39; == null&amp;#39;, &amp;#39;not null&amp;#39;); }
function assertDefined(test) { _assert(test !== undefined, test + &amp;#39; !== undefined&amp;#39;, &amp;#39;defined&amp;#39;); }
function assertTrue(test) { _assert(test, test + &amp;#39; != true&amp;#39;, &amp;#39;true&amp;#39;); }
function assertFalse(test) { _assert(!test, test + &amp;#39; != false&amp;#39;, &amp;#39;false&amp;#39;); }
function assertEquals(first, second) { _assert(first === second, first + &amp;#39; != &amp;#39; + second, second + &amp;#39; == &amp;#39; + second); }
function assertInstance(test, cls) { _assert(test instanceof cls, test + &amp;#39; not instance of &amp;#39; + cls, test + &amp;#39; instance of &amp;#39; + cls); }
function assertType(test, typename) { _assert(typeof test == typename, test + &amp;#39; is not of type &amp;#39; + typename, test + &amp;#39; has type &amp;#39; + typename); }

/**
 * Гонщик тестов
 * @param {Object, Function} suite для параметров типа функция,
                                       вызывает эту функцию и пишет в консоль Firebug если какой-либо ассерт не прошёл
                                   для параметров типа объект,
                                       работает как JUnit, вызывает каждый метод с именем начинающимся с &amp;#39;test...&amp;#39;,
                                       также в нужные моменты вызывает &amp;#39;setUp&amp;#39; и &amp;#39;tearDown&amp;#39;
                                       сообщает в консоль Firebug о пройденных/упавших тестах вместе с именем метода
 * @param {String} [_name] имя теста или коллекции тестов (используется только для того, чтобы помочь вам определить в логах что именно упало)
 * @param {String} [_stopWhenFailed] для режима объекта, прекращает выполнение тестов при первом упавшем ассерте
 * @returns {AssertException} в режиме функции - первый упавший ассерт, в режиме объектов - ничего не возвращается
 *
 * runTests(new SomeClass());
 * runTests(someFunc(), &amp;#39;someFunc&amp;#39;);
 */
var __tCount = 0,
    __fCount = 0;
function runTests(suite, _name, _stopWhenFailed) {
    if (typeof suite === &amp;#39;function&amp;#39;) { __fCount++;
        var field = (_name ? _name : (&amp;#39;Function &amp;#39; + __fCount));
        try { suite();
              console.info(&amp;#39;%s: %s&amp;#39;, field, &amp;#39;OK&amp;#39;);
        } catch (ex) {
            if (ex instanceof AssertException) {
                var info_ = &amp;#39;(&amp;#39; + field;
                if (ex.lineNumber) info_ += &amp;#39;:&amp;#39; + ex.lineNumber;
                if (ex.expectation)  console.error(&amp;#39;Assertion failed. Expected:&amp;#39;, ex.expectation,
                                                    &amp;#39;. Got:&amp;#39;, ex.result, info_ + &amp;#39;)&amp;#39;);
                else console.error(&amp;#39;Assertion failed. Got:&amp;#39;, ex.result, info_ + &amp;#39;)&amp;#39;);
                console.error(ex);
                console.warn(&amp;#39;%s: %s&amp;#39;, field, &amp;#39;FAILED&amp;#39;);
                return ex;
            } else {
                throw new Error(ex.toString());
            }
        }
    } else if (typeof suite === &amp;#39;object&amp;#39;) { __tCount++;
        var title = _name || (&amp;#34;Suite &amp;#34; + __tCount);
        console.group(title);
        for (var field in suite) {
            if ((typeof suite[field] === &amp;#39;function&amp;#39;) &amp;amp;&amp;amp;
                (field.indexOf(&amp;#39;test&amp;#39;) === 0) &amp;amp;&amp;amp; suite.hasOwnProperty(field)) {
                console.log(&amp;#39;Running&amp;#39;, title + &amp;#39; / &amp;#39; + field);
                if (suite.setUp) suite.setUp();
                var result = runTests(bind(suite, suite[field]), field);
                var passed = (result === null);
                if (_stopWhenFailed &amp;amp;&amp;amp; (result !== null)) return result;
                if (suite.tearDown) suite.tearDown();
            }
        }
        console.groupEnd();
    } else {
        throw new Exception(&amp;#39;Passed var has invalid type&amp;#39;);
    }
    return null;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;примеры&#34;&gt;&lt;a href=&#34;#примеры&#34; title=&#34;Примеры&#34;&gt;Примеры&lt;/a&gt;&lt;/h4&gt;&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var T1 = class_({

   _init: function() {  },

   setUp: function() { },

   test1: function() {
       assert(null == null);
       assert(12 == null, &amp;#39;12 == null&amp;#39;);
       assert(&amp;#39;a&amp;#39; == null);
       assertTrue(true);
       assertFalse(false);
       assertTrue(false);
       assertFalse(true);
       assertEquals(5, 5.1);
       assertEquals(5, 5);
       assertEquals(&amp;#39;a&amp;#39;, &amp;#39;ab&amp;#39;);
       assertEquals(&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;);
       assertType(12, &amp;#39;integer&amp;#39;);
       assertType(12, &amp;#39;string&amp;#39;);
       assertType(&amp;#39;12&amp;#39;, &amp;#39;string&amp;#39;);
       assertInstance(this, T1);
       assertInstance(this, Object);
       assertInstance(null, Object);
       assertNotNull(this);
       assertNotNull(null);
   },

   test2: function() {
       //throw new Error(&amp;#39;Alala&amp;#39;);
       assertEquals(6, 7.2);
   },

   tearDown: function() { }

});

var _f = function() {
    assertTrue(true);
    assertEquals(&amp;#39;12&amp;#39;, true);
}

runTests(new T1());
runTests(_f, &amp;#39;_f&amp;#39;);

new T1().test1();

_f();

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;тесты-для-сниппетов&#34;&gt;&lt;a href=&#34;#тесты-для-сниппетов&#34; title=&#34;Тесты для сниппетов&#34;&gt;Тесты для сниппетов&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;С использованием TDD-сниппета я написал общий Test Suite для всех трёх сниппетов, чтобы продемонстрировать их во взаимодействии:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://paste.pocoo.org/show/344963/&#34;&gt;Test Suite&lt;/a&gt; | &lt;a href=&#34;http://paste.pocoo.org/show/344962/&#34;&gt;Все сниппеты&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; См. тж. &lt;a href=&#34;https://github.com/theshock/nanojs&#34;&gt;atom.js&lt;/a&gt; (&lt;a href=&#34;http://habrahabr.ru/blogs/javascript/109762/&#34;&gt;статья&lt;/a&gt;)&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Ссылка: RoR IDE из gedit</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/ror-ide-gedit-link/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/ror-ide-gedit-link/</id>
                <updated>2011-01-02T00:46:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;http://www.jackyfox.com&#34;&gt;JackyFox&lt;/a&gt; написал &lt;a href=&#34;http://www.jackyfox.com/2010/12/27/ruby-on-rails-ide-iz-gedit-a/&#34;&gt;статью о GMate&lt;/a&gt;, пакете который позволяет сделать из GEdit практически TextMate, в частности включает полноценную поддержку Ruby</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;http://www.jackyfox.com&#34;&gt;JackyFox&lt;/a&gt; написал &lt;a href=&#34;http://www.jackyfox.com/2010/12/27/ruby-on-rails-ide-iz-gedit-a/&#34;&gt;статью о GMate&lt;/a&gt;, пакете который позволяет сделать из GEdit практически TextMate, в частности включает полноценную поддержку Ruby&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Моделируем солнечную систему в fluxus</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/fluxus-solar-system/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/fluxus-solar-system/</id>
                <updated>2010-12-06T00:46:00Z</updated>
                
                <summary type="html">Я &lt;a href=&#34;?post-about-fluxus&#34;&gt;уже писал&lt;/a&gt; про &lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;fluxus&lt;/a&gt;, систему livecoding и, по совместительству, 3D-прототипирования. Теперь хочу показать его возможности и как им можно пользоваться в целях, близких к псевдонаучным. Например, можно смоделировать и уместить упрощённую солнечную систему всего в 125 строк (это достоинство языка &lt;a href=&#34;http://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; с графическими стероидами, развития PLT Scheme, который лежит в основе fluxus). Вот как будет выглядеть результат:</summary>
                <content type="html">&lt;p&gt;Я &lt;a href=&#34;?post-about-fluxus&#34;&gt;уже писал&lt;/a&gt; про &lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;fluxus&lt;/a&gt;, систему livecoding и, по совместительству, 3D-прототипирования. Теперь хочу показать его возможности и как им можно пользоваться в целях, близких к псевдонаучным. Например, можно смоделировать и уместить упрощённую солнечную систему всего в 125 строк (это достоинство языка &lt;a href=&#34;http://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; с графическими стероидами, развития PLT Scheme, который лежит в основе fluxus). Вот как будет выглядеть результат:&lt;/p&gt;

&lt;p&gt;В посте исходники, краткое описание на русском и livecoding-видеоролики на славянском английском в подробностях рассматривающие и следящие за всем процессом написания этого сложного кода.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/blog/ru/figures/fluxus-solar-system/screen04.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/fluxus-solar-system/screen04-thumb.png&#34; alt=&#34;Screenshot 01&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/blog/ru/figures/fluxus-solar-system/screen05.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/fluxus-solar-system/screen05-thumb.png&#34; alt=&#34;Screenshot 02&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;исходники&#34;&gt;&lt;a href=&#34;#исходники&#34; title=&#34;Исходники&#34;&gt;Исходники&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://paste.pocoo.org/show/301220/&#34;&gt;ВОТ&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Заметка: Они были потеряны вместе с Poocoo, так что я попробую восстановить их из видео&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;описание&#34;&gt;&lt;a href=&#34;#описание&#34; title=&#34;Описание&#34;&gt;Описание&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fluxus использует понятие машины состояний для построения сцены. Если вы использовали в программировании OpenGL, вам знаком этот принцип - каждая последующая функция в коде либо изменяет матрицу состояния сцены, либо меняет само состояние сцены (например, отображает объект). Объекты для сцены можно построить предварительно до какого-либо рендеринга, а потом изменять их состояния или же рисовать новые примитивы в каждом кадре (OpenGL понимает, что неизмненяемые объекты можно кэшировать между кадрами). Я объединяю оба этих пути, подготавливая шрифтовые надписи и орбиты планет до рендеринга и рисуя планеты в каждом новом фрейме.&lt;/p&gt;

&lt;p&gt;Все данные об диаметрах, орбитальных радиусах и периодах обращения планет я банально брал из одной-единственной таблицы в &lt;a href=&#34;http://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%B0%D0%BD%D0%B5%D1%82%D0%B0#.D0.A1.D0.BE.D0.BB.D0.BD.D0.B5.D1.87.D0.BD.D0.B0.D1.8F_.D1.81.D0.B8.D1.81.D1.82.D0.B5.D0.BC.D0.B0&#34;&gt;статье из википедии&lt;/a&gt;. Что удобно, все нужные данные указаны в ней относительно Земли (так устроена астрономическая система измерений), поэтому диаметр Земли и земной год можно брать за единицы исчисления в нашей модели.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;А вы знаете, что расстояние от центра масс Солнца до центра масс Земли примерно равно 11740 диаметрам Земли? Это астрономическая единица (константа &lt;code&gt;astro-unit&lt;/code&gt;) и относительно неё измеряются расстояния от Солнца до планет. А кроме того, диаметр солнца вмещает 109 диаметров Земли (в модели диаметр Земли представлен константой &lt;code&gt;diameter-factor&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Зная эти данные, можно вычислять углы положений планет (в модели эллиптичность орбит не учитывается, это домашнее задание) и располагать их на модели.&lt;/p&gt;
&lt;h3 id=&#34;разбор-кода&#34;&gt;&lt;a href=&#34;#разбор-кода&#34; title=&#34;Разбор кода&#34;&gt;Разбор кода&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;описываются структуры звезды (&lt;code&gt;star&lt;/code&gt;), планеты (&lt;code&gt;planet&lt;/code&gt;) и планетной системы (она названа &lt;code&gt;star-system&lt;/code&gt; поскольку центром является звезда), состоящей из звезды и планет&lt;/li&gt;
&lt;li&gt;описываются функции

&lt;ul&gt;
&lt;li&gt;получения вектора переноса (&lt;code&gt;qtv&lt;/code&gt; - &lt;em&gt;quick translate vector&lt;/em&gt;) планеты на основе её орбитального радиуса и периода обращения&lt;/li&gt;
&lt;li&gt;получения вектора масштабирования (&lt;code&gt;qsv&lt;/code&gt; - &lt;em&gt;quick scale vector&lt;/em&gt;) планеты на основе её диаметра&lt;/li&gt;
&lt;li&gt;быстрого вычисления угла (&lt;code&gt;curang&lt;/code&gt;) положения планеты относительно точки (0, 0) (солнца) на основе периода обращения, используется в &lt;code&gt;qtv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;построения примитива орбиты (&lt;code&gt;build-orbit&lt;/code&gt;) на основе орбитального радиуса&lt;/li&gt;
&lt;li&gt;построения примитива метки (&lt;code&gt;qto&lt;/code&gt; - quick text object) планеты по переданной строке&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;создаётся звезда солнце, планеты и все они записываются в экземпляр &amp;ldquo;солнечная система&amp;rdquo; (&lt;code&gt;solar-system&lt;/code&gt;). при построении планет создаются примитивы меток для каждой.&lt;/li&gt;
&lt;li&gt;на основе данных о планетах строятся орбиты&lt;/li&gt;
&lt;li&gt;описываются функции

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;draw-star&lt;/code&gt;, рисующая звезду&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draw-planet&lt;/code&gt;, рисующая планету в нужной позиции относительно времени и перемещающая подготовленную текстовую метку в ту же позицию&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;описывается функция &lt;code&gt;render&lt;/code&gt;, которая поочерёдно рисует солнце и планеты, вызывая &lt;code&gt;draw-star&lt;/code&gt; и &lt;code&gt;draw-planet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render&lt;/code&gt; назначается в качестве функции, исполняющейся для каждого кадра&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;видеоролики&#34;&gt;&lt;a href=&#34;#видеоролики&#34; title=&#34;Видеоролики&#34;&gt;Видеоролики&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/17502661&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/17502661&#34;&gt;Fluxus Livecoding: Building 3D Solar System / Part 1&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/17515694&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/17515694&#34;&gt;Fluxus Livecoding: Building 3D Solar System / Part 2&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/17516078&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/17516078&#34;&gt;Fluxus Livecoding: Building 3D Solar System / Part 3&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Sandwitch: Тема для Tumblr</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/tumblr-sandwitch-theme/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/tumblr-sandwitch-theme/</id>
                <updated>2010-12-02T00:46:00Z</updated>
                
                <summary type="html">Сделал &lt;a href=&#34;http://www.tumblr.com/theme/18012&#34;&gt;тему для Tumblr&lt;/a&gt; под названием &lt;a href=&#34;http://uncyclopedia.wikia.com/wiki/Sandwitch&#34;&gt;Sandwitch&lt;/a&gt;. Хотел чтобы tumblr-блог был похож стилем на тот, который я сделал для движка &lt;a href=&#34;http://code.google.com/p/showdown-blog/&#34;&gt;showdown blog&lt;/a&gt;, а получилось даже лучше!</summary>
                <content type="html">&lt;p&gt;Сделал &lt;a href=&#34;http://www.tumblr.com/theme/18012&#34;&gt;тему для Tumblr&lt;/a&gt; под названием &lt;a href=&#34;http://uncyclopedia.wikia.com/wiki/Sandwitch&#34;&gt;Sandwitch&lt;/a&gt;. Хотел чтобы tumblr-блог был похож стилем на тот, который я сделал для движка &lt;a href=&#34;http://code.google.com/p/showdown-blog/&#34;&gt;showdown blog&lt;/a&gt;, а получилось даже лучше!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/tumblr-sandwitch-theme/screen.png&#34; alt=&#34;Скриншот&#34;&gt;&lt;/p&gt;

&lt;p&gt;В настройках темы можно включить трансляцию последних твитов, прикрутить &lt;a href=&#34;http://disqus.com&#34;&gt;Disqus&lt;/a&gt; и даже организовать подсветку кода в постах.&lt;/p&gt;

&lt;p&gt;Для подсветки нужно чтобы первой строкой в блоках кода было что-нибудь вроде &lt;code&gt;!#xml&lt;/code&gt;, поэтому советую создавать посты в &lt;code&gt;Markdown&lt;/code&gt;-редакторе (включается в &lt;a href=&#34;http://www.tumblr.com/preferences&#34;&gt;настройках профиля&lt;/a&gt;). Для подсветки используется &lt;a href=&#34;http://shjs.sourceforge.net/&#34;&gt;SHJS&lt;/a&gt;, выложенный на сервер &lt;code&gt;static.tumblr&lt;/code&gt;. Кроме галочки &amp;ldquo;Highlight code&amp;rdquo; надо в поле &amp;ldquo;Supported langs&amp;rdquo; прописать список языков программирования, которые используются в блоге в виде &lt;code&gt;[&amp;#39;html&amp;#39;,&amp;#39;css&amp;#39;,&amp;#39;xml&amp;#39;,&amp;#39;javascript&amp;#39;,&amp;#39;java&amp;#39;,&amp;#39;python&amp;#39;,&amp;#39;sh&amp;#39;]&lt;/code&gt;. Вот какие языки можно указать: &lt;code&gt;html&lt;/code&gt; (HTML), &lt;code&gt;xml&lt;/code&gt; (XML), &lt;code&gt;css&lt;/code&gt; (CSS), &lt;code&gt;javascript&lt;/code&gt; (JavaScript), &lt;code&gt;python&lt;/code&gt; (Python), &lt;code&gt;java&lt;/code&gt; (Java), &lt;code&gt;ruby&lt;/code&gt; (Ruby), &lt;code&gt;sql&lt;/code&gt; (SQL), &lt;code&gt;sh&lt;/code&gt; (Unix Shell), &lt;code&gt;php&lt;/code&gt; (PHP), &lt;code&gt;cpp&lt;/code&gt; (C++), &lt;code&gt;csharp&lt;/code&gt; (C#).&lt;/p&gt;

&lt;p&gt;Для трансляции твитов пропишите в &lt;a href=&#34;http://www.tumblr.com/customize&#34;&gt;настройках темы&lt;/a&gt; &amp;ldquo;Twitter username&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Для того чтобы включить &lt;a href=&#34;http://disqus.com&#34;&gt;Disqus&lt;/a&gt;, укажите в &lt;a href=&#34;http://www.tumblr.com/customize&#34;&gt;тех же настройках&lt;/a&gt; &amp;ldquo;Disqus shortname&amp;rdquo; вашего блога.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>UI-Паттерн Validator, может так?</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/may-be-a-validator-pattern/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/may-be-a-validator-pattern/</id>
                <updated>2010-11-21T00:46:00Z</updated>
                
                <summary type="html">Достаточно часто в пользовательском интерфейсе нужно отображать, подходящие данные ввёл пользователь или нет. В зависимости от ситуации подсвечивать зелёным или красным поля или показывать около них подсказки. Существует много плагинов/библиотек для множества фреймворков, но какого-либо особого, в меру простого, стандарта, похоже нет. То есть, может стоит изобрести ещё один велосипед, но попробовать сделать его поудобнее.</summary>
                <content type="html">&lt;p&gt;Достаточно часто в пользовательском интерфейсе нужно отображать, подходящие данные ввёл пользователь или нет. В зависимости от ситуации подсвечивать зелёным или красным поля или показывать около них подсказки. Существует много плагинов/библиотек для множества фреймворков, но какого-либо особого, в меру простого, стандарта, похоже нет. То есть, может стоит изобрести ещё один велосипед, но попробовать сделать его поудобнее.&lt;/p&gt;

&lt;p&gt;Есть &lt;a href=&#34;http://people.redhat.com/%7Eebernard/validation/&#34;&gt;JSR-303&lt;/a&gt; (&lt;a href=&#34;http://habrahabr.ru/blogs/java/68318/&#34;&gt;о нём на хабре&lt;/a&gt;, &lt;a href=&#34;http://java.dzone.com/articles/bean-validation-and-jsr-303&#34;&gt;и ещё немного на английском&lt;/a&gt;), он предназначен для валидации java-бинов с помощью аннотаций, похожа на него (и одновременно на мою версию) и библиотека &lt;a href=&#34;http://code.google.com/p/gwt-validation/&#34;&gt;gwt-validation&lt;/a&gt; для GWT - эти вещи попроще чем обычно. Предлагаемый мной вариант ориентирован больше на UI-компоненты, чем данные с которыми они работают, на разных страницах может потребоваться валидация разной строгости и разное оформление (+&lt;code&gt;i18n&lt;/code&gt;), да и управлять ограничениями формы по-моему удобнее в самой форме.&lt;/p&gt;

&lt;p&gt;Кстати, тут наверное множество UI-профессионалов, поэтому я только за, чтобы отмечаться в комментариях.&lt;/p&gt;

&lt;p&gt;Постараюсь описать максимально независимо от языка программирования, но примеры придётся приводить на Java :).&lt;/p&gt;
&lt;h3 id=&#34;концепция&#34;&gt;&lt;a href=&#34;#концепция&#34; title=&#34;Концепция&#34;&gt;Концепция&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Один метод &lt;code&gt;validate()&lt;/code&gt; для композитного компонента (формы) который возвращает первый тип ограничения, не прошедший валидацию или &lt;code&gt;null&lt;/code&gt;, если валидация пройдена. Этот метод может использоваться для проверок при нажатии на кнопки типа &amp;ldquo;Сохранить&amp;rdquo; или &amp;ldquo;Отправить&amp;rdquo;, когда важен только первый не прошедший тест.&lt;/li&gt;
&lt;li&gt;Этот же метод &lt;code&gt;validate()&lt;/code&gt; можно вызвать для любого UI-компонента в форме и он изменит своё визуальное состояние в соответствии с введённым в него значением. А также при вызове этого метода у формы в целом - каждый компонент на ней также обновит своё состояние.&lt;/li&gt;
&lt;li&gt;Валидирующий код может иметь возможность бросить исключение о валидации, но не обязан.&lt;/li&gt;
&lt;li&gt;В общем случае все компоненты реагируют на корректные/некорректные значения одинаково.&lt;/li&gt;
&lt;li&gt;Не более трёх основных классов/интерфейсов.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;диаграмма&#34;&gt;&lt;a href=&#34;#диаграмма&#34; title=&#34;Диаграмма&#34;&gt;Диаграмма&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Сама диаграмма охватывает все описанные в статье классы, поэтому выглядит довольно (мягко говоря) эпично, но к самому паттерну, как я считаю, следует относить только верхний левый пакет &lt;code&gt;[Core]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/blog/ru/figures/may-be-a-validator-pattern/diagram.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/may-be-a-validator-pattern/diagram-thumb.png&#34; alt=&#34;Диаграмма рассматриваемого паттерна&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;
&lt;h3 id=&#34;основные-классы&#34;&gt;&lt;a href=&#34;#основные-классы&#34; title=&#34;Основные классы&#34;&gt;Основные классы&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;ограничение&#34;&gt;&lt;a href=&#34;#ограничение&#34; title=&#34;Ограничение&#34;&gt;Ограничение&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Отправной точкой будет самый весомый класс - базовый &lt;code&gt;Constraint&lt;/code&gt; - какое-либо ограничение. В моём случае тип ограничения задан простым &lt;code&gt;enum&lt;/code&gt;-ом, поскольку возможные виды ограничений обычно вполне исчислимы. Вместо &lt;code&gt;enum&lt;/code&gt;-а может быть и просто какое-либо абстрактное уникальное число, которое передаётся из наследников &lt;code&gt;ValidationConstraint&lt;/code&gt;, тогда о типе ограничения будут знать только они и &lt;code&gt;i18n&lt;/code&gt;-модуль.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class ValidationConstraint {

    public enum ConstraintType { INVALID_FORMAT, // Значение в поле не соответствует регулярному выражению
                                 ILLEGAL_CHARACTERS, // Частный случай первого, в поле введены недопустимые символы
                                 INVALID_VALUE, // Частный случай первого, вместо числа введена строка или подобные ограничения
                                 REQUIRED_VALUE, // Поле требуется к заполнению
                                 BOTH_OR_NONE_REQUIRED, // Требуется указать оба поля или ни одно из них
                                 MUST_BE_GREATER_THAN, // Значение в поле должно быть больше чем...
                                 MORE_ITEMS_THAN_ALLOWED, // Выбрано больше элементов, чем требуется
                                 . . .
                               };

    private final ConstraintType type;
    private final String subject;
    private final String expectedValue;
    private final String failedValue;

    private static final ValidationMessages messages = /* Получить локализованные сообщения */;

    public ValidationConstraint(ConstraintType type, String subject, String expectedValue, String failedValue) {
        this.type = type;
        this.subject = subject;
        this.expectedValue = expectedValue;
        this.failedValue = failedValue;
    }

    public ConstraintType getType() { return type; }
    public String getSubject() { return subject; }
    public String getExpectedValue() { return expectedValue; }
    public String getFailedValue() { return failedValue; }

    public String getLocalizedDescription() {
        switch (getType()) {
            case INVALID_CHARACTERS: return messages.invalidCharacters(subject, expectedValue, failedValue);
            case INVALID_FORMAT: return messages.invalidFormat(subject, expectedValue, failedValue);
            case INVALID_VALUE: return messages.invalidValue(subject, expectedValue, failedValue);
            case REQUIRED_VALUE: return messages.requiredValue(subject);
            case MORE_ITEMS_THAN_ALLOWED: return messages.moreThanAllowed(subject, expectedValue, failedValue);
            case BOTH_OR_NONE_REQUIRED: return messages.bothOrNoneRequired(subject);
            case MUST_BE_GREATER_THAN: return messages.mustBeGreaterThan(subject, expectedValue, failedValue);
            . . .
            default: return messages.unknownConstraint();
        }
    };

}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;объект-который-можно-проверить&#34;&gt;&lt;a href=&#34;#объект-который-можно-проверить&#34; title=&#34;Объект, который можно проверить&#34;&gt;Объект, который можно проверить&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Любой объект, который может быть проверен на соответствие ограничениям, должен имплементировать интерфейс &lt;code&gt;IValidatable&lt;/code&gt;. Метод &lt;code&gt;validate()&lt;/code&gt; можно вызвать, если нужно получить [первый] свалившийся &lt;code&gt;Constraint&lt;/code&gt; или нужно обновить состояние компонента (когда не важно возвращаемое значение). Метод &lt;code&gt;isValid&lt;/code&gt; можно вызвать если требуется просто проверить, прошло ограничения (ограничения) или нет - в подавляющем большинстве случаев &lt;code&gt;isValid()&lt;/code&gt; равноценно &lt;code&gt;(validate() == null)&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface IValidatable {

    public ValidationConstraint validate();
    public boolean isValid() throws ValidationException;

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Также &lt;code&gt;isValid()&lt;/code&gt; может бросать исключение, содержащее тип ограничения, которое не прошло:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class ValidationException extends Exception {

    private final ValidationConstraint constraint;

    public ValidationException(ValidationConstraint constraint) {
        super(constraint.getFailedValue());
        this.constraint = constraint;
    }

    @Override
    public String getLocalizedMessage() {
        return constraint.getLocalizedDescription()/* + &amp;#34; (&amp;#34; + constraint.getType() + &amp;#34;)&amp;#34;*/;
    }

}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;объект-содержащий-несколько-ограничений&#34;&gt;&lt;a href=&#34;#объект-содержащий-несколько-ограничений&#34; title=&#34;Объект, содержащий несколько ограничений&#34;&gt;Объект, содержащий несколько ограничений&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Таким объектом может стать, например, форма или страница с полями для заполнения или какой-либо бин. Этот объект должен имплементировать интерфейс &lt;code&gt;HasConstraints&lt;/code&gt;. Метод &lt;code&gt;initContraints()&lt;/code&gt; можно вызывать в конструкторе имплементирующего класса или в каком-либо другом методе, выполняющемся один раз перед использованием объекта. &lt;code&gt;addConstraint(...)&lt;/code&gt; добавляет новое ограничение, за которым следит объект. Также он наследует метод &lt;code&gt;validate()&lt;/code&gt;, который перебирает все ограничения и возвращает первое упавшее. В этот объект можно встроить возможность удаления ограничений, тогда он будет действовать примерно как &lt;code&gt;Observer&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface HasConstraints extends IValidatable {

    public void initConstraints();
    public void addConstraint(IValidatable validatable);

}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;как-использовать-снаружи&#34;&gt;&lt;a href=&#34;#как-использовать-снаружи&#34; title=&#34;Как использовать снаружи&#34;&gt;Как использовать снаружи&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;То, что доступно конечному разработчику в результате - любые формы и страницы, которые могут переопределить метод &lt;code&gt;initConstraints&lt;/code&gt; и вызвать поочерёдно для каждого ограничения на какое-либо поле метод &lt;code&gt;addConstraint(...)&lt;/code&gt;. Метод &lt;code&gt;addConstraint(...)&lt;/code&gt; принимает параметром любой объект, который умеет себя валидировать (имплементирует &lt;code&gt;IValidatable&lt;/code&gt;) или, для ограничений, экзепляр из уже готового набора ограничений (которые, в свою очередь, тоже имплементируют тот самый &lt;code&gt;IValidatable&lt;/code&gt;). Перед сохранением/отправкой формы разработчик может вызывать у этих страниц/форм метод &lt;code&gt;validate()&lt;/code&gt; или &lt;code&gt;isValid()&lt;/code&gt;, чтобы узнать что именно упало или перехватить/передать исключение валидации. Все ограничения автоматически проверяются при изменении значений в этих полях.&lt;/p&gt;

&lt;p&gt;Ниже я рассмотрю дополнения и примеры, которые никоим образом не изменяют это утверждение.&lt;/p&gt;

&lt;hr&gt;
&lt;h3 id=&#34;дополнения&#34;&gt;&lt;a href=&#34;#дополнения&#34; title=&#34;Дополнения&#34;&gt;Дополнения&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;обновляющий-состояние-объект&#34;&gt;&lt;a href=&#34;#обновляющий-состояние-объект&#34; title=&#34;Обновляющий состояние объект&#34;&gt;Обновляющий состояние объект&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Если какой-либо объект содержит значение, то он может сам проверять своё состояние на основе ограничений. Такой объект может имплементировать интерфейс &lt;code&gt;Validator&lt;/code&gt;. Методы &lt;code&gt;whenValueInvalid(...)&lt;/code&gt; и &lt;code&gt;whenValueValid(...)&lt;/code&gt; могут вызываться напрямую при проверке из имплементируемого &lt;code&gt;validate()&lt;/code&gt;, тогда вызов &lt;code&gt;validate()&lt;/code&gt; всегда будет обновлять состояние объекта.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface Validator&amp;lt;V&amp;gt; extends IValidatable {

    public V getValue();

    public void whenValueInvalid(V value, ValidationConstraint constraint);
    public void whenValueValid(V value);

}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;делегирование-объекта-обновляющего-состояние&#34;&gt;&lt;a href=&#34;#делегирование-объекта-обновляющего-состояние&#34; title=&#34;Делегирование объекта, обновляющего состояние&#34;&gt;Делегирование объекта, обновляющего состояние&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Чаще удобнее делегировать такой объект, потому что он может быть уже готовым компонентом, цепочку наследования которого нельзя изменять. Будем называть делегируемый объект целью - &lt;code&gt;Target&lt;/code&gt;. Ожидаемое поведение здесь такое же как и в интерфейсе &lt;code&gt;Validator&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface TargetValidator&amp;lt;V, T&amp;gt; extends IValidatable {

    public V getValue();
    public T getTarget();

    public void whenValueInvalid(T target, V value, ValidationConstraint constraint);
    public void whenValueValid(T target, V value);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Впрочем, могут понадобиться несколько слушателей, реагирующих на изменение значения. Поэтому я создал интерфейс &lt;code&gt;ValueChangeReactor&lt;/code&gt; и изменил &lt;code&gt;TargetValidator&lt;/code&gt;, чтобы он расширял этот интерфейс (хотя это необязательно). В примерах я буду придерживаться этого варианта.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface ValueChangeReactor&amp;lt;V, T&amp;gt; {

    public void whenValueInvalid(T target, V value, ValidationConstraint constraint);
    public void whenValueValid(T target, V value);

}

public interface TargetValidator&amp;lt;V, T&amp;gt; extends IValidatable, ValueChangeReactor&amp;lt;V, T&amp;gt; {

    public V getValue();
    public T getTarget();

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь можно создавать объекты, которые содержат слушателей на изменения значений. Допустим, один из слушателей добавляет к объекту CSS-класс, другой - подсказку.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface HasValueReactors&amp;lt;V, T&amp;gt; {

    public void addReactor(ValueChangeReactor&amp;lt;V, T&amp;gt; reactor);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Без примеров статья была бы неполной&amp;hellip;&lt;/p&gt;

&lt;hr&gt;
&lt;h3 id=&#34;примеры&#34;&gt;&lt;a href=&#34;#примеры&#34; title=&#34;Примеры&#34;&gt;Примеры&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;базовая-quotкоробка-проверяемых-объектовquot&#34;&gt;&lt;a href=&#34;#базовая-quotкоробка-проверяемых-объектовquot&#34; title=&#34;Базовая &amp;quot;коробка проверяемых объектов&amp;quot;&#34;&gt;Базовая &amp;ldquo;коробка проверяемых объектов&amp;rdquo;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Вот класс, от которого может наследоваться любой объект (например, та самая форма или страница), который содержит в себе другие проверяемые объекты (в том числе ограничения) и собственно проверяет их при вызове &lt;code&gt;validate()&lt;/code&gt;. Дочерние классы должны иметь метод &lt;code&gt;initConstraints()&lt;/code&gt;, который будет добавлять все неоходимые для проверки объекты.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class ValidationSupport implements HasConstraints {

    private final Set&amp;lt;IValidatable&amp;gt; validatables = new LinkedHashSet&amp;lt;IValidatable&amp;gt;();

    @Override
    public ValidationConstraint validate() {
        for (IValidatable validatable: validatables) {
            final ValidationConstraint constraint = validatable.validate();
            if (constraint != null) return constraint;
        }
        return null;
    };

    @Override
    public void addConstraint(IValidatable validatable) {
        validatables.add(validatable);
    }

    public boolean isValid() {
        return (validate() == null);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Однако, если нельзя нарушать цепочку наследования, удобнее делегировать объект этого класса, переопределив &lt;code&gt;initConstraints&lt;/code&gt; на вызов &lt;code&gt;initContraints&lt;/code&gt; у оборачивающего объекта.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Обратите внимание на то, что у наследуемого или делегирующего объекта &lt;code&gt;initConstraints&lt;/code&gt; нужно вызывать вручную, например после подготовки и создания всех компонентов формы. В большинстве случаев, однако, подойдёт и просто вызов в конструкторе.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;базовое-ограничение&#34;&gt;&lt;a href=&#34;#базовое-ограничение&#34; title=&#34;Базовое ограничение&#34;&gt;Базовое ограничение&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;От этого класса могут наследоваться все конкретные ограничения. Он позволяет передать валидируемый компонент (&lt;code&gt;target&lt;/code&gt;), тип ограничения (&lt;code&gt;constraintType&lt;/code&gt;), &amp;ldquo;название&amp;rdquo; компонента (&lt;code&gt;subject&lt;/code&gt;) и ожидаемое значение (&lt;code&gt;expectation&lt;/code&gt;). Собственно, он и выполняет описанные выше ожидания от &lt;code&gt;TargetValidator&lt;/code&gt;. Метод &lt;code&gt;passes()&lt;/code&gt; наследника должен проверять, соответствует ли текущее значение типу ограничения.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class BaseValidator&amp;lt;V, T&amp;gt; implements TargetValidator&amp;lt;V, T&amp;gt;, HasValueReactors&amp;lt;V, T&amp;gt; {

    private final T target;
    private final String subject;
    private final String expectation;
    private final ConstraintType constraintType;
    private final Set&amp;lt;ValueChangeReactor&amp;lt;V, T&amp;gt;&amp;gt; reactors = new LinkedHashSet&amp;lt;ValueChangeReactor&amp;lt;V, T&amp;gt;&amp;gt;();

    public BaseValidator(T target, ConstraintType constraintType, String subject, String expectation) {
        this.target = target;
        this.subject = subject;
        this.expectation = expectation;
        this.constraintType = constraintType;
    }

    protected BaseValidator(T target, ConstraintType constraintType, String subject) {
        this(target, constraintType, subject, null);
    }

    protected abstract boolean passes(V value);

    @Override
    public T getTarget() { return target; }

    @Override
    public final ValidationConstraint validate() {
        final V value = getValue();
        final boolean passes = passes(value);
        ValidationConstraint constraint = null;
        if (passes) {
            whenValueValid(target, value);
        } else {
            constraint = new ValidationConstraint(constraintType, subject, expectation, (value != null) ? value.toString() : &amp;#34;&amp;#34;);
            whenValueInvalid(target, value, constraint);
        }
        return constraint;
    }

    public boolean isValid() {
        return (validate() == null);
    }

    /* Либо:
    public boolean isValid() throws ValidationException {
        ValidationConstraint constraint = validate();
        if (constraint != null) throw new ValidationException(constraint);
        return (constraint == null);
    } */

    @Override
    public void whenValueInvalid(T target, V value, ValidationConstraint constraint) {
        for (ValueChangeReactor&amp;lt;V, T&amp;gt; reactor: reactors) {
            reactor.whenValueInvalid(target, value, constraint);
        }
    }

    @Override
    public void whenValueValid(T target, V value) {
        for (ValueChangeReactor&amp;lt;V, T&amp;gt; reactor: reactors) {
            reactor.whenValueValid(target, value);
        }
    }

    @Override
    public void addReactor(ValueChangeReactor&amp;lt;V, T&amp;gt; reactor) {
        reactors.add(reactor);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;практика&#34;&gt;&lt;a href=&#34;#практика&#34; title=&#34;Практика&#34;&gt;Практика&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;практика-валидирование-ui-компонентов&#34;&gt;&lt;a href=&#34;#практика-валидирование-ui-компонентов&#34; title=&#34;Практика: Валидирование UI-компонентов&#34;&gt;Практика: Валидирование UI-компонентов&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Допустим, в нашем UI-фреймворке у нас чётко выделяются компоненты, которые имеют какое-то значение и имеют хэндлеры, которые вызываются при его изменении - то есть имплементируют некий интерфейс &lt;code&gt;HasValue&lt;/code&gt; (см., например, &lt;a href=&#34;http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/user/client/ui/HasValue.html&#34;&gt;HasValue в GWT&lt;/a&gt;). Можно создать валидатор, который будет автоматически следить за изменениями значения таких объектов (событие изменения вызывается, к примеру, при потере фокуса у текстового поля) и сразу же валидировать значение (вызывая &lt;code&gt;validate()&lt;/code&gt;).&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class ValueContainerValidator&amp;lt;V, T extends HasValue&amp;lt;V&amp;gt;&amp;gt; extends BaseValidator&amp;lt;V, T&amp;gt; {

    public ValueContainerValidator(T target, ConstraintType constraintType, String fieldName, String expectation) {
        super(target, constraintType, fieldName, expectation);

        addValidationHandlers(target);
    }

    public ValueContainerValidator(T target, ConstraintType constraintType, String fieldName) {
        this(target, constraintType, fieldName, &amp;#34;&amp;#34;);
    }

    protected void addValidationHandlers(T target) {

        target.addValueChangeHandler(new ValueChangeHandler&amp;lt;V&amp;gt;() {
            @Override public void onValueChange(ValueChangeEvent&amp;lt;V&amp;gt; event) {
                validate();
            }
        });

        /* if (target instanceof HasKeyUpHandlers) {
            ((HasKeyUpHandlers)target).addKeyUpHandler(new KeyUpHandler() {
                @Override
                public void onKeyUp(KeyUpEvent event) {
                    validate();
                }
            });
        } */

    }

    @Override
    public V getValue() {
        return getTarget().getValue();
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В комментарии показано, что вы можете проверить и другие интерфейсы объекта и, допустим обновлять состояние не только при потере фокуса, но и при нажатии клавиши и т.п.&lt;/p&gt;

&lt;p&gt;И наконец, вот несколько часто используемых ограничений:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class RegexConstraint&amp;lt;T extends HasValue&amp;lt;String&amp;gt;&amp;gt; extends ValueContainerValidator&amp;lt;String, T&amp;gt; {

    private final String regex;

    public RegexConstraint(T target, String fieldName, String regex, String regexDescription) {
        super(target, ConstraintType.INVALID_FORMAT, fieldName, regexDescription);
        this.regex = regex;
    }

    @Override
    protected boolean passes(String value) {
        return value.isEmpty() || value.matches(regex);
    }

}

public class RequiredFieldConstraint&amp;lt;T extends HasValue&amp;lt;String&amp;gt;&amp;gt; extends ValueContainerValidator&amp;lt;String, T&amp;gt; {

    public RequiredFieldConstraint(T target, String fieldName) {
        super(target, ConstraintType.REQUIRED_VALUE, fieldName);
    }

    @Override
    protected boolean passes(String value) {
        return (value != null) &amp;amp;&amp;amp; !value.isEmpty();
    }

}

public class MinimumLengthConstraint&amp;lt;T extends HasValue&amp;lt;String&amp;gt;&amp;gt; extends ValueContainerValidator&amp;lt;String, T&amp;gt; {

    private final int minLength;

    public MinimumLengthConstraint(T target, String fieldName, int minLength) {
        super(target, ConstraintType.LESS_ITEMS_THAN_REQUIRED, fieldName, String.valueOf(minLength));
        this.minLength = minLength;
    }

    @Override
    protected boolean passes(String value) {
        return value.isEmpty() || (value.length() &amp;gt;= minLength);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Иногда требуется проверить несколько полей в совокупности. Например, для двух полей требуется заполнить либо оба, либо ни одного. Вот пример базового класса для ограничений на два поля:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class TwoTargetsConstraint&amp;lt;T extends HasValue&amp;lt;String&amp;gt;&amp;gt; extends ValueContainerValidator&amp;lt;String, T&amp;gt; {

    private final T targetTwo;

    public TwoTargetsConstraint(T targetOne, T targetTwo, ConstraintType constraintType, String fieldName, String expectation) {
        super(targetOne, constraintType, fieldName, expectation);
        this.targetTwo = targetTwo;

        addValidationHandlers(targetTwo);
    }

    public TwoTargetsConstraint(T targetOne, T targetTwo, ConstraintType constraintType, String fieldName) {
        this(targetOne, targetTwo, constraintType, fieldName, &amp;#34;&amp;#34;);
    }

    @Override
    public void whenValueInvalid(T target, String value, ValidationConstraint constraint) {
        super.whenValueInvalid(target, value, constraint);
        super.whenValueInvalid(targetTwo, value, constraint);
    }

    @Override
    public void whenValueValid(T target, String value) {
        super.whenValueValid(target, value);
        super.whenValueValid(targetTwo, value);
    }

    @Override
    protected final boolean passes(String value) {
        return passes(value, targetTwo.getValue());
    }

    protected abstract boolean passes(String valueOne, String valueTwo);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;А вот реализация, которая собственно и удостоверяется, что заполнено либо оба поля, либо ни одного:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class BothOrNoneRequiredConstraint&amp;lt;T extends HasValue&amp;lt;String&amp;gt;&amp;gt; extends TwoTargetsConstraint&amp;lt;T&amp;gt; {

    public BothOrNoneRequiredConstraint(T targetOne, T targetTwo, String fieldName) {
        super(targetOne, targetTwo, ConstraintType.BOTH_OR_NONE_REQUIRED, fieldName);
    }

    @Override
    protected boolean passes(String valueOne, String valueTwo) {
        return (valueOne.isEmpty() &amp;amp;&amp;amp; valueTwo.isEmpty()) ||
               (!valueOne.isEmpty() &amp;amp;&amp;amp; !valueTwo.isEmpty());
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В GWT основная часть компонентов наследуется от класса &lt;a href=&#34;http://google-web-toolkit.googlecode.com/svn/javadoc/1.6/com/google/gwt/user/client/ui/UIObject.html&#34;&gt;&lt;code&gt;UIObject&lt;/code&gt;&lt;/a&gt;, для такого элемента можно добавлять и убирать CSS-стили. Учитывая это можно сделать &lt;code&gt;StylingReactor&lt;/code&gt;, который при изменении значения добавляет нужный CSS-стиль к объекту:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class StylingReactor&amp;lt;V, T extends UIObject&amp;gt; implements ValueChangeReactor&amp;lt;V, T&amp;gt; {

    public StylingReactor() { }

    @Override
    public void whenValueInvalid(T target, V value, ValidationConstraint constraint) {
        target.addStyleName(&amp;#34;b-invalid-value&amp;#34;);
    }

    @Override
    public void whenValueValid(T target, V value) {
        target.removeStyleName(&amp;#34;b-invalid-value&amp;#34;);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Формы, панели и страницы наследуются в GWT от класса &lt;a href=&#34;http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/user/client/ui/Composite.html&#34;&gt;&lt;code&gt;Composite&lt;/code&gt;&lt;/a&gt;. Сделаем базовый &lt;code&gt;CompositeWithConstraints&lt;/code&gt;, от которого смогут наследоваться такие формы и страницы. По сути он просто делегирует &lt;code&gt;ValidationSupport&lt;/code&gt;, но кроме этого автоматически добавляет всем внутренним ограничениям, которые вешаются на &lt;code&gt;UIObject&lt;/code&gt;-компоненты &lt;code&gt;StylingReactor&lt;/code&gt; (при жуткой необходимости его можно переиспользовать).&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class CompositeWithConstraints extends Composite implements HasConstraints {

    private final ValidationSupport validationSupport = new ValidationSupport() {

        public void initConstraints() {
            CompositeWithConstraints.this.initConstraints();
        };

    };

    protected CompositeWithConstraints() {

    }

    @Override
    public void addConstraint(IValidatable validatable) {
        validationSupport.addConstraint(validatable);
    }

    public &amp;lt;V, T extends UIObject&amp;gt; void addConstraint(BaseValidator&amp;lt;V, T&amp;gt; validator) {
        validator.addReactor(new StylingReactor&amp;lt;V, T&amp;gt;());
        validationSupport.addConstraint(validator);
    }

    @Override
    public boolean isValid() throws ValidationException {
        return validationSupport.isValid();
    }

    @Override
    public ValidationConstraint validate() {
        return validationSupport.validate();
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Ещё раз обратите внимание на то, что у наследуемого или делегирующего объекта &lt;code&gt;initConstraints&lt;/code&gt; нужно вызывать вручную, например после подготовки и создания всех компонентов формы. В большинстве случаев, однако, подойдёт и просто вызов в конструкторе.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;пример-использования&#34;&gt;&lt;a href=&#34;#пример-использования&#34; title=&#34;Пример использования&#34;&gt;Пример использования&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Допустим &lt;code&gt;FormWithValidation&lt;/code&gt; наследуется от класса &lt;code&gt;CompositeWithConstraints&lt;/code&gt;, а &lt;code&gt;TextBox&lt;/code&gt;, &lt;code&gt;TextArea&lt;/code&gt; имплементируют интерфейс &lt;code&gt;HasValue&lt;/code&gt; (так и есть в штатных компонентах GWT):&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class ProfileEditForm extends FormWithValidation implements View {

    . . .

    @Override
    public void initConstraints() {

        addConstraint(new RequiredFieldConstraint&amp;lt;TextBox&amp;gt;(nameField, &amp;#34;Name&amp;#34;));
        addConstraint(new RequiredFieldConstraint&amp;lt;TextArea&amp;gt;(aboutMe, &amp;#34;AboutMe&amp;#34;));
        addConstraint(new MinimumLengthConstraint&amp;lt;TextArea&amp;gt;(aboutMe, &amp;#34;AboutMe&amp;#34;, ProfileBean.MIN_ABOUT_LENGTH));
        addConstraint(new RegexConstraint&amp;lt;TextBox&amp;gt;(academyStartField, &amp;#34;Academy start&amp;#34;, StringUtils.DATE_REGEX, &amp;#34;NN-NN-NNNN&amp;#34;));
        addConstraint(new RegexConstraint&amp;lt;TextBox&amp;gt;(academyFinishField, &amp;#34;Academy finish&amp;#34;, StringUtils.DATE_REGEX, &amp;#34;NN-NN-NNNN&amp;#34;));
        addConstraint(new BothOrNoneRequiredConstraint&amp;lt;TextBox&amp;gt;(academyStartField, academyFinishField, &amp;#34;Academy&amp;#34;));
        addConstraint(new FirstLessThanSecondConstraint&amp;lt;TextBox&amp;gt;(academyStartField, academyFinishField, &amp;#34;Academy&amp;#34;));

    }

    public HasClickHandlers getSavingButton() { ... }

    . . .

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь эти поля автоматически валидируются при изменении их значений. Для того чтобы проверить соответствие ограничениям перед сохранением формы, достаточно вызвать &lt;code&gt;validate&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class ProfileEditPresenter implements Presenter {

    . . .

    public void assignSaveHandler() {
        view.getSavingButton().addClickHandler(new ClickHandler() {
            @Override public void onClick(ClickEvent event) {
                final ValidationConstraint constraint = view.validate();
                if (constraint == null) {
                    final ProfileBean profile = view.gatherFields();
                    updateProfile(profile);
                } else {
                    eventBus.displayMessage(MessageType.VALIDATION_ERROR, constraint.getLocalizedDescription());
                }
            }
        });
    }

    . . .

}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;резюме&#34;&gt;&lt;a href=&#34;#резюме&#34; title=&#34;Резюме&#34;&gt;Резюме&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Мне хотелось вывести какой-то общий, в меру простой, паттерн, который поместился бы на одной (хоть и большой) диаграмме классов и был понятен с первого взгляда. Надеюсь это получилось.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Просто, как сэндвич: Движок блога на JavaScript и XML</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/easy-as-sandwich-blog-engine/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/easy-as-sandwich-blog-engine/</id>
                <updated>2010-11-17T00:46:00Z</updated>
                
                <summary type="html">Предположим, вам внезапно понадобился личный блог. У вас есть какой-то хилый бесплатный хостинг, и потому что он хилый на нём нет ни PHP, ни возможности поставить туда какой-либо server-side вообще. Или хуже, у вас есть только аккаунт на Dropbox, и вот тут вдруг внезапно нужен блог.</summary>
                <content type="html">&lt;p&gt;Предположим, вам внезапно понадобился личный блог. У вас есть какой-то хилый бесплатный хостинг, и потому что он хилый на нём нет ни PHP, ни возможности поставить туда какой-либо server-side вообще. Или хуже, у вас есть только аккаунт на Dropbox, и вот тут вдруг внезапно нужен блог.&lt;/p&gt;

&lt;p&gt;А ещё, может быть, вы предпочитаете Markdown-синтаксис написанию тяжёлых постов в унылом HTML. Тем более Markdown уже много где поддерживается (ну, исключая хабр). Тут было бы кстати хранить посты в отдельных файлах, чтобы взять и скопировать отдельный пост в Tumblr или ещё куда. И ещё это даёт возможность хранить файлы в каком-нибудь репозитории и даже устроить себе версионирование статей (если очень надо).&lt;/p&gt;

&lt;p&gt;А ещё, хотелось бы иметь две версии блога в одной входной точке. Например, русскую и английскую.&lt;/p&gt;

&lt;p&gt;Думаю, вы понимаете, к чему я веду: у меня есть что на всё это предложить. Надо было бы уже вставить не одну ссылку, но я совсем сволочь и поставлю одну в конце поста.&lt;/p&gt;
&lt;h3 id=&#34;картинка&#34;&gt;&lt;a href=&#34;#картинка&#34; title=&#34;Картинка&#34;&gt;Картинка&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/easy-as-sandwich-blog-engine/screenshot-small.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;компоненты&#34;&gt;&lt;a href=&#34;#компоненты&#34; title=&#34;Компоненты&#34;&gt;Компоненты&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jquery.com&#34;&gt;JQuery&lt;/a&gt;, вместо хлеба&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.attacklab.net/showdown/&#34;&gt;Showdown&lt;/a&gt;, вместо колбасы&lt;/li&gt;
&lt;li&gt;И парсер дат заместо горчицы&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чтобы не сильно париться, я взял &lt;a href=&#34;http://jquery.com&#34;&gt;JQuery&lt;/a&gt; (я использую из него только операции над DOM-ом и асинхронную загрузку XML-файлов, так что при лютой необходимости его можно аккуратно выковырнуть). Потом я взял &lt;a href=&#34;http://www.attacklab.net/showdown/&#34;&gt;Showdown&lt;/a&gt;, это парсер синтаксиса Markdown переведённый в JavaScript. Потом взял какой-то сторонний парсер дат (это чтобы красиво эти даты отображать). И всё это смешал в одно целое, вот таким образом и получился маленький JS/XML-driven движок блога. Простой как сэндвич.&lt;/p&gt;
&lt;h3 id=&#34;рецепт&#34;&gt;&lt;a href=&#34;#рецепт&#34; title=&#34;Рецепт&#34;&gt;Рецепт&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для создания первого поста в блоге, скачайте &lt;a href=&#34;http://code.google.com/p/showdown-blog/downloads/detail?name=swblog.zip&#34;&gt;этот пакет&lt;/a&gt;, распакуйте. Отредактируйте настройки (&lt;code&gt;prefs.xml&lt;/code&gt;), создайте какой-нибудь пост, (&lt;code&gt;posts/&amp;lt;post-id&amp;gt;.xml&lt;/code&gt;), добавьте &lt;code&gt;&amp;lt;post-id&amp;gt;&lt;/code&gt; в &lt;code&gt;posts.xml&lt;/code&gt;. Всё, готово, пост опубликован. Для следующих постов повторяйте только последние два шага. (По адресу &lt;code&gt;./create.html&lt;/code&gt; вы найдёте редактор, выдранный из Showdown, он поможет вашей фантазии представлять, что получится из Markdown-синтаксиса).&lt;/p&gt;

&lt;p&gt;Итак, ещё раз.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Настроить через &lt;code&gt;prefs.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Положить &lt;code&gt;some-post.xml&lt;/code&gt; в каталог &lt;code&gt;posts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Добавить &lt;code&gt;some-post&lt;/code&gt; в &lt;code&gt;posts.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Повторять шаги 2 и 3 для следующих постов&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;достоинства&#34;&gt;&lt;a href=&#34;#достоинства&#34; title=&#34;Достоинства&#34;&gt;Достоинства&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Минимализм&lt;/li&gt;
&lt;li&gt;Никакой серверной стороны. Вообще.&lt;/li&gt;
&lt;li&gt;Посты написаны синтаксисом Markdown&lt;/li&gt;
&lt;li&gt;Один пост - один файл XML&lt;/li&gt;
&lt;li&gt;Конфигурация-через-XML&lt;/li&gt;
&lt;li&gt;Стили-через-CSS&lt;/li&gt;
&lt;li&gt;Тэги, облако тэгов и навигация по ним&lt;/li&gt;
&lt;li&gt;Пермалинк на каждый пост&lt;/li&gt;
&lt;li&gt;Поддерживает мобильные браузеры (парочку)&lt;/li&gt;
&lt;li&gt;Можно делать несколько точек вхождения&lt;/li&gt;
&lt;li&gt;В поставку включен скрипт для генерации RSS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;недостатки&#34;&gt;&lt;a href=&#34;#недостатки&#34; title=&#34;Недостатки&#34;&gt;Недостатки&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Нет поддержки комментариев&lt;/li&gt;
&lt;li&gt;Никакой индексации поисковиками&lt;/li&gt;
&lt;li&gt;Только для браузеров с включенным JavaScript&lt;/li&gt;
&lt;li&gt;Javascript и JQuery иногда долго работают на медленных сетях&lt;/li&gt;
&lt;li&gt;Если не использовать &lt;code&gt;.htaccess&lt;/code&gt;, надо указывать &lt;code&gt;index.html&lt;/code&gt; явно&lt;/li&gt;
&lt;li&gt;Есть что пооптимизировать&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;может-потом&#34;&gt;&lt;a href=&#34;#может-потом&#34; title=&#34;Может потом&#34;&gt;Может потом&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Страницы&lt;/li&gt;
&lt;li&gt;Поддержка шаблонов&lt;/li&gt;
&lt;li&gt;Более приятный на вид RSS / Автоматизировать обновления RSS&lt;/li&gt;
&lt;li&gt;Календарь&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;пример&#34;&gt;&lt;a href=&#34;#пример&#34; title=&#34;Пример&#34;&gt;Пример&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://showdown-blog.googlecode.com/hg/index.html&#34;&gt;Ссылка на пример&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;исходный-код&#34;&gt;&lt;a href=&#34;#исходный-код&#34; title=&#34;Исходный код&#34;&gt;Исходный код&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://showdown-blog.googlecode.com/&#34;&gt;Проект на Googlecode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;** Upd. ** Достоинства и недостатки со временем изменились, посетите страницу проекта чтобы узнать как именно.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Путь радуги: Алгоритм распознавания движений пальцев рук на основе цветовой диффференциации (Driven by LISP)</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/nijiato-detection-of-fingers-motion-algorithm/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/nijiato-detection-of-fingers-motion-algorithm/</id>
                <updated>2010-08-12T00:46:00Z</updated>
                
                <summary type="html">Я немного безумный и в свободное время занялся изучением LISP&amp;#39;а и, чтобы сделать обучение немного интереснее, попробовал реализовать самоизобретённый алгоритм. &amp;ldquo;Алгоритм&amp;rdquo; - это, конечно, громко сказано, в нём нет ни перемножений матриц, ни сортировки массивов, ни пузырьков, ни долгой работы над оптимизацией (ни даже калибровки цветов, оправдываюсь тем, что версия учебная). И да, в статье много картинок, а в конце даже будет видео.</summary>
                <content type="html">&lt;p&gt;Я немного безумный и в свободное время занялся изучением LISP&amp;#39;а и, чтобы сделать обучение немного интереснее, попробовал реализовать самоизобретённый алгоритм. &amp;ldquo;Алгоритм&amp;rdquo; - это, конечно, громко сказано, в нём нет ни перемножений матриц, ни сортировки массивов, ни пузырьков, ни долгой работы над оптимизацией (ни даже калибровки цветов, оправдываюсь тем, что версия учебная). И да, в статье много картинок, а в конце даже будет видео.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/nijiato&#34;&gt;Заранее ссылка на исходники&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Цель проста: Определять положение всех десяти пальцев в пространстве (координаты положения и угол наклона каждого пальца в дискретный момент), выдавать эти данные через &lt;code&gt;stdout&lt;/code&gt; или по сокету другой программе, а та сможет делать предположения о &amp;ldquo;гесчурах&amp;rdquo;, которые совершает пользователь и соответственно им реагировать на пользовательском интерфейсе. Вдохновлением для идеи послужил ролик на хабре &lt;a href=&#34;http://habrahabr.ru/blogs/ui_design_and_usability/95590/&#34;&gt;про будущее интерфейсов&lt;/a&gt; и то что, как нельзя кстати, под руку попались &lt;a href=&#34;http://www.cliki.net/CL-V4L2&#34;&gt;биндинги video4linux для Common Lisp&lt;/a&gt; от Виталия Маяцких. Здесь я представляю вам первую часть - программу, которая определяет координаты и угол наклона пальцев. Не знаю, дойдут ли руки до написания остальных и приведения в энтерпрайзное состояние этой, если никто не сподобится поучаствовать.&lt;/p&gt;

&lt;p&gt;Особенность этого способа в том, что он, при должной смелости, воспроизводим в домашних условиях. Для определения положений пальцев в пространстве не используется датчиков, эвристических алгоритмов и паттерн-матчинга как в OpenCV. Используются:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Lisp-интерпретатор, предпочтительно SBCL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/nijiato/wiki/RequiredCLpackages&#34;&gt;Куча Common-Lilsp-овых пакетов&lt;/a&gt; (хотя многие из них у вас могут быть уже установлены, если вы работаете с Lisp)&lt;/li&gt;
&lt;li&gt;Драйвер video4linux (&lt;code&gt;v4l2convert.so&lt;/code&gt;) и поддержка GTK&lt;/li&gt;
&lt;li&gt;Любая веб-камера, совместимая с video4linux (у меня - Genius iSlim 300)&lt;/li&gt;
&lt;li&gt;Десять разноцветных бумажек, которые можно надеть на пальцы: по две красных, оранжевых, жёлтых, зелёных и голубых.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Эти бумажки и есть основа этого безумного алгоритма, без остальных частей его можно реализовать на любом языке прораммирования и на любом окружении. &lt;a href=&#34;http://code.google.com/p/nijiato/source/browse/nijiato-recognition.lisp&#34;&gt;Исходный код алгоритма расположен здесь&lt;/a&gt;, можно следить за описанием и кодом одновременно. Lisp считается самодокументируемым языком, так что, надеюсь, всё будем понятно :).&lt;/p&gt;
&lt;h3 id=&#34;ку.-исходные-данные&#34;&gt;&lt;a href=&#34;#ку.-исходные-данные&#34; title=&#34;Ку. Исходные данные&#34;&gt;Ку. Исходные данные&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вначале необходимо определить цвета, при обнаружении которых программа будет понимать, что &lt;em&gt;возможно&lt;/em&gt; в этом месте находится палец. Точные цвета задавать бессмысленно, необходимо ввести какую-то дельту, узкий размах возможных значений, чтобы при необходимости в &amp;ldquo;подозрительный&amp;rdquo; регион попала и немного затенённая область и немного осветлённая, примерно того же цвета. Я задавал для каждого цвета свою собственную дельту, поскольку каждый из них обычно ведёт себя по-разному. Все мои значения &amp;ldquo;захардкожены&amp;rdquo; - определены опытным путём для определённого освещения в определённое время суток (программа хорошо работает у меня дома, при включенном свете с 20 часов до глубокой ночи, при яркости камеры по умолчанию - как раз когда я возвращаюсь с работы). Будем считать, что это учебная версия и это оправдывает меня. Можно добавить предварительную калибровку или анализирование общей освещённости кадра и &amp;ldquo;подправку&amp;rdquo; цветов в соответствии с этим значением, но сами бумажки в любом случае будут у всех разных оттенков, если только не начинать завтра же их массовое производство с идентичными цветами, привитыми им на заводе.&lt;/p&gt;

&lt;p&gt;Итак, надеваем на каждый палец по бумажке.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/nijiato-detection-of-fingers-motion-algorithm/colors.png&#34; alt=&#34;Color values&#34;&gt;&lt;/p&gt;

&lt;p&gt;На картинке RGB-компоненты представлены в диапазонах от нуля до единицы, overflow при сложении/вычитании дельты не учитывается. Кроме того, эти цвета индивидуальны для моего случая, поэтому так непохожи на идеальные.&lt;/p&gt;
&lt;h3 id=&#34;ку.-первый-проход.-определение-участков-возможного-нахождения-пальцев.&#34;&gt;&lt;a href=&#34;#ку.-первый-проход.-определение-участков-возможного-нахождения-пальцев.&#34; title=&#34;Ку. Первый проход. Определение участков возможного нахождения пальцев.&#34;&gt;Ку. Первый проход. Определение участков возможного нахождения пальцев.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В программе используется массив &lt;code&gt;*fingers-values*&lt;/code&gt; длиной (ширина кадра * высоту кадра), каждая ячейка которого соответствует одному пикселю кадра и будет содержать число от &lt;code&gt;0&lt;/code&gt; до &lt;code&gt;200&lt;/code&gt;. На каждом следующем кадре этот массив полностью заполняется новыми значениями на основе проанализированных RGB-компонентов пикселей.&lt;/p&gt;

&lt;p&gt;Так, в процессе работы алгоритма в массиве &lt;code&gt;*fingers-values*&lt;/code&gt; будут находиться значения:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Значение &lt;code&gt;0&lt;/code&gt; - несоответствие пикселя ни одному из цветов плюс-минус дельта&lt;/li&gt;
&lt;li&gt;Значения от &lt;code&gt;1&lt;/code&gt; до &lt;code&gt;49&lt;/code&gt; - это значения для предполагаемых областей нахождения пальцев левой руки, по &lt;code&gt;9-10&lt;/code&gt; на каждый палец.&lt;/li&gt;
&lt;li&gt;Значения от &lt;code&gt;50&lt;/code&gt; до &lt;code&gt;99&lt;/code&gt; -это значения для предполагаемых областей нахождения пальцев правой руки, по &lt;code&gt;10&lt;/code&gt; на каждый палец.&lt;/li&gt;
&lt;li&gt;Значения больше &lt;code&gt;100&lt;/code&gt; и меньше &lt;code&gt;200&lt;/code&gt; - точное нахождение соответсвующего пальца, для того чтобы узнать какого - надо вычесть &lt;code&gt;100&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Теперь можно вернуться к алгоритму, запускаем первый проход - попиксельно анализируем текущий кадр изображения.&lt;/p&gt;

&lt;p&gt;Если пиксель не раскрашен ни одним цветом из определённых выше плюс-минус дельта, в ячейку массива &lt;code&gt;*fingers-values*&lt;/code&gt; записывается &lt;code&gt;0&lt;/code&gt;. Если это &lt;em&gt;предположительно&lt;/em&gt; какой-то конкретный палец (цвет пикселя совпадает с одним из предопределённых цветов), в массив записывается соответствующее число - &lt;code&gt;1-9&lt;/code&gt; для большого пальца, &lt;code&gt;10-19&lt;/code&gt; для указательного, &lt;code&gt;20-29&lt;/code&gt; для среднего, &lt;code&gt;30-39&lt;/code&gt; для безымянного и &lt;code&gt;40-49&lt;/code&gt; для мизинца. Сейчас в ячейки записываются только значения &lt;code&gt;9&lt;/code&gt;,&lt;code&gt;19&lt;/code&gt;, &lt;code&gt;29&lt;/code&gt;, &lt;code&gt;39&lt;/code&gt;, &lt;code&gt;49&lt;/code&gt; - я рассчитывал сделать дополнительную градацию в зависимости от того, насколько близко к &amp;ldquo;среднему&amp;rdquo; цвету оказалось значение, но это оказалось не нужно (однако диапазоны по 10 сильно помогают в дальнейшем). По умолчанию считается, что найдены пальцы левой руки. Количество найденых участков одного цвета на этом этапе никак не контролируется и не регулируется.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/nijiato-detection-of-fingers-motion-algorithm/values.png&#34; alt=&#34;Сorrespondence of colors and fingers&#34;&gt;&lt;/p&gt;

&lt;p&gt;Это всё, кадр просканирован, массив заполнен, однако это только первый этап, &lt;em&gt;в массиве значения меньше &lt;code&gt;50&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;ку.-второй-проход.-определение-координат-и-углов.&#34;&gt;&lt;a href=&#34;#ку.-второй-проход.-определение-координат-и-углов.&#34; title=&#34;Ку. Второй проход. Определение координат и углов.&#34;&gt;Ку. Второй проход. Определение координат и углов.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Перед вторым проходом кадра создаётся временный массив из 10 булевых переменных &lt;code&gt;hits&lt;/code&gt;, в нём мы контролируем, какие пальцы уже были определены. Теперь мы поочерёдно проходим по каждой ячейке главного массива &lt;code&gt;*fingers-values*&lt;/code&gt;. Если значение текущей ячейки главного массива больше нуля и меньше &lt;code&gt;100&lt;/code&gt;, то мы проверяем, не был ли такой палец уже определён, если был - то пропускаем ячейку, если нет - пытаемся сделать предположение о том, какая это может быть рука на основе координаты &lt;code&gt;x&lt;/code&gt; для этой ячейки - если уже был найден такой же палец левой руки и его координата &lt;code&gt;x&lt;/code&gt; оказалась больше чем текущая (но не на слишком близком расстоянии, у меня - не менее &lt;code&gt;80px&lt;/code&gt;), то похоже, мы имеем дело с правой рукой, тогда мы прибавляем к текущему значению &lt;code&gt;50&lt;/code&gt; и работаем с уже обновлённым.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/nijiato-detection-of-fingers-motion-algorithm/distance.png&#34; alt=&#34;Distance between fingers&#34;&gt;&lt;/p&gt;

&lt;p&gt;Теперь у мы знаем руку и предположительную область нахождения пальца, осталось определить его координаты. Для этого запоминаем координаты &lt;code&gt;x&lt;/code&gt; и &lt;code&gt;y&lt;/code&gt; текущей точки, в цикле по углам от &lt;code&gt;0&lt;/code&gt; до &lt;code&gt;pi&lt;/code&gt;, с шагом, например, &lt;code&gt;pi / 20&lt;/code&gt;, вычисляем координаты пикселей для каждого из лучей с соответсвующим углом, простирающихся из этой точки (в не-учебной версии заранее вычисленные относительные координаты можно и закэшировать), длина лучей равна заранее установленному числу, у меня это &lt;code&gt;31px&lt;/code&gt; (включая текущий пискель, вверх и вниз по 15), а их центр расположен в текущей точке.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/nijiato-detection-of-fingers-motion-algorithm/angles.png&#34; alt=&#34;Angles detection algorythm&#34;&gt;&lt;/p&gt;

&lt;p&gt;Координаты пикселей каждого из лучей однозначно соответствуют индексам соответсвующих соседних ячеек в массиве &lt;code&gt;*fingers-values*&lt;/code&gt;. Оставаясь курсором на текущей точке, мы подсчитываем попиксельно для каждого из лучей количество совпавших значений (те, которые от &lt;code&gt;1&lt;/code&gt; до &lt;code&gt;50&lt;/code&gt;, прибавляя &lt;code&gt;50&lt;/code&gt; если это правая рука), если это количество является допустимым для такой длины луча (я разрешаю ошибку в 4 пикселя, то есть совпасть должны 27 пикслей из 31-го), то бинго - &lt;strong&gt;мы определили угол и положение пальца&lt;/strong&gt;: координаты пальца (условные) - это начальная и конечная координаты луча, угол наклона пальца - это угол луча, который совпал. Можно записать в &lt;code&gt;*hits*&lt;/code&gt;, что палец найден и вывести на экран (или в &lt;code&gt;stdout&lt;/code&gt;) данные.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/nijiato-detection-of-fingers-motion-algorithm/smile.png&#34; alt=&#34;Smile&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ку.-возможные-применения&#34;&gt;&lt;a href=&#34;#ку.-возможные-применения&#34; title=&#34;Ку. Возможные применения&#34;&gt;Ку. Возможные применения&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Когда есть координаты пальцев и углы их наклона, можно анализировать практически любые &amp;ldquo;гесчуры&amp;rdquo;. Правда, от анализатора будет требоваться умение &amp;ldquo;предсказывать&amp;rdquo; положения на основе предыдущих состояний - если палец скрылся из вида, то может быть рука была сжата в кулак или было совершено быстрое движение вовне кадра. Есть решаемая проблема с определением какой руке принадлежит палец, её можно решить засчёт дополнительных маркеров на ладонях рук (если не видно маркера, а пальцы идут в кадре в обратном порядке - то это тыльная сторона), как раз остаются синий и фиолетовый цвета (я их добавил на картинки для наглядности), или можно вообще не принимать во внимание для &amp;ldquo;гесчурсов&amp;rdquo;, какая это рука, если недостаточно данных (в камеру видно только два пальца). Эти &amp;ldquo;гесчуры&amp;rdquo; можно использовать для управления интерфейсами как в &lt;a href=&#34;http://habrahabr.ru/blogs/ui_design_and_usability/95590/&#34;&gt;упомянутой статье&lt;/a&gt; - переноса окон, перебора картинок в альбомах, вообще управления интерфейсом, чтобы всё было как в Minority Report, при этом нужна только камера и преодоление психологического барьера, чтобы вырезать и надеть на пальцы цветные бумажки (или подобные контроллеры). Это пока что дешевле чем датчики и пока что веселее чем существующие применения Microsoft Kinect :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; Люди поделились со мной &lt;a href=&#34;http://blog.makezine.com/archive/2010/07/gestural_interface_via_flamboyant_g.html&#34;&gt;этим видео&lt;/a&gt;, идея очень похожа, но у меня более чердачная версия всё равно :). И время прошло и Microsoft Kinect стал делать намного более интересные вещи, так что извини меня Microsoft Kinect :)&lt;/p&gt;
&lt;h3 id=&#34;ку.-что-улучшить&#34;&gt;&lt;a href=&#34;#ку.-что-улучшить&#34; title=&#34;Ку. Что улучшить&#34;&gt;Ку. Что улучшить&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Добавить калибровку, оценивать уровень освещения, ввести девайс &amp;ldquo;цветная бумажка Nijiato&amp;rdquo; в массовое производство&lt;/li&gt;
&lt;li&gt;Более разумно определять какую руку видно в камеру, например по дополнительной бумажке на ладони и на основе расположения пальцев (если нет бумажки - это тыльная сторона рук&lt;/li&gt;
&lt;li&gt;Много оптимизации:

&lt;ul&gt;
&lt;li&gt;можно кэшировать относительные координаты лучей&lt;/li&gt;
&lt;li&gt;сделать вычисления поточными&lt;/li&gt;
&lt;li&gt;можно сканировать не каждый кадр, а каждый десятый, быстрые движения при этом &amp;ldquo;додумывать&amp;rdquo; на этапе анализирования &amp;ldquo;гесчурсов&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ку.-пояснения-по-программе&#34;&gt;&lt;a href=&#34;#ку.-пояснения-по-программе&#34; title=&#34;Ку. Пояснения по программе&#34;&gt;Ку. Пояснения по программе&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;На данный момент необходимо установить и зарегистрировать в ADSF пакеты из &lt;a href=&#34;http://code.google.com/p/nijiato/source/browse/requirements&#34;&gt;этого списка&lt;/a&gt; (там указаны репозитории и необходимые команды), установить пакет &lt;code&gt;libv4l-dev&lt;/code&gt; и &lt;code&gt;libgtkglext&lt;/code&gt;. Также можно установить &lt;code&gt;rlwrap&lt;/code&gt; для более удобной работы с интерпретатором. Если система 64-битная, нужно будет убрать хак из биндингов CL-V4L2, это также описано в &lt;a href=&#34;http://code.google.com/p/nijiato/source/browse/requirements&#34;&gt;requirements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;После выполнения этих операций запуск прост:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ LD_PRELOAD=/usr/lib/libv4l/v4l2convert.so [rlwrap] sbcl
* (load &amp;#34;nijiato-demo-load.lisp&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;code&gt;.so&lt;/code&gt;-файл может лежать в другом месте, в зависимости от устройства и битности вашей операционной системы)&lt;/p&gt;

&lt;p&gt;Программа использует для запуска переработанный демо-пример из &lt;code&gt;CL-V4L2&lt;/code&gt;, который показывает GTK-окно и проецирует на него OpenGL-текстуру с изображением с камеры, а также позволяет считывать пиксели на каждом фрейме. FASL-версия может не запуститься, с этой проблемой я борюсь.&lt;/p&gt;
&lt;h3 id=&#34;ку.-видео&#34;&gt;&lt;a href=&#34;#ку.-видео&#34; title=&#34;Ку. Видео&#34;&gt;Ку. Видео&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;И наконец видео с работой программы, при старте загружается много библиотек, можно промотать первые секунд 30. &amp;ldquo;Определённые&amp;rdquo; положения пальцев отображаются тонкой однопиксельной чёрной линией (те самые совпавшие лучи) и выводятся в консоль в читаемом виде. В середине видео не определяется два больших пальца разных рук, это из-за того, что они расстояние между ними меньше 80 пикселей, которые я задал как минимальную ширину между руками. Окно, которое берётся из камеры намеренно маленькое, чтобы программа не так сильно тормозила :).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vimeo.com/14073181&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/nijiato-detection-of-fingers-motion-algorithm/vimeo-video-frame.png&#34; alt=&#34;Link to Vimeo video&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>GWT + mvp4g: видео доклада + отзыв о ADDConf&#39;11 + пример с портлетами</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/gwt-mvp4g-layouts/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/gwt-mvp4g-layouts/</id>
                <updated>2010-07-27T00:46:00Z</updated>
                
                
                <content type="html">&lt;h5 id=&#34;вступление&#34;&gt;&lt;a href=&#34;#вступление&#34; title=&#34;Вступление&#34;&gt;Вступление&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/gwt-mvp4g-layouts/mvp4g-logo-small.png&#34; alt=&#34;mvp4g logo&#34;&gt;&lt;/p&gt;

&lt;p&gt;Несомненно, сейчас уже многие знают, что такое &lt;a href=&#34;http://code.google.com/webtoolkit/&#34;&gt;GWT&lt;/a&gt;. Многие знают, что за концепция — &lt;a href=&#34;http://en.wikipedia.org/wiki/Model-view-presenter&#34;&gt;MVP&lt;/a&gt;. При этом, ещё не многие слышали о фреймворке &lt;a href=&#34;http://code.google.com/p/mvp4g/&#34;&gt;mvp4g&lt;/a&gt; (облегчённая реализация MVP для GWT) — а я бы хотел, чтобы на него обратили внимание как можно больше GWT-программистов: фреймворк значительно упрощает написание MVP-кода и явно повышает его наглядность. По этой причине я делал о нём &lt;a href=&#34;http://addconf.ru/event.sdf/ru/add_2011/authors/AntonKotenko/313&#34;&gt;доклад&lt;/a&gt; на конференции &lt;a href=&#34;http://addconf.ru&#34;&gt;ADDConf&lt;/a&gt;, видео которого представляю ниже.&lt;/p&gt;

&lt;p&gt;В статью я добавил, кроме прочего, &lt;a href=&#34;#section-3&#34;&gt;отзыв о конфренции&lt;/a&gt; и докладах которые я видел, а также &lt;a href=&#34;#section-11&#34;&gt;ссылки/описание работающего примера&lt;/a&gt; создания системы портлетов/порталов на GWT+mvp4g, я его упоминал в докладе.&lt;/p&gt;
&lt;h3 id=&#34;видео&#34;&gt;&lt;a href=&#34;#видео&#34; title=&#34;Видео&#34;&gt;Видео&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Собственно, вот видео доклада.&lt;/p&gt;
&lt;h4 id=&#34;часть-1.-gwt-вступление&#34;&gt;&lt;a href=&#34;#часть-1.-gwt-вступление&#34; title=&#34;Часть 1. GWT, вступление&#34;&gt;Часть 1. GWT, вступление&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/26357352?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;400&#34; height=&#34;225&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/26357352&#34;&gt;GWT + mvp4g Session from ADDConf 2011 (part 1/3, Ru)&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;h4 id=&#34;часть-2.-mvp4g-и-подробнее-про-gwt&#34;&gt;&lt;a href=&#34;#часть-2.-mvp4g-и-подробнее-про-gwt&#34; title=&#34;Часть 2. mvp4g и подробнее про GWT&#34;&gt;Часть 2. mvp4g и подробнее про GWT&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/26413549?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;400&#34; height=&#34;225&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/26413549&#34;&gt;GWT + mvp4g Session from ADDConf 2011 (part 2/3, Ru)&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;h4 id=&#34;часть-3.-вопросы-и-ответы&#34;&gt;&lt;a href=&#34;#часть-3.-вопросы-и-ответы&#34; title=&#34;Часть 3. Вопросы и ответы&#34;&gt;Часть 3. Вопросы и ответы&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/26715073?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;400&#34; height=&#34;225&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/26715073&#34;&gt;GWT + mvp4g Session from ADDConf 2011 (part 3/3, Ru)&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/shamansir&#34;&gt;Ulric Wilfred&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;h5 id=&#34;p.s.&#34;&gt;&lt;a href=&#34;#p.s.&#34; title=&#34;P.S.&#34;&gt;P.S.&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Если что-то невнятно или непонятно, пожалуйста пишите мне лично (касательно моих неразборчивых слов или объяснений) или (касательно вопросов по GWT и mvp4g) в нашу &lt;a href=&#34;https://groups.google.com/forum/#!forum/google-web-toolkit-ru&#34;&gt;русскую google-группу о GWT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Я буду готовить субтитры на русском, чтобы перевести их затем на английский. Если вдруг кому они нужны, пишите мне также лично.&lt;/p&gt;

&lt;p&gt;Огромное спасибо &lt;a href=&#34;http://belonesox.moikrug.ru/&#34;&gt;Стасу Фомину&lt;/a&gt; за очень чрезвычайно сложный композитинг видео: во время доклада не записался скринкаст и ему пришлось вручную синхронизировать кадры (300 с лишним штук!) с моими словами — наверное, теперь он вынужденно знает, кроме всего прочего, очень много и о GWT. Причём он также подготовил мне видео и с английскими слайдами. На это ушло более трёх недель его труда и труда его компьютера.&lt;/p&gt;
&lt;h3 id=&#34;отзыв&#34;&gt;&lt;a href=&#34;#отзыв&#34; title=&#34;Отзыв&#34;&gt;Отзыв&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Я посещал до этого не так много конференций (штук пять) и всё ещё не был на Google Developer Days, но я думаю организационно всё было близко именно к GDD :).&lt;/p&gt;

&lt;p&gt;Изначально, когда мне предложили участвовать, хоть из меня выступатель был тогда вообще без какого-либо опыта, я посмотрел на &lt;a href=&#34;http://addconf.ru&#34;&gt;сайт конференции&lt;/a&gt; и он мне скептически совсем не понравился — он на многое рассчитан (как я позже узнал), но дизайн почти что полностью ужасен. Логотип конференции в нём тоже не смотрится. Но это оказалась практически единственная претензия, &lt;a href=&#34;http://www.xen.ru/&#34;&gt;Миша Кашкин&lt;/a&gt; настоятельно посоветовал мне участвовать, предложение и условия были интересными, мне дали аж два доклада, были заманчивые другие доклады, пару докладов читали мои знакомые и в результате я нисколько не расстроен, только обрадован и мне стыдно за мой скептизизм. А логотип мне, кстати, потом полюбился.&lt;/p&gt;

&lt;p&gt;Ну и я лох, &lt;a href=&#34;http://lib.custis.ru/Fluxus_(%D0%90%D0%BD%D1%82%D0%BE%D0%BD_%D0%9A%D0%BE%D1%82%D0%B5%D0%BD%D0%BA%D0%BE,_ADD-2010)&#34;&gt;доклад по fluxus/Processing&lt;/a&gt; вышел почти что никаким, я почти не уделил ему внимания при подготовке в пользу текущего доклада и в результате не смог запустить звук и рассказать детально хотя бы только про fluxus (одна из проблем со звуком была в том, что я пытался настроить одновременно и fluxus и запись скринкаста со звуком, а они перемешались в требованиях к &lt;code&gt;alsa&lt;/code&gt; / &lt;code&gt;pulseaudio&lt;/code&gt; / &lt;code&gt;sox&lt;/code&gt;&amp;hellip;). И да, у меня Linux.&lt;/p&gt;
&lt;h4 id=&#34;организаторы&#34;&gt;&lt;a href=&#34;#организаторы&#34; title=&#34;Организаторы&#34;&gt;Организаторы&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://blogs.byte-force.com/members/xor/default.aspx&#34;&gt;Андрей Майоров&lt;/a&gt; и &lt;a href=&#34;http://belonesox.moikrug.ru/&#34;&gt;Стас Фомин&lt;/a&gt; — организаторы конференции — отличные и отзывчивые собеседники по почте и в жизни, в подготовке доклада меня никто сильно не ограничивал и не подгонял, только помогал, в результате я за пол-месяца (или месяц?) наваял презентацию на 300 слайдов, но рассказал её всё равно довольно быстро :). На конференции они всем помогали и участвовали, организовывали вай-фай потерявшимся, контролировали видео-запись, поддерживали при необходимости докладчиков и многое-многое прочее.&lt;/p&gt;
&lt;h4 id=&#34;залы&#34;&gt;&lt;a href=&#34;#залы&#34; title=&#34;Залы&#34;&gt;Залы&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Три больших зала, один (центральный) очень крупный с большой сценой, второй помельче (но с двумя экранами по разные стороны комнаты!), третий — в виде широкого коридора. Я за весь первый день (на втором я не смог быть) не видел ни одного &amp;ldquo;невольно непосаженного&amp;rdquo; человека. В первом и третьем зале все стулья (насколько я помню, если вру — по крайней мере 60%) были с подставками под ноутбук. Удобные настолько, что хотелось взять себе такой домой.&lt;/p&gt;

&lt;p&gt;Со всех мест было слышно и видно. Технических неполадок не помню. Неудобств не помню, во втором зале точно были розетки (не на всех, но можно было достать), в первом и третьем — не знаю. Вай-фай у меня не терялся, всё было стабильно.&lt;/p&gt;
&lt;h4 id=&#34;организация&#34;&gt;&lt;a href=&#34;#организация&#34; title=&#34;Организация&#34;&gt;Организация&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Расписание на самой конференции (висело только у главного зала) было очень симпатично оформлено, цветное и при этом понятное. Сама идея разделения на три зала, распределение по ним докладов у меня не вызвали нареканий, по-моему всё было честно.&lt;/p&gt;

&lt;p&gt;Всегда были доступны вода и кофе (и для слушающих, в холле, и для докладчиков, на столах), обед насколько я слышал отзывы, был тоже хорош.&lt;/p&gt;

&lt;p&gt;В холле стояли стенды JetBrains, e-Legion и других хороших фирм, где они давали комментарии к своим докладам и искали к себе хороших умных программистов.&lt;/p&gt;

&lt;p&gt;Также в холле, около кофе-машины, было два монитора с вещанием из твиттера (небольших, правда).&lt;/p&gt;

&lt;p&gt;При входе выдавали разноцветные симпатичные бейджи, пакетики с фирменной ручкой, расписанием и блокнотом, в котором на каждом развороте на половине одной стороны было описание доклада, а на остальной части — место для записей (для крупных докладов по-моему было больше страниц). В конце блокнота были цветные фотографии организаторов, обложка твёрдая и цветная — полиграфия безупречна :). А, ещё в пакетике была железная визитница, очень удобная, с предподготовленными (!) визитками, тоже весьма симпатичными.&lt;/p&gt;

&lt;p&gt;Переключатель слайдов, кстати, работал вполне стабильно и на убунте.&lt;/p&gt;

&lt;p&gt;Претензий к организации у меня в результате никаких не было, никакой лишней бюрократии, всё дружно и человечно.&lt;/p&gt;

&lt;p&gt;Стас Фомин собрал, оформил и обработал (и продолжает это делать) кучу видео с докладов (немногие из видео с русских конференций, на которых слайды крупно отдельно, докладчик отдельно) и отдаёт их докладчикам безвозмездно.&lt;/p&gt;
&lt;h4 id=&#34;доклады&#34;&gt;&lt;a href=&#34;#доклады&#34; title=&#34;Доклады&#34;&gt;Доклады&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ввиду того, что я готовился к докладам/докладывал и кроме этого не присутствовал второй день, я успел посмотреть немногое. Некоторые доклады я потом посмотрел/пересмотрел отдельно в записи, но про них рассказывать, видимо, не имею права. Посмотрите &lt;a href=&#34;http://lib.custis.ru/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:ADD-2011_%28%D0%BD%D0%B0%D1%88%D0%B0_%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%29&#34;&gt;список видео&lt;/a&gt; Стаса Фомина, там очень много интересных вещей.&lt;/p&gt;

&lt;p&gt;Также прошу нещадно критиковать мой доклад, чтобы я мог учитывать недостатки на будущее. Знаю, что сам мямлил и торопился. Может буду поначалу отмазываться, но в любом случае запомню и учту все ваши замечания :).&lt;/p&gt;
&lt;h5 id=&#34;максим-мазин-и-language-oriented-programming&#34;&gt;&lt;a href=&#34;#максим-мазин-и-language-oriented-programming&#34; title=&#34;Максим Мазин и Language Oriented Programming&#34;&gt;Максим Мазин и Language Oriented Programming&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://lib.custis.ru/Language_Oriented_Programming_(LOP)_%D0%B2_%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D0%B8_(%D0%9C%D0%B0%D0%BA%D1%81%D0%B8%D0%BC_%D0%9C%D0%B0%D0%B7%D0%B8%D0%BD,_ADD-2011)&#34;&gt;Видео&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Может чуточку сумбурно, но сама тема настолько интересная, что после доклада все побежали смотреть ещё реальных примеров на ноутбуке в холле и смотрели их там около получаса (а кто-то остался у стенда JetBrains на весь день). &lt;a href=&#34;http://www.rsdn.ru/article/philosophy/LOP.xml&#34;&gt;LOP&lt;/a&gt; — Language Oriented Programming. &lt;a href=&#34;http://habrahabr.ru/blogs/personal/65278/&#34;&gt;MPS&lt;/a&gt; — система для написания собственных языков программирования от JetBrains. Её &lt;a href=&#34;http://stackoverflow.com/questions/3355289/what-is-practical-use-of-idea-mps-and-eclipse-xtext&#34;&gt;примерным конкурентом&lt;/a&gt;, получается, выступает &lt;a href=&#34;http://www.eclipse.org/Xtext/&#34;&gt;XText&lt;/a&gt; от Eclipse. Как я понимаю, именно эта cистема использовалась и для создания нового языка (который, конечно, все обсудили) &lt;a href=&#34;http://blog.jetbrains.com/kotlin/&#34;&gt;Kotlin&lt;/a&gt;. Это очень интересный доклад, советую не вчитываться в рецензии, а посмотреть его &lt;a href=&#34;http://lib.custis.ru/Language_Oriented_Programming_(LOP)_%D0%B2_%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D0%B8_(%D0%9C%D0%B0%D0%BA%D1%81%D0%B8%D0%BC_%D0%9C%D0%B0%D0%B7%D0%B8%D0%BD,_ADD-2011)&#34;&gt;на видео&lt;/a&gt;. Кстати, в нём также было и про то, как &amp;ldquo;думает&amp;rdquo; и подбирает варианты ваша IDE при наборе вами программного кода.&lt;/p&gt;

&lt;p&gt;Технически всё хорошо, поскольку доклад описывает настолько гиковую вещь, что для неё даже не нужно шуток и спецэффектов.&lt;/p&gt;
&lt;h5 id=&#34;алексей-какунин-и-liferay&#34;&gt;&lt;a href=&#34;#алексей-какунин-и-liferay&#34; title=&#34;Алексей Какунин и LifeRay&#34;&gt;Алексей Какунин и LifeRay&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://lib.custis.ru/%D0%A0%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D0%BA%D0%BE%D1%80%D0%BF%D0%BE%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D1%85_%D0%BF%D0%BE%D1%80%D1%82%D0%B0%D0%BB%D0%BE%D0%B2_%D1%81_%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC_Liferay_(%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B5%D0%B9_%D0%9A%D0%B0%D0%BA%D1%83%D0%BD%D0%B8%D0%BD,_ADD-2011)&#34;&gt;Видео&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Доклад о написании веб-приложений на &lt;a href=&#34;http://www.liferay.com/&#34;&gt;LifeRay&lt;/a&gt;, чем это удобно и почему, а также как &lt;a href=&#34;http://www.liferay.com/&#34;&gt;Liferay&lt;/a&gt; применяется в &lt;a href=&#34;http://www.emforge.org/&#34;&gt;EmForge&lt;/a&gt;. Алексей был моим первым начальником и я ему многим обязан в своём опыте, поэтому не буду сильно описывать: могу быть предвзят :). Вкратце: живо и помянули Microsoft :).&lt;/p&gt;
&lt;h5 id=&#34;time-management-by-михаил-гедзберг&#34;&gt;&lt;a href=&#34;#time-management-by-михаил-гедзберг&#34; title=&#34;Time Management by Михаил Гедзберг&#34;&gt;Time Management by Михаил Гедзберг&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://lib.custis.ru/Time_Management_%D0%B4%D0%BB%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0_(%D0%9C%D0%B8%D1%85%D0%B0%D0%B8%D0%BB_%D0%93%D0%B5%D0%B4%D0%B7%D0%B1%D0%B5%D1%80%D0%B3,_ADD-2011)&#34;&gt;Видео&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Важные составляющие работы в команде, как её организовать, &amp;ldquo;вышколить&amp;rdquo; до блеска и правильно работать в дальнейшем, от проджект-менеджера из Luxoft. В описании по ссылке есть почти полные конспекты доклада. GTD, Scrum, Agile — здесь про это всё. Немного занудно, некоторые вещи банальны, некоторые были в новь. В принципе, в докладе всё было описано верно и правильно: что засевшим в одной задаче программистам нужно давать новую; слушать на стэнд-апах не только тех, кто много говорит, а даже затыкать их; что нужно следить за поведением и состоянием программиста; как заставить говорить тех, кто мямлит; как правильно составлять ТЗ; как звонить и сообщать об опоздании; что нужно отвечать на письма. Но уж очень монотонно расказывалось + слайды были почему-то на английском.&lt;/p&gt;
&lt;h5 id=&#34;графическая-визуализация-логов-и-андрей-кирпичёв&#34;&gt;&lt;a href=&#34;#графическая-визуализация-логов-и-андрей-кирпичёв&#34; title=&#34;Графическая визуализация логов и Андрей Кирпичёв&#34;&gt;Графическая визуализация логов и Андрей Кирпичёв&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://lib.custis.ru/%D0%A8%D0%B2%D0%B5%D0%B9%D1%86%D0%B0%D1%80%D1%81%D0%BA%D0%B8%D0%B9_%D0%BD%D0%BE%D0%B6_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%D0%B0_-_%D0%B2%D0%B8%D0%B7%D1%83%D0%B0%D0%BB%D0%B8%D0%B7%D0%B8%D1%80%D1%83%D0%B5%D0%BC_%D0%BB%D0%BE%D0%B3%D0%B8_%D0%BE%D0%B4%D0%BD%D0%BE%D0%B9_%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B9!_(%D0%95%D0%B2%D0%B3%D0%B5%D0%BD%D0%B8%D0%B9_%D0%9A%D0%B8%D1%80%D0%BF%D0%B8%D1%87%D1%91%D0%B2,_ADD-2011)&#34;&gt;Видео&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Интересная, но очень по-математически изложенная тема о собственных разработках автора на Хаскеле &lt;a href=&#34;https://github.com/jkff/timeplot&#34;&gt;timeplot&lt;/a&gt; и &lt;a href=&#34;https://github.com/jkff/splot&#34;&gt;splot&lt;/a&gt;, звучала и смотрелась просто как неплохая лекция в институте. Тема очень интересная — про то, как через real-time парсинг текстовых логов можно делать разнообразнейшие цветные графики и в результате иметь воможность наглядно оценить время выполнения тех или иных задач и нагруженность процессора при их выполнении. Но эти ребята делают &lt;a href=&#34;http://fprog.ru/&#34;&gt;журнал про функциональное программирование&lt;/a&gt; и за это я готов простить им всё. Доклад был с картинками, всё чрезвычайно наглядно и подробно рассмотрено, наверное был разобран каждый кусок кода и способ использования.&lt;/p&gt;
&lt;h5 id=&#34;couchdb-by-андрей-орлов&#34;&gt;&lt;a href=&#34;#couchdb-by-андрей-орлов&#34; title=&#34;CouchDB by Андрей Орлов&#34;&gt;CouchDB by Андрей Орлов&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://lib.custis.ru/1b9-nosql-practice-couchdb-orlov&#34;&gt;Видео&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Этот доклад мне не понравился (единственный из всех) наверное потому, что визуально презентация не была подготовлена вообще никак. Times New Roman и серые таблицы при том, что CouchDB — это относительно свежая и отнюдь не бюрократичная тема: No-SQL это крутое течение, избавляющее нас от многих проблем, но здесь по-моему всё было именно что бюрократично. Проценты, на которые ускорились запросы. Дампы запросов. В качестве примера был приведён пример из опыта автора (ну, они все у нас из опыта) — промышленная АИС с электросчётчиками. Хотя это на практике показывает,  что новые веяния применяются не только в молодых стартапах. &lt;a href=&#34;http://lib.custis.ru/MongoDB_(%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B9_%D0%A2%D1%83%D0%BB%D0%B5%D0%BD%D1%86%D0%B5%D0%B2,_ADD-2011&#34;&gt;Соседний доклад&lt;/a&gt;) про MongoDB был значительно живее, насколько я понял по его видео. Но иногда серверные разработчики делают очень унылые доклады, но при этом являются отъявленными профессионалами, поэтому я говорю только про сам доклад и ни в коем случае не про личные или профессиональные качества автора.&lt;/p&gt;
&lt;h5 id=&#34;будущее-ecmascript-и-андрей-сошников&#34;&gt;&lt;a href=&#34;#будущее-ecmascript-и-андрей-сошников&#34; title=&#34;Будущее ECMASCript и Андрей Сошников&#34;&gt;Будущее ECMASCript и Андрей Сошников&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://lib.custis.ru/%D0%91%D1%83%D0%B4%D1%83%D1%89%D0%B5%D0%B5_ECMAScript_(%D0%94%D0%BC%D0%B8%D1%82%D1%80%D0%B8%D0%B9_%D0%A1%D0%BE%D1%88%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2,_ADD-2011)&#34;&gt;Видео&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Развитие JavaScript мне очень интересно (хотя оно зависит не только от спецификаций ECMASсript, но и от скорости развития браузерных движков), я очень уважаю этот язык и предан ему. Докладчик хорошо известен для тех, кто интересуется JavaScript. Сам доклад был хорош, только по делу, с большим количеством примеров и сравнений с тем, что было, и в результате ничего непонятного не было вообще. Лучше — смотреть.&lt;/p&gt;

&lt;p&gt;Касательно самих нововведений у меня есть личное мнение. В новых стандартах вводят много заимствований из функциональных и динамически типизированных языков, вроде list comprehensions подобных питоновским, лямбд и прочего. Пусть так, хотя для меня это всё же потеря &amp;ldquo;духа&amp;rdquo; языка, получается что в сфере развития &amp;ldquo;старых&amp;rdquo; языков всё идёт к одному коммунистическому мета-языку. Тот же Гвидо в своё время отказался от внедрения java-подобных интерфейсов в питон, хотя его очень просили, и правильно, я считаю, сделал.&lt;/p&gt;

&lt;p&gt;Чтобы &amp;ldquo;залатать&amp;rdquo; многие кривые моменты в новом стандарте выбран не очень привычный синтаксис: оператор &lt;code&gt;#&lt;/code&gt; для оборачивания участков кода, которые должны сохранить в себе внешние переменные, замыканий; оператор &lt;code&gt;let&lt;/code&gt; вместо &lt;code&gt;var&lt;/code&gt; (я так понял, что планируется полная замена), специальный синтаксис для того самого &lt;code&gt;this&lt;/code&gt;, который должен отнаследоваться от внешнего блока кода и т.п. Но возможно, просто не было выхода.&lt;/p&gt;
&lt;h4 id=&#34;тем-не-менее-недостатки&#34;&gt;&lt;a href=&#34;#тем-не-менее-недостатки&#34; title=&#34;Тем не менее, недостатки&#34;&gt;Тем не менее, недостатки&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Потом уже, после приезда с конференции подумал о паре [незначительных] моментов:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Всё-таки, дизайн сайта плох — а это лицо конференции. Функциональность, при этом, у него хорошая (отдельные статьи про авторов и отдельные про их доклады, с комменариями фото и даже слайдами, ссылки в расписании, фейсбуковые лайки). Логотип сначала кажется странным, но потом привыкаешь и он становится довольно милым и приятным глазу (особенно на атрибутике). Но сайт — всё же нет.

&lt;ol&gt;
&lt;li&gt;Вход для вольных программистов очень дорогой. В феврале-марте это было 5000, в мае — 8000 (подталкивали раньше купить). Возможно это вполне оправдано, чрезвычайно много сделано для организации конференции, но многие (кого отправили не от компании и не смогли читать доклад) не пошли на неё именно из-за цены. С другой стороны, всё видео в свободном доступе, быстро и оперативно, а посетителей было вполне достаточно на все три зала. Тогда единственное, что нужно —агитировать компании, чтобы платили сотрудникам за походы эту на конференцию.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Расписание висело только у главного зала, между докладами там всем приходилось толпиться. Однако менее цветной вариант был ещё у каждого в пакетике.&lt;/li&gt;
&lt;li&gt;Из-за того, что крупный зал был очень большой и приятный, в нём многие так и остались и не ходили на доклады в соседних залах. Хотя, может им и правда была интересна только программа первого зала и/или возможно в ней было сконцентрировано больше известных людей, чем в других залах.&lt;/li&gt;
&lt;li&gt;Во время первого доклада в первом зале из проектора освещался только лоб Максима Мазина, наверное это недостаток освещения или расположения докладчика.&lt;/li&gt;
&lt;li&gt;Нужна такая же простая, как под Windows, программа записи скринкастов под Linux :). Хотя само существование такой программы для конференции, которую кстати написал Стас, уже вызывает уважение.&lt;/li&gt;
&lt;li&gt;Нужно (возможно) продумать сидячие места для докладчиков (для &lt;code&gt;livecoding&lt;/code&gt; это нужно, и нужны микрофоны в ухо). Однако на докладе Fluxus во втором зале мне дали стул и микрофон в руки и я довольно спокойно с него вещал :).&lt;/li&gt;
&lt;li&gt;Футболки, всё же, должны быть [почти] бесплатно, думаю дешевле 400 рублей. Это, всё же, пост-реклама конференции.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;итог-отзыва&#34;&gt;&lt;a href=&#34;#итог-отзыва&#34; title=&#34;Итог отзыва&#34;&gt;Итог отзыва&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Всем рекомендую посетить эту конференцию в следующем году, организовано практически идеально, всем боссам и финансистам компаний настоятельно советую выделять программистам на неё бюджет! :)&lt;/p&gt;
&lt;h3 id=&#34;пример-с-портлетами&#34;&gt;&lt;a href=&#34;#пример-с-портлетами&#34; title=&#34;Пример с портлетами&#34;&gt;Пример с портлетами&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Фреймворк mvp4g сам по себе помогает писать приложения, в которых либо не происходит значительных изменений во внутренней части страницы, либо вообще сменяется только её центральная часть. Нельзя сказать, что фреймворк заточен на это — в ближайшем будущем эта ситуация может измениться, тем не менее на данный момент это так.&lt;/p&gt;

&lt;p&gt;Однако в &lt;a href=&#34;http://experika.com&#34;&gt;нашем проекте&lt;/a&gt;, в какой-то момент, накопилась критическая масса страниц с нескрываемо схожим расположением виджетов и мы с &lt;a href=&#34;http://gashock.blogspot.com/&#34;&gt;Виталием Гашок&lt;/a&gt; (который и познакомил меня с этим фреймворком) и &lt;a href=&#34;http://lazio.com.ua/&#34;&gt;Сергеем Дыниовским&lt;/a&gt; (верстальщиком, который разобрался в хитросплетениях виджетов GWT)  решили, что пора эти вещи структурировать и генерализировать. Так родился набор лэйаутов, наречённых именами известных артистов, существующие страницы были распределены по этим лэйаутам и начался рефакторинг (который, конечно же, не только избавил нас от некоторых набивших оскомину костылей, но и добавил десяток новых багов). Кроме того, мы с удовольствием убрали повторяющиеся реализации виджетов, которые приходилось делать из-за их различного поведения на разных страницах. Квинтэссенция этого рефакторинга, полностью отделённая от логики проекта и тех багов, которые он от проекта получил в наследство, собственно, и описана в этой статье.&lt;/p&gt;
&lt;h4 id=&#34;где-посмотреть&#34;&gt;&lt;a href=&#34;#где-посмотреть&#34; title=&#34;Где посмотреть?&#34;&gt;Где посмотреть?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Исходный код лежит на github: &lt;a href=&#34;https://github.com/shamansir/gwt-mvp4g-layouting-demo&#34;&gt;github.com/shamansir/gwt-mvp4g-layouting-demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В исполняемом и кликабельном состоянии (что называется &lt;em&gt;in action&lt;/em&gt;) пример доступен на GAE: &lt;a href=&#34;http://gwt-mvp4g-layouting-demo.appspot.com/&#34;&gt;gwt-mvp4g-layouting-demo.appspot.com&lt;/a&gt;. Это чисто технический пример, поэтому в нём нет никакого дизайна.&lt;/p&gt;

&lt;p&gt;Краткая документация по нему также располагается на github: &lt;a href=&#34;http://shamansir.github.com/gwt-mvp4g-layouting-demo/index-ru.html&#34;&gt;shamansir.github.com/gwt-mvp4g-layouting-demo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;что-ещё&#34;&gt;&lt;a href=&#34;#что-ещё&#34; title=&#34;Что ещё?&#34;&gt;Что ещё?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Добро пожаловать в нашу русскую группу о GWT на Google Groups: &lt;a href=&#34;https://groups.google.com/forum/#!forum/google-web-toolkit-ru&#34;&gt;google-web-toolkit-ru&lt;/a&gt;. Нас там ещё немного, но давно пора собраться и задать жару :).&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Fluxus — Прототипирование OpenGL графики и игр on-the-fly (добавить Scheme по вкусу)</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/post-about-fluxus/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/post-about-fluxus/</id>
                <updated>2010-07-10T00:46:00Z</updated>
                
                <summary type="html">Интернет для программиста интересующегося трёхмерной графикой уже несколько лет полнится видео, в котором на лету программируют визуалайзеры для музыки, сложные цветоморфированные эффекты или даже намного более хитрые вещи, работающие на стыке интерактива и трёхмерной графики - буквально, человек пишет код и где-то на фоне он тут же компилируется, выполняется и отображается результат, это называется &lt;em&gt;livecoding&lt;/em&gt;. Чаще всего такие программы пишутся на языках из Lisp-семейства, подобный редактор есть для ProcessingJS, он тут же рендерит результат выполнения графического кода в браузере, но речь не о нём.</summary>
                <content type="html">&lt;p&gt;Интернет для программиста интересующегося трёхмерной графикой уже несколько лет полнится видео, в котором на лету программируют визуалайзеры для музыки, сложные цветоморфированные эффекты или даже намного более хитрые вещи, работающие на стыке интерактива и трёхмерной графики - буквально, человек пишет код и где-то на фоне он тут же компилируется, выполняется и отображается результат, это называется &lt;em&gt;livecoding&lt;/em&gt;. Чаще всего такие программы пишутся на языках из Lisp-семейства, подобный редактор есть для ProcessingJS, он тут же рендерит результат выполнения графического кода в браузере, но речь не о нём.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pawfal.org/fluxus/&#34;&gt;&lt;strong&gt;Fluxus&lt;/strong&gt;&lt;/a&gt; - это одновременно кроссплатформенный open-source 3D-движок для игр на принципах &lt;a href=&#34;http://www.toplap.org&#34;&gt;livecoding&lt;/a&gt; и инструмент для прототипирования трёхмерной графики и интерактива в собственном трёхмерном пространстве. И при этом он не обделён &lt;a href=&#34;http://www.pawfal.org/fluxus/documentation&#34;&gt;достаточно подробной документацией&lt;/a&gt;. Язык программирования - расширенный графическими командами PLT Scheme.&lt;/p&gt;

&lt;p&gt;Впрочем, &lt;a href=&#34;http://www.youtube.com/watch?v=aTt8r3LhCFM&#34;&gt;смотрите сами&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;object width=&#34;480&#34; height=&#34;385&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/aTt8r3LhCFM?fs=1&amp;amp;hl=en_US&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/aTt8r3LhCFM?fs=1&amp;amp;hl=en_US&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;480&#34; height=&#34;385&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;Когда приложение запускается, оно запускается в режиме интерпретатора. Чтобы переключиться в режим написания полной программы, который показан на большинстве видео, нажмите Ctrl+1. Чтобы запустить рендеринг описанной сцены - нажмите F5.&lt;/p&gt;

&lt;p&gt;Вот, например, две вращающиеся меняющие цвет сферы:&lt;/p&gt;
&lt;pre lang=&#34;scheme&#34;&gt;&lt;code&gt;
(define (animate)
    (let* ((t (* (time) 2))
           (x (sin t))
           (y (cos t)))

    (with-state
        (translate (vector x y 0))
        (colour (vector (+ 1.5 (sin (time))) 0 0))
        (draw-sphere))

    (with-state
        (translate (vmul (vector x y 0) 3))
        (colour (vector 0 0 (- 1.5 (sin (time)))))
        (draw-sphere))))

(every-frame (animate))

&lt;/code&gt;&lt;/pre&gt;</content>
            </entry>
        
            <entry>
                <title>Deferred-вызовы серверного API в GWT (без RPC)</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/deferred-calls-in-gwt-no-rpc/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/deferred-calls-in-gwt-no-rpc/</id>
                <updated>2010-06-15T00:46:00Z</updated>
                
                <summary type="html">&lt;strong&gt;Deferred&lt;/strong&gt; - &lt;em&gt;зд.&lt;/em&gt; термин, который применяется для описания &lt;strong&gt;вложенных асинхронных вызовов&lt;/strong&gt;, см. например &lt;a href=&#34;http://javascript.ru/unsorted/async/deferred-deep&#34;&gt;Deferred в Javascript&lt;/a&gt; и конкретно &lt;a href=&#34;http://api.dojotoolkit.org/jsdoc/1.3/dojo.Deferred&#34;&gt;Deferred в Dojo framework&lt;/a&gt;. &lt;em&gt;Не путать с Deferred Binding&lt;/em&gt;.</summary>
                <content type="html">&lt;p&gt;&lt;strong&gt;Deferred&lt;/strong&gt; - &lt;em&gt;зд.&lt;/em&gt; термин, который применяется для описания &lt;strong&gt;вложенных асинхронных вызовов&lt;/strong&gt;, см. например &lt;a href=&#34;http://javascript.ru/unsorted/async/deferred-deep&#34;&gt;Deferred в Javascript&lt;/a&gt; и конкретно &lt;a href=&#34;http://api.dojotoolkit.org/jsdoc/1.3/dojo.Deferred&#34;&gt;Deferred в Dojo framework&lt;/a&gt;. &lt;em&gt;Не путать с Deferred Binding&lt;/em&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;Заранее отмечу, что статья никак не связана с GWT-RPC и описывает только &lt;em&gt;&amp;ldquo;нативные&amp;rdquo;&lt;/em&gt; вызовы серверного API. GWT-RPC ограничивает возможности крупных проектов тем, что на серверной строне может использоваться только Java, в нашем случае я хочу избавить разработчика клиентской стороны от таких ограничений, поэтому использую &lt;code&gt;RequestBuilder&lt;/code&gt; напрямую.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Как известно, в GWT рекомендуется придерживаться &lt;em&gt;асинхронных&lt;/em&gt; вызовов и полагаться только на них.&lt;/p&gt;

&lt;p&gt;Представим, что есть некое API, располагающееся на том же сервере, что и GWT-приложение. API предоставляет набор функций, которые можно вызывать по адресу вроде &lt;code&gt;http://127.0.0.1/api/do.something?param1=foo&amp;amp;param2=bar&lt;/code&gt; (или POST-запросом, неважно). Допустим, это API возвращает JSON-объекты в виде ответа. Если делать все функции в таком API атомарными, то рано или поздно придётся последовательно делать цепочки асинхронных запросов вроде &lt;code&gt;user.new&lt;/code&gt; (передаётся юзернейм и возвращется id пользователя), затем &lt;code&gt;session.new&lt;/code&gt; (только если &lt;code&gt;user.new&lt;/code&gt; исполнился корректно, передаём полученный id пользователя, получаем id сессии), затем &lt;code&gt;group.enter&lt;/code&gt; (только если &lt;code&gt;session.new&lt;/code&gt; исполнился корректно, передаём id юзера и id сессии), ну и так далее. Если какой-то запрос в цепочке свалился, то считается, что вся цепочка не сработала (а обычно требуется именно чтобы такая цепочка сработала вся до конца). Такие цепочки вызовов называются &lt;em&gt;вложенными&lt;/em&gt; и к ним принято применять термин &lt;em&gt;Deferred&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Итак, чтобы общаться с описанным API, нужно написать некий, простой в использовании, Java-GWT код, который будет позволять вызывать такие цепочки. О таком коде я последовательно и расскажу.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Ниже &amp;#39;хэшами&amp;#39; я называю &lt;code&gt;HashMap&lt;/code&gt;&amp;#39;ы, если не указано иного - просто для краткости, с &lt;code&gt;HashSet&lt;/code&gt;&amp;#39;ами и md5/sha-хэшами они не имеют ничего общего. В JavaScript это объекты, в PHP/Perl - хэш-массивы, в Python - словари. Не в том смысле, что это идентичные вещи, а в том, что это сходные концепции.&lt;/p&gt;

&lt;p&gt;Условимся, что API возвращает JSON-объекты, поля у которых варьируются, но всегда присутствует поле &lt;code&gt;&amp;quot;status&amp;quot;&lt;/code&gt;, равное &lt;code&gt;&amp;quot;error&amp;quot;&lt;/code&gt; (тогда присутствет также поле &lt;code&gt;&amp;quot;description&amp;quot;&lt;/code&gt;) или &lt;code&gt;&amp;quot;ok&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Для примера возьмём цепочку (названия функций говорят сами за себя, поэтому их назначения пояснять не буду):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user.enter&lt;/code&gt; - принимает &lt;code&gt;username=foo&lt;/code&gt; и возвращает &lt;code&gt;{ &amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;, &amp;#39;uid&amp;#39;: 50 }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.new&lt;/code&gt; - не принимает ничего и возвращает &lt;code&gt;{ &amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;, &amp;#39;sid&amp;#39;: &amp;#39;0e05bf5e-b521-46bf-8bf4-b017c7efd3d2&amp;#39; }&lt;/code&gt;, если пользователь вошёл&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group.enter&lt;/code&gt; - принимает &lt;code&gt;sid=0e05bf5e-b521-46bf-8bf4-b017c7efd3d2&lt;/code&gt; и &lt;code&gt;gid=somegroup&lt;/code&gt; и возвращает &lt;code&gt;{ &amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;, &amp;#39;master&amp;#39;: &amp;#39;true&amp;#39; }&lt;/code&gt;. Если группа не существует, она автоматически создаётся.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group.users&lt;/code&gt; - принимает &lt;code&gt;gid=somegroup&lt;/code&gt; и возвращает &lt;code&gt;{ &amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;, &amp;#39;users&amp;#39;: [&amp;#39;bill&amp;#39;, &amp;#39;steve&amp;#39;, &amp;#39;sergey&amp;#39;, &amp;#39;linus&amp;#39;] }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group.getmessages&lt;/code&gt; - принимает &lt;code&gt;gid=somegroup&lt;/code&gt;, &lt;code&gt;start_from=20&lt;/code&gt; и возвращает  &lt;code&gt;{ &amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;, &amp;#39;count&amp;#39;: 3, &amp;#39;messages&amp;#39;: [&amp;#39;helloall&amp;#39;, &amp;#39;hows iPad?&amp;#39;, &amp;#39;seems it sucks&amp;#39;, &amp;#39;forget about it&amp;#39;] }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;если произошла ошибка, она возвращается в виде &lt;code&gt;{ &amp;#39;status&amp;#39;: &amp;#39;error&amp;#39;, &amp;#39;code&amp;#39;: 200, &amp;#39;description&amp;#39;: &amp;#39;Wow!&amp;#39;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Общая идея такова: Поскольку между вызовами возвращаемые и передаваемые параметры обычно имеют одинаковые имена (или, лучше сказать, &lt;em&gt;обязаны&lt;/em&gt; иметь), то вполне достаточно иметь между этими вызовами некий общий контекст, в который будут складываться возвращённые параметры и из которого будут вытаскиваться те параметры, которые нужно передать. Такой контект можно предварительно подготовить, заранее установив в него уже известные переменные и передавать его, обновляя, сквозь все функции.&lt;/p&gt;

&lt;p&gt;Дополнительное преимущество такого подхода состоит в том, что &lt;em&gt;вообще все&lt;/em&gt; цепочки могут иметь &lt;em&gt;один общий&lt;/em&gt; контекст, в котором всегда будет доступен, например, последний ID сессии (будет замещён по ключу в хэше после каждого вызова &lt;code&gt;session.new&lt;/code&gt;) или хранить GUID последнего запроса, если условиться возвращать его в каждой функции, или верифицировать любой процесс приёма-отдачи засчёт установки некой переменной в контексте в ожидаемое значение и проверять его после выполнения запроса и т.п.&lt;/p&gt;

&lt;p&gt;Поэтому такой контекст может быть обычным &lt;code&gt;HashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class APICallContext extends HashMap&amp;lt;String, Object&amp;gt; { }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кода относительно много, поэтому начнём с конца и подготовим всё небходимое для вызова цепочки. Все без исключения внешние импорты берутся из пакетов  &lt;code&gt;com.google.gwt....&lt;/code&gt; и &lt;code&gt;java.util&lt;/code&gt;, поэтому я их не буду указывать.&lt;/p&gt;

&lt;p&gt;Опишем интерфейс хэндлера, который будет срабатывать после успешного вызова &lt;em&gt;каждой&lt;/em&gt; функции в цепочке (&lt;code&gt;statusCode == 200&lt;/code&gt;, &lt;code&gt;&amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;&lt;/code&gt;):&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface APIResponseHandler {
    public void handleResponse(JSONObject answer);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Опишем интерфейс хэндлера, который будет срабатывать после того, как выполнение &lt;em&gt;всей&lt;/em&gt; цепочки закончилось успешно и получать изменённый, в соответствии с ответами на запросы, контекст:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface APIChainResponseHandler {
    public void handleSuccess(EurekaAPICallContext context);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Опишем интерфейс хэндлера, который будет срабатывать после &lt;em&gt;первого&lt;/em&gt; неудачного вызова функции из цепочки:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface APIErrorHandler {
    public void handleError(String errorText);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате, вызов цепочки будет совершаться через передачу следующих параметров&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Списка из названий (алиасов) функций, которые требуется выполнить. Напр., &lt;code&gt;[&amp;quot;user.new&amp;quot;, &amp;quot;session.new&amp;quot;, &amp;quot;page.enter&amp;quot;]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Подготовленного контекста, или &lt;code&gt;null&lt;/code&gt;, тогда перед выполнением цепочки будет создан пустой контекст&lt;/li&gt;
&lt;li&gt;Хэндлера, который сработает после успешного выполнения всей цепочки (все функции вернули &lt;code&gt;&amp;#39;status&amp;#39;: &amp;#39;ok&amp;#39;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Хэндлера, который сработает после первого неудачного вызова одной из функций в цепочке (как минимум одна функция вернула &lt;code&gt;&amp;#39;status&amp;#39;: &amp;#39;error&amp;#39;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Так будет выглядеть описание функции, вызывающей такую цепочку:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public void callServerFuncsChain(List&amp;lt;String&amp;gt; funcsCodes, APICallContext context,
                                 APIChainResponseHandler finalSuccessHandler, APIErrorHandler errorHandler);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Любой из хэндлеров можно передать как &lt;code&gt;null&lt;/code&gt;, тогда в соответствующем случае просто ничего не будет вызвано.&lt;/p&gt;

&lt;p&gt;Создадим оборачивающий класс, который будет управлять связью с API и вставим в него все приведённые выше интерфейсы:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class APIConnector {

    @SuppressWarnings(&amp;#34;serial&amp;#34;)
    public class APICallContext extends HashMap&amp;lt;String, Object&amp;gt; { }

    public interface APIResponseHandler {
        public void handleResponse(JSONObject answer);
    }

    public interface APIErrorHandler {
        public void handleError(String errorText);
    }

    public interface APIChainResponseHandler {
        public void handleSuccess(EurekaAPICallContext context);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Укажем в этом классе общий URL API, к которому он будет подключаться:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public static final String SERVER_URL = &amp;#34;http://127.0.0.1/api&amp;#34;;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Опишем в нём хэш, который будет содержать данные о том, какие параметры необходимо передавать в каждую из функций API. Если функция не принимает параметров - её можно не указывать.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class APIConnector {

    public static final String SERVER_URL = &amp;#34;http://127.0.0.1/api&amp;#34;;

    private static final Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; apiFuncsMap = new HashMap&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;();

    static {
        apiFuncsMap.put(&amp;#34;user.enter&amp;#34;, &amp;#34;username&amp;#34;);
        // apiFuncsMap.put(&amp;#34;session.new&amp;#34;, null);
        apiFuncsMap.put(&amp;#34;group.enter&amp;#34;, Arrays.asList(&amp;#34;sid&amp;#34;, &amp;#34;gid&amp;#34;));
        apiFuncsMap.put(&amp;#34;group.users&amp;#34;, Arrays.asList(&amp;#34;gid&amp;#34;));
        apiFuncsMap.put(&amp;#34;room.getmessages&amp;#34;, Arrays.asList(&amp;#34;gid&amp;#34;, &amp;#34;start_from&amp;#34;));
        apiFuncsMap.put(&amp;#34;group.say&amp;#34;, Arrays.asList(&amp;#34;gid&amp;#34;, &amp;#34;gid&amp;#34;, &amp;#34;message&amp;#34;));
    };

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Опишем те параметры, которые можно не сохранять в контексте, дабы его не засорять:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
    private final Set&amp;lt;String&amp;gt; filterFields = new HashSet&amp;lt;String&amp;gt;(Arrays.asList(&amp;#34;status&amp;#34;, &amp;#34;description&amp;#34;));

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пусть класс будет иметь возможность работать в одном из режимов: &lt;code&gt;GET&lt;/code&gt; или &lt;code&gt;POST&lt;/code&gt; и принимать для этого в конструктор boolean-параметр &lt;code&gt;getMode&lt;/code&gt;, при значении &lt;code&gt;true&lt;/code&gt; будет включаться режим &lt;code&gt;GET&lt;/code&gt;, при значении &lt;code&gt;false&lt;/code&gt; - &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
    private final boolean getMode;

    public APIConnector(boolean getMode) {
        this.getMode = getMode;
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь напишем собственно метод, который будет делать единственный вызов единственной функции API и после удачного вызова вызывать хэндлер &lt;code&gt;successHandler&lt;/code&gt;, а после неудачного - &lt;code&gt;errorHandler&lt;/code&gt;. Для этого используется GWT-класс &lt;code&gt;RequestBuilder&lt;/code&gt;, который в скомпилированной версии генерирует известный нам AJAX-вызов через &lt;code&gt;XMLHttpRequest&lt;/code&gt; (согласно браузеру). Методу также передаётся список параметров функции/запроса в виде &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Кроме этого требуется указать коллбэк, который будет вызван из GWT после асинхронного вызова, для этого дополнительно опишем внутренний класс. И, будем запоминать последнюю ошибку на всякий случай (обратите внимание, как обрабатывается ошибка в коллбэке):&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
private boolean wasError = false;
private String lastErrorText = null;

protected void callServerFunc(String funcCode, Map&amp;lt;String, String&amp;gt; params,
                              APIResponseHandler successHandler,
                              APIErrorHandler errorHandler) {
    StringBuffer url = new StringBuffer();
    url.append(SERVER_URL + &amp;#34;/&amp;#34;);
    url.append(funcCode);
    if (getMode &amp;amp;&amp;amp; (params != null)) url.append(&amp;#34;?&amp;#34; + prepareParams(params));

    forgetErrors();

    RequestBuilder builder = new RequestBuilder(
                        getMode ? RequestBuilder.GET : RequestBuilder.POST,
                        url.toString());

    if (!getMode) {
        builder.setHeader(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;);
        builder.setRequestData(prepareParams(params));
    }
    builder.setCallback(new APIRequestCallback(successHandler, errorHandler));

    try {
        builder.send();
    } catch (RequestException e) {
        storeError(&amp;#34;Couldn&amp;#39;t retrieve data because of request exception. &amp;#34; + e.toString());
    } catch (Exception e) {
        storeError(&amp;#34;Unknown Exception: &amp;#34; + e.toString());
    }
}

protected static String prepareParams(Map&amp;lt;String, String&amp;gt; params) {
    if (params != null) {
        StringBuffer result = new StringBuffer();
        for (Iterator&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; iter = params.entrySet().iterator(); iter.hasNext(); ) {
            Map.Entry&amp;lt;String, String&amp;gt; param = iter.next();
            result.append(URL.encode(param.getKey()) + &amp;#34;=&amp;#34; + URL.encode(param.getValue()));
            if (iter.hasNext()) result.append(&amp;#34;&amp;amp;&amp;#34;);
        }
        return result.toString();
    } else return &amp;#34;&amp;#34;;
}

private void forgetErrors() {
    wasError = false;
    lastErrorText = null;
}

private void storeError(String errorText) {
    wasError = true;
    lastErrorText = errorText;
}

public final class APIRequestCallback implements RequestCallback {

    private final APIResponseHandler successHandler;
    private final APIErrorHandler errorHandler;

    public APIRequestCallback(APIResponseHandler successHandler,
                              APIErrorHandler errorHandler) {
        this.successHandler = successHandler;
        this.errorHandler = errorHandler;
    }

    public APIRequestCallback(APIResponseHandler successHandler) {
        this(successHandler, null);
    }

    private void handleError(String error) {
        if (errorHandler != null) errorHandler.handleError(error);
        storeError(error);
    }

    public void onError(Request request, Throwable exception) {
        handleError(&amp;#34;Can&amp;#39;t get JSON data: &amp;#34;  + exception.getMessage());
    }

    public void onResponseReceived(Request request, Response response) {
        if (200 == response.getStatusCode()) {
            // FIXME: check if response is trusted
            JSONValue value = JSONParser.parse(response.getText());
            if (value != null) {
                JSONObject answer = value.isObject();
                if (answer != null) {
                    if (successHandler != null) successHandler.handleResponse(answer);
                } else {
                    handleError(&amp;#34;Returned JSON can not be parsed as object&amp;#34;);
                }
            } else {
                handleError(&amp;#34;Returned response can not be parsed as JSON&amp;#34;);
            }
        } else {
            handleError(&amp;#34;Can&amp;#39;t get JSON data (&amp;#34; + response.getStatusText() + &amp;#34;)&amp;#34;);
        }
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Также этот метод использует встроенный в GWT JSON-парсер. Кроме всего прочего, он убежден, что из запроса ему приходит правильный JSON-объект поэтому от всех функций API требуется, соответственно и разумеется, чтобы они возвращали JSON-объект. Если какой-то из хэндлеров успеха/ошибки не объявлен - в соответствующих случаях ничего не будет вызвано.&lt;/p&gt;

&lt;p&gt;Настало время написать приватный метод, который будет вызывать одну функцию из цепочки зная о том, что при удаче ему нужно вызвать следующую, при ошибке - &lt;code&gt;errorHandler&lt;/code&gt;, а при заключительном успехе - &lt;code&gt;finalSuccessHandler&lt;/code&gt; (обратите внимание, что это другой интерфейс -  этот хэндлер вызывается не для каждой функции, а только при условии успеха выполнения всей цепочки).  Для этого кроме имени текущей выполняемой функции API ему будет передаваться итератор по именам из цепочки функций, и собственно оба хэндлера. Если следующей функции нет - цепочка окончена - будет вызваться хэндлер успеха,  если она есть - рекурсивно будет вызван тот же самой метод, уже для следующей функции, со сделавшим шаг итератором.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
private void callChainFunc(String function, final Iterator&amp;lt;String&amp;gt; funcsIter,
                           final APICallContext context,
                           final APIChainResponseHandler finalSuccessHandler,
                           final APIErrorHandler errorHandler) {
    List&amp;lt;String&amp;gt; requiredParams = apiFuncsMap.get(function);
    Map&amp;lt;String, String&amp;gt; params = null;
    if (requiredParams != null) {
        params = new HashMap&amp;lt;String, String&amp;gt;();
        for (String paramName: requiredParams) {
            if (context.get(paramName) == null) {
                throw new IllegalArgumentException(&amp;#34;Required parameter value &amp;#39;&amp;#34;
                            + paramName + &amp;#34;&amp;#39; for function &amp;#39;&amp;#34; + function + &amp;#34;&amp;#39; was not found in API context&amp;#34;);
            }
            params.put(paramName, context.get(paramName).toString());
        }
    }
    callServerFunc(function, params, new APIResponseHandler() {

        @Override
        public void handleResponse(JSONObject answer) {
            boolean wasError = &amp;#34;error&amp;#34;.equalsIgnoreCase(answer.get(&amp;#34;status&amp;#34;).toString().replace(&amp;#34;\&amp;#34;&amp;#34;, &amp;#34;&amp;#34;));
            if (wasError) {
                errorHandler.handleError(&amp;#34;received error status &amp;#34; + answer.get(&amp;#34;description&amp;#34;).toString());
                return;
            }
            Set&amp;lt;String&amp;gt; keys = answer.keySet();
            for (String key: keys) {
                if (!filterFields.contains(key)) {
                    context.put(key, answer.get(key));
                }
            }
            if (funcsIter.hasNext()) {
                callChainFunc(funcsIter.next(), funcsIter, context, finalSuccessHandler, errorHandler);
            } else {
                if (finalSuccessHandler != null) finalSuccessHandler.handleSuccess(context);
            }
        }

    }, errorHandler);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Метод, как видно, передаёт каждой функции в вызов только необходимые параметры, описанные в хэше c функциями, приведённом выше, берёт их значения из контекста и, после выполнения запроса, устанавливает в контекст по полям все значения из ответа, исключая поля указанные в фильтре, также приведённом выше. Поскольку данные в контекст могут быть установлены и из Java-кода заранее - значения в контексте это нативные объекты, а не строки или объекты JSON.&lt;/p&gt;

&lt;p&gt;И, наконец, внешний (публичный) метод, который позволит запустить весь процесс и который мы декларировали в самом начале. Он берёт итератор по списку функций, передаёт первую функцию из списка и сам этот итератор в тот самый приватный метод, который мы только что написали. Хэндлеры уходят туда же.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public void callServerFuncsChain(List&amp;lt;String&amp;gt; funcsCodes, final APICallContext context,
                                 final APIChainResponseHandler finalSuccessHandler,
                                 final APIErrorHandler errorHandler) {
    if (!funcsCodes.isEmpty()) {
        final Iterator&amp;lt;String&amp;gt; funcsIter = funcsCodes.iterator();
        callChainFunc(funcsIter.next(), funcsIter, context, finalSuccessHandler, errorHandler);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можно насоздавать алиасов для этого метода, требующих меньшего количества параметров - в качестве любого из хэндлеров позвояляется передавать &lt;code&gt;null&lt;/code&gt;, а контекст при его отсутствии можно создавать на месте через &lt;code&gt;new APICallContext()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Кстати, метод, который помогает внешнему пользователю создать контекст (это не статический метод, поскольку для внутреннего класса необходимо присутствие инстанса):&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
    public APICallContext newCallsContext() {
        return new APICallContext();
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь, пример использования. Общий контекст для всех цепочек можно хранить в приватном поле и передавать при соответствующей необходимости:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class UsersGroup {
    private final APIConnector apiConnector = APIConnector.getInstance(); // удобнее сделать APIConnector синглтоном
    private final APICallContext apiContext = apiConnector.newCallsContext();

    private final String username = &amp;#34;shamansir&amp;#34;;
    private final String groupname = &amp;#34;testgroup&amp;#34;;

    public void enterGroup() {
        apiContext.put(&amp;#34;rid&amp;#34;, roomname);
        apiContext.put(&amp;#34;start_from&amp;#34;, 0);
        apiContext.put(&amp;#34;username&amp;#34;, username);
        apiConnector.callServerFuncsChain(Arrays.asList(&amp;#34;user.get&amp;#34;,
                                                        &amp;#34;session.new&amp;#34;,
                                                        &amp;#34;group.enter&amp;#34;,
                                                        &amp;#34;group.users&amp;#34;,
                                                        &amp;#34;group.getmessages&amp;#34;),
                        apiContext, new APIChainResponseHandler() {

                            @Override
                            public void handleSuccess(APICallContext context) {
                                username = context.get(&amp;#34;username&amp;#34;).toString();
                                onMessagesReceived(
                                    Integer.parseInt(context.get(&amp;#34;count&amp;#34;).toString()),
                                    (JSONArray)context.get(&amp;#34;messageslist&amp;#34;));
                                onParticipantsReceived(
                                    (JSONArray)context.get(&amp;#34;users&amp;#34;));
                                onAfterEnter();
                            }

                        }, new APIErrorHandler() {

                            @Override
                            public void handleError(String errorText) {
                                Window.alert(&amp;#34;Error: &amp;#34; + errorText);
                            }

                        });

    }

    abstract void onParticipantsReceived(JSONArray participants);
    abstract void onMessagesReceived(int count, JSONArray messages);

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можно, конечно, использовать, отдельный контекст для цепочки, который заранее подготавливается. А можно, опять же, передавать &lt;code&gt;null&lt;/code&gt; :).&lt;/p&gt;

&lt;p&gt;Если вы предпочитаете не пользоваться вызовами &lt;code&gt;Arrays.asList&lt;/code&gt; используйте инстансы &lt;code&gt;LinkedList&lt;/code&gt; - помните, что важен порядок.&lt;/p&gt;

&lt;p&gt;Если необходимо известить о принятых объектах несколько целей, можно использовать механизм событий &lt;code&gt;GwtEvent&amp;lt;H&amp;gt;&lt;/code&gt; из самого GWT или паттерн шины событий.&lt;/p&gt;

&lt;p&gt;Что ж, на этом всё, спасибо за внимание. Прошу указывать на ошибки и возмущаться. если есть повод.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Только полезная информация в выводе JUnit при запуске из ant</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/ant-junit-one-liner-output-formatter/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/ant-junit-one-liner-output-formatter/</id>
                <updated>2010-04-08T00:46:00Z</updated>
                
                <summary type="html">При прогоне JUnit-тестов по таску из ant, в консоль выводится очень много не особо нужной, на мой взгляд, информации. Особенно любят переполнять консоль стэк-трэйсы. Я хотел найти форматтер, который выводил бы только методы которые прошли, методы которые упали и если какой-то упал - только пару строк из стэк-трейса, которые относятся к тестирующему классу.</summary>
                <content type="html">&lt;p&gt;При прогоне JUnit-тестов по таску из ant, в консоль выводится очень много не особо нужной, на мой взгляд, информации. Особенно любят переполнять консоль стэк-трэйсы. Я хотел найти форматтер, который выводил бы только методы которые прошли, методы которые упали и если какой-то упал - только пару строк из стэк-трейса, которые относятся к тестирующему классу.&lt;/p&gt;

&lt;p&gt;Например так:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[junit] ----------------------------------------------------------
[junit] Testsuite: com.undefined.MyTest
[junit] Ran [0.322] testMethodOne ... OK
[junit] Ran [0.023] testMethodOne... OK
[junit] Ran [0.333] testMethodTwo ... FAILED
[junit] Ran [0.343] testMethodThree ... FAILED
[junit]
[junit] Testcase: testMethodTwo(com.undefined.MyTest):  FAILED
[junit]     (AssertionFailedError): expected:&amp;lt;Bender&amp;gt; but was:&amp;lt;null&amp;gt;
[junit]     (MyTest) assertEqualsInfo: 887
[junit]     (MyTest) testGetUserInfoByUserId: 188
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И не нашёл ни одного такого.&lt;/p&gt;

&lt;p&gt;Так что написал свой.&lt;/p&gt;

&lt;p&gt;Вот ant-task для его вызова:&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
&amp;lt;target name=&amp;#34;easy-test&amp;#34; depends=&amp;#34;test-clean, compile&amp;#34;&amp;gt;
    &amp;lt;mkdir dir=&amp;#34;out/junit&amp;#34;/&amp;gt;

    &amp;lt;junit printsummary=&amp;#34;off&amp;#34; fork=&amp;#34;on&amp;#34;
           failureproperty=&amp;#34;test.failed&amp;#34; showoutput=&amp;#34;off&amp;#34; dir=&amp;#34;out&amp;#34;
           outputtoformatters=&amp;#34;false&amp;#34; filtertrace=&amp;#34;on&amp;#34; &amp;gt;

        &amp;lt;classpath&amp;gt;

            ....

        &amp;lt;/classpath&amp;gt;

        &amp;lt;formatter classname=&amp;#34;com.undefined.testing.OneLinerFormatter&amp;#34; usefile=&amp;#34;false&amp;#34; /&amp;gt;

        &amp;lt;batchtest fork=&amp;#34;on&amp;#34; todir=&amp;#34;out/junit&amp;#34; filtertrace=&amp;#34;on&amp;#34;&amp;gt;
            &amp;lt;fileset dir=&amp;#34;src/java/test&amp;#34;&amp;gt;
                &amp;lt;include name=&amp;#34;**/*Test.java&amp;#34;/&amp;gt;
            &amp;lt;/fileset&amp;gt;
        &amp;lt;/batchtest&amp;gt;

    &amp;lt;/junit&amp;gt;

    &amp;lt;fail if=&amp;#34;test.failed&amp;#34;&amp;gt;tests.failed=${test.failed}&amp;lt;/fail&amp;gt;

&amp;lt;/target&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И, собственно, код:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package com.undefined.testing;

import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.text.NumberFormat;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import junit.framework.AssertionFailedError;
import junit.framework.Test;

import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
import org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelper;

import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.util.StringUtils;

/**
 * Prints a single lines of tests to a specified Writer.
 * Inspired by the BriefJUnitResultFormatter and
 * XMLJUnitResultFormatter.
 *
 * @see FormatterElement
 * @see BriefJUnitResultFormatter
 * @see XMLJUnitResultFormatter
 */

public class OneLinerFormatter implements JUnitResultFormatter {

    private final String TAB_STR = &amp;#34;    &amp;#34;;

    private final boolean showCausesLines = true;
    // (\w+\.)+(\w+)\((\w+).(?:\w+):(\d+)\)
    private final Pattern traceLinePattern = Pattern.compile(&amp;#34;(\\w+\\.)+(\\w+)\\((\\w+).(?:\\w+):(\\d+)\\)&amp;#34;);

    /**
     * Where to write the log to.
     */
    private OutputStream out;

    /**
     * Used for writing the results.
     */
    private PrintWriter output;

    /**
     * Used as part of formatting the results.
     */
    private StringWriter results;

    /**
     * Used for writing formatted results to.
     */
    private PrintWriter resultWriter;

    /**
     * Formatter for timings.
     */
    private NumberFormat numberFormat = NumberFormat.getInstance();

    /**
     * Output suite has written to System.out
     */
    private String systemOutput = null;

    /**
     * Output suite has written to System.err
     */
    private String systemError = null;

    /**
     * tests that failed.
     */
    private Hashtable failedTests = new Hashtable();
    /**
     * Timing helper.
     */
    private Hashtable testStarts = new Hashtable();

    /**
     * Constructor for OneLinerFormatter.
     */
    public OneLinerFormatter() {
        results = new StringWriter();
        resultWriter = new PrintWriter(results);
    }

    /**
     * Sets the stream the formatter is supposed to write its results to.
     * @param out the output stream to write to
     */
    public void setOutput(OutputStream out) {
        this.out = out;
        output = new PrintWriter(out);
    }

    /**
     * @see JUnitResultFormatter#setSystemOutput(String)
     */
    public void setSystemOutput(String out) {
        systemOutput = out;
    }

    /**
     * @see JUnitResultFormatter#setSystemError(String)
     */
    public void setSystemError(String err) {
        systemError = err;
    }

    /**
     * The whole testsuite started.
     * @param suite the test suite
     */
    public void startTestSuite(JUnitTest suite) {
        if (output == null) {
            return; // Quick return - no output do nothing.
        }
        StringBuffer sb = new StringBuffer(StringUtils.LINE_SEP);
        sb.append(&amp;#34;----------------------------------------------------------&amp;#34;);
        sb.append(StringUtils.LINE_SEP);
        sb.append(&amp;#34;Testsuite: &amp;#34;);
        sb.append(suite.getName());
        sb.append(StringUtils.LINE_SEP);
        output.write(sb.toString());
        output.flush();
    }

    /**
     * The whole testsuite ended.
     * @param suite the test suite
     */
    public void endTestSuite(JUnitTest suite) {
        StringBuffer sb = new StringBuffer(&amp;#34;Tests run: &amp;#34;);
        sb.append(suite.runCount());
        sb.append(&amp;#34;, Failures: &amp;#34;);
        sb.append(suite.failureCount());
        sb.append(&amp;#34;, Errors: &amp;#34;);
        sb.append(suite.errorCount());
        sb.append(&amp;#34;, Time elapsed: &amp;#34;);
        sb.append(numberFormat.format(suite.getRunTime() / 1000.0));
        sb.append(&amp;#34; sec&amp;#34;);
        sb.append(StringUtils.LINE_SEP);
        sb.append(StringUtils.LINE_SEP);

        // append the err and output streams to the log
        if (systemOutput != null &amp;amp;&amp;amp; systemOutput.length() &amp;gt; 0) {
            sb.append(&amp;#34;------------- Standard Output ---------------&amp;#34;)
              .append(StringUtils.LINE_SEP)
              .append(systemOutput)
              .append(&amp;#34;------------- ---------------- ---------------&amp;#34;)
              .append(StringUtils.LINE_SEP);
        }

        if (systemError != null &amp;amp;&amp;amp; systemError.length() &amp;gt; 0) {
            sb.append(&amp;#34;------------- Standard Error -----------------&amp;#34;)
              .append(StringUtils.LINE_SEP)
              .append(systemError)
              .append(&amp;#34;------------- ---------------- ---------------&amp;#34;)
              .append(StringUtils.LINE_SEP);
        }

        if (output != null) {
            try {
                output.write(sb.toString());
                resultWriter.close();
                output.write(results.toString());
                output.flush();
            } finally {
                if (out != System.out &amp;amp;&amp;amp; out != System.err) {
                    FileUtils.close(out);
                }
            }
        }
    }

    /**
     * A test started.
     * @param test a test
     */
    public void startTest(Test test) {
        testStarts.put(test, new Long(System.currentTimeMillis()));
    }

    /**
     * A test ended.
     * @param test a test
     */
    public void endTest(Test test) {
        // Fix for bug #5637 - if a junit.extensions.TestSetup is
        // used and throws an exception during setUp then startTest
        // would never have been called
        if (!testStarts.containsKey(test)) {
            startTest(test);
        }

        boolean failed = failedTests.containsKey(test);

        Long l = (Long) testStarts.get(test);

        output.write(&amp;#34;Ran [&amp;#34;);
        output.write(((System.currentTimeMillis() - l.longValue()) / 1000.0) + &amp;#34;] &amp;#34;);
        output.write(getTestName(test) + &amp;#34; ... &amp;#34; + (failed ? &amp;#34;FAILED&amp;#34; : &amp;#34;OK&amp;#34;));
        output.write(StringUtils.LINE_SEP);
        output.flush();
    }

    /**
     * Interface TestListener for JUnit &amp;gt;= 3.4.
     *
     * &amp;lt;p&amp;gt;A Test failed.
     * @param test a test
     * @param t    the exception thrown by the test
     */
    public void addFailure(Test test, Throwable t) {
        formatError(&amp;#34;\tFAILED&amp;#34;, test, t);
    }

    /**
     * Interface TestListener for JUnit &amp;amp;gt; 3.4.
     *
     * &amp;lt;p&amp;gt;A Test failed.
     * @param test a test
     * @param t    the assertion failed by the test
     */
    public void addFailure(Test test, AssertionFailedError t) {
        addFailure(test, (Throwable) t);
    }

    /**
     * A test caused an error.
     * @param test  a test
     * @param error the error thrown by the test
     */
    public void addError(Test test, Throwable error) {
        formatError(&amp;#34;\tCaused an ERROR&amp;#34;, test, error);
    }

    /**
     * Get test name
     *
     * @param test a test
     * @return test name
     */
    protected String getTestName(Test test) {
        if (test == null) {
            return &amp;#34;null&amp;#34;;
        } else {
            return /* JUnitVersionHelper.getTestCaseClassName(test) + &amp;#34;: &amp;#34; + */
                      JUnitVersionHelper.getTestCaseName(test);
        }
    }

    /**
     * Get test case full class name
     *
     * @param test a test
     * @return test full class name
     */
    protected String getTestCaseClassName(Test test) {
        if (test == null) {
            return &amp;#34;null&amp;#34;;
        } else {
            return JUnitVersionHelper.getTestCaseClassName(test);
        }
    }

    /**
     * Format the test for printing..
     * @param test a test
     * @return the formatted testname
     */
    protected String formatTest(Test test) {
        if (test == null) {
            return &amp;#34;Null Test: &amp;#34;;
        } else {
            return &amp;#34;Testcase: &amp;#34; + test.toString() + &amp;#34;:&amp;#34;;
        }
    }

    /**
     * Format an error and print it.
     * @param type the type of error
     * @param test the test that failed
     * @param error the exception that the test threw
     */
    protected synchronized void formatError(String type, Test test,
                                            Throwable error) {
        if (test != null) {
            failedTests.put(test, test);
            endTest(test);
        }

        resultWriter.println(formatTest(test) + type);
        resultWriter.println(TAB_STR + &amp;#34;(&amp;#34; + error.getClass().getSimpleName() + &amp;#34;): &amp;#34; +
                    ((error.getMessage() != null) ? error.getMessage() : error));

        if (showCausesLines) {
            // resultWriter.append(StringUtils.LINE_SEP);
            resultWriter.println(filterErrorTrace(test, error));
        }

        resultWriter.println();

        /* String strace = JUnitTestRunner.getFilteredTrace(error);
           resultWriter.println(strace);
           resultWriter.println(); */
    }

    protected String filterErrorTrace(Test test, Throwable error) {
        String trace = StringUtils.getStackTrace(error);
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        StringReader sr = new StringReader(trace);
        BufferedReader br = new BufferedReader(sr);

        String line;
        try {
            while ((line = br.readLine()) != null) {
                if (line.indexOf(getTestCaseClassName(test)) != -1) {
                    Matcher matcher = traceLinePattern.matcher(line);
                    // pw.println(matcher + &amp;#34;: &amp;#34; + matcher.find());
                    if (matcher.find()) {
                        pw.print(TAB_STR);
                        pw.print(&amp;#34;(&amp;#34; + matcher.group(3) + &amp;#34;)&amp;#34;);
                        pw.print(matcher.group(2) + &amp;#34;: &amp;#34;);
                        pw.println(matcher.group(4));
                    } else {
                        pw.println(line);
                    }
                }
            }
        } catch (Exception e) {
            return trace; // return the trace unfiltered
        }

        return sw.toString();

    }

}

&lt;/code&gt;&lt;/pre&gt;</content>
            </entry>
        
            <entry>
                <title>Восстановление пароля в клиенте Psi (Python)</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/recovering-psi-password-python/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/recovering-psi-password-python/</id>
                <updated>2010-04-06T00:46:00Z</updated>
                
                <summary type="html">Часто требуется восстановить пароль от аккаунта в клиенте Psi. Для этого можно использовать любой язык программирования, см. &lt;a href=&#34;http://blogmal.42.org/rev-eng/psi-password.story&#34;&gt;статью&lt;/a&gt;.</summary>
                <content type="html">&lt;p&gt;Часто требуется восстановить пароль от аккаунта в клиенте Psi. Для этого можно использовать любой язык программирования, см. &lt;a href=&#34;http://blogmal.42.org/rev-eng/psi-password.story&#34;&gt;статью&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В случае выбора Python, надо (подставьте нужный номер в &lt;code&gt;/a&amp;lt;n&amp;gt;/&lt;/code&gt; если у вас несколько аккаунтов):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xpath -e &amp;#39;/accounts/accounts/a0/jid&amp;#39; ~/.psi/profiles/default/accounts.xml
$ xpath -e &amp;#39;/accounts/accounts/a0/password&amp;#39; ~/.psi/profiles/default/accounts.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Найденное сопоставить и записать, например: &lt;code&gt;user@jabber.server 000100020003007e&lt;/code&gt;, затем набросать питоновый скрипт:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim ./psi-recover.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вот такой:&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;
import sys
u,p=sys.argv[1:3]
print &amp;#34;&amp;#34;.join([chr(ord(u[x]) ^ eval(&amp;#34;0x%s&amp;#34;%(p[4*x:4*x + 4]))) for x in xrange(len(p)/4)])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И запустить с этими параметрами:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python ./psi-recover.py user@jabber.server 000100020003007e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s all&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Подготовка учебных документов в LaTeX</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/latex-study-works/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/latex-study-works/</id>
                <updated>2010-02-20T00:46:00Z</updated>
                
                <summary type="html">В этой статье я вкратце расскажу об общих способах при подготовке различных учебных документов в LaTeX, а конкретно - о подготовке титульной страницы, вставке векторных рисунков (схем), вставке таблиц и вставке графиков, создающихся на основе подготовленных данных, занесённых или даже вычисляемых в электронной таблице.</summary>
                <content type="html">&lt;p&gt;В этой статье я вкратце расскажу об общих способах при подготовке различных учебных документов в LaTeX, а конкретно - о подготовке титульной страницы, вставке векторных рисунков (схем), вставке таблиц и вставке графиков, создающихся на основе подготовленных данных, занесённых или даже вычисляемых в электронной таблице.&lt;/p&gt;

&lt;p&gt;Процесс будет рассматриваться со стороны Ubuntu/TeX Live, хотя всё рассказанное можно будет сделать и в Windows с использованием MikTeX и на Маке с использованием MacTeX. Также я затрону дополнительные open-source пакеты (версии которых, опять же, есть для всех операционных систем), которые помогут в процессе и опишу какие действия необходимо предпринять, чтобы получившийся в результате документ выглядел максимально близко к желаемому :). Это &lt;a href=&#34;http://www.inkscape.org&#34;&gt;Inkscape&lt;/a&gt;, &lt;a href=&#34;http://www.gnome.org/gnumeric&#34;&gt;Gnumeric&lt;/a&gt; и пакеты &lt;a href=&#34;http://pgfplots.sourceforge.net&#34;&gt;&lt;code&gt;pgfplots&lt;/code&gt;&lt;/a&gt; и &lt;a href=&#34;http://pgfplots.sourceforge.net&#34;&gt;&lt;code&gt;pgfplotstable&lt;/code&gt;&lt;/a&gt; для LaTex.&lt;/p&gt;

&lt;p&gt;Если вы в первый раз используете LaTeX, рекомендую стандартный &lt;a href=&#34;http://www.rpi.edu/dept/arc/docs/latex/latex-intro.pdf&#34;&gt;вводный документ&lt;/a&gt; &lt;em&gt;(англ., PDF)&lt;/em&gt; и небольшой &lt;a href=&#34;http://en.wikibooks.org/wiki/LaTeX/Formatting&#34;&gt;справочник по форматированию текста&lt;/a&gt; &lt;em&gt;(англ.)&lt;/em&gt;. В качестве документации к &lt;code&gt;pgfplots&lt;/code&gt; подойдёт официальная: &lt;a href=&#34;http://pgfplots.sourceforge.net/pgfplots.pdf&#34;&gt;&lt;code&gt;pgfplots&lt;/code&gt;&lt;/a&gt; &lt;em&gt;(англ., PDF)&lt;/em&gt;, &lt;a href=&#34;http://pgfplots.sourceforge.net/pgfplotstable.pdf&#34;&gt;pgplotstable&lt;/a&gt; &lt;em&gt;(англ., PDF)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;установка&#34;&gt;&lt;a href=&#34;#установка&#34; title=&#34;Установка&#34;&gt;Установка&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Устанавливаем LaTeX:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install tex-common texlive-base texlive-base-bin texlive-common \
texlive-doc-base texlive-fonts-recommended texlive-lang-cyrillic \
texlive-latex-base texlive-latex-recommended
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Создадим тестовый документ в любом редакторе (для &lt;code&gt;gedit&lt;/code&gt; вы можете установить &lt;code&gt;gedit-latex-plugin&lt;/code&gt;). Условимся, что наш основной документ будет называться &lt;code&gt;work_0001_2010.tex&lt;/code&gt;, а все относящиеся к нему файлы будут использовать это название + какой-либо постфикс:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ touch ./work_0001_2010.tex
$ gedit ./work_0001_2010.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вставим представленный тект в качестве содержимого, сохраним:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\documentclass[a4paper,12pt]{article}
\usepackage[T2A]{fontenc}
\usepackage[utf8]{inputenc} % любая желаемая кодировка
\usepackage[russian,english]{babel}
\usepackage[pdftex,unicode]{hyperref}
\usepackage{indentfirst} % включить отступ у первого абзаца

\title{Заголовок документа}
\author{Имя автора}
\date{02/2010}

\begin{document} % начало документа

\maketitle % заголовок

Тестовый документ, подготовленный в \LaTeX
\end{document} % конец документа

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Скомпилируем и посмотрим, что получилось:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pdflatex ./work_0001_2010.tex
$ evince ./work_0001_2010.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если всё было сделано правильно - перед нами готовый результат.&lt;/p&gt;
&lt;h3 id=&#34;титульная-страница&#34;&gt;&lt;a href=&#34;#титульная-страница&#34; title=&#34;Титульная страница&#34;&gt;Титульная страница&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Итак, генерируемая по умолчанию страница обычно не соответствует тому, что ожидают преподаватели или ученики. Я просто покажу шаблон и то, что должно из него получиться - результат больше похож на ожидания, но конечно, при желании или необходимости, вы можете изменить его как заблагорассудится.&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\begin{document} % начало документа

\begin{titlepage} % начало титульной страницы

\begin{center} % включить выравнивание по центру

\large Российский технический институт &amp;lt;&amp;lt;ACME-ТЕХ&amp;gt;&amp;gt;\\[4.5cm]
% название института, затем отступ 4,5см

\huge Теоретическая работа \No 5\\[0.6cm] % название работы, затем отступ 0,6см
\large по~теме &amp;lt;&amp;lt;Хабраобщество. Внутреннее и внешнее влияние&amp;gt;&amp;gt;\\[3.7cm]
% тема работы, затем отступ 3,7см

\begin{minipage}{0.5\textwidth} % начало маленькой врезки в половину ширины текста
\begin{flushleft} % выровнять её содержимое по левому краю
\emph{Автор:} Цокотуха~Флай\\
\emph{Группа:} 7822\\
\emph{Факультет:} МХХПХХ\\
\emph{Преподаватель:} Шаманова~Эллина~Канделябровна
\end{flushleft} % конец выравнивания по левому краю
\end{minipage} % конец врезки

\vfill % заполнить всё доступное ниже пространство

{\large \today} % вывести дату
{\large \LaTeX} % вывести логотип LaTeX

\end{center} % закончить выравнивание по центру

\thispagestyle{empty} % не нумеровать страницу
\end{titlepage} % конец титульной страницы

\tableofcontents % содержание

\section{Глава I}
\section{Глава II}
\section{Глава III}
\section{Глава IV}

Тестовый документ, подготовленный в \LaTeX
\end{document} % конец документа

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Содержание включено для примера и оно обновится в соотвествии с главами только при следующей компиляции - это правило для LaTeX. В результате всё это должно выглядеть так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_titlepage.png&#34; alt=&#34;Титульная страница&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;схемы&#34;&gt;&lt;a href=&#34;#схемы&#34; title=&#34;Схемы&#34;&gt;Схемы&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Есть много способов вставить изображение в LaTeX-документ, и вам подойдёт любой из них, но так как я обо всём рассказываю, то должен рассказать хотя бы об одном. Я подготавливаю схемы в &lt;a href=&#34;http://www.inkscape.org&#34;&gt;Inkscape&lt;/a&gt; (свободный векторный редактор), экспортирую их в PDF и затем вставляю в LaTeX-документ.&lt;/p&gt;

&lt;p&gt;Inkscape очень удобен для подготовки схем - у прямых линий (да и у фигур и кривых) можно установить с любых концов стрелки или сделать их пунктирными (Object -&amp;gt; Fill and Stroke -&amp;gt; Stroke Style), сектора можно делать ограничивая углы развёртки у круга, любую фигуру можно залить стандартными для таких схем кистями (хоть в полька-точечку (Object -&amp;gt; Fill and Stroke -&amp;gt; Fill Style -&amp;gt; Polka dots)), кривые удобно рисовать инструментом Кривая Безье и кроме всего прочего есть &amp;ldquo;примагничивание&amp;rdquo; (правда оно почему-то включается в свойствах документа (File -&amp;gt; Document Properties -&amp;gt; Snap)). Практически любой график или схему из методички/учебника можно перенести в векторный вид за полчаса.&lt;/p&gt;

&lt;p&gt;Итак, экспорт из Inkscape. Исходный файл, по принятому ранее соглашению, назовём &lt;code&gt;work_0001_2010_graph01.svg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;В меню File -&amp;gt; Save as&amp;hellip; выберем формат *.pdf:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_graph01_save.png&#34; alt=&#34;Сохранение в PDF&#34;&gt;&lt;/p&gt;

&lt;p&gt;И отметим конвертацию шрифтов в пути (в Stroke Style -&amp;gt; Width у надписей советую ставить значения 0.1-0.3, иначе надписи в pdf-файле получаются очень толстыми):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_graph01_pdf.png&#34; alt=&#34;Опции экспорта в PDF&#34;&gt;&lt;/p&gt;

&lt;p&gt;Теперь в шапку LaTeX-документа наряду с остальными пакетами нужно добавить пакет &lt;code&gt;graphicx&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\usepackage{graphicx}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;А в тело документа вставить новую картинку:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\newpage

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Картинка:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\begin{figure}
\centering
\includegraphics[width=0.9\textwidth]{work_0001_2010_graph01.pdf}
\caption{Преломление света}
\label{fig:graph01}
\end{figure}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Заново компилируем:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pdflatex ./work_0001_2010.tex
$ evince ./work_0001_2010.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И вот результат:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_graph01_inside.png&#34; alt=&#34;SVG-картинка в PDF&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;пакеты-pgf&#34;&gt;&lt;a href=&#34;#пакеты-pgf&#34; title=&#34;Пакеты pgf&#34;&gt;Пакеты pgf&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Пакет &lt;code&gt;pgfplotstable&lt;/code&gt; помогает  очень гибко настраивать/составлять таблицы и позволяет считывать таблицу из csv-файла при компиляции.&lt;/p&gt;

&lt;p&gt;Пакет &lt;code&gt;pgfplots&lt;/code&gt; позволяет строить практически любые цветные настраиваемые графики на основе таблиц.&lt;/p&gt;

&lt;p&gt;Установка пакетов на Windows/MikTex описана в &lt;a href=&#34;http://pgfplots.sourceforge.net/pgfplots.pdf&#34;&gt;документации&lt;/a&gt; &lt;em&gt;(англ., PDF)&lt;/em&gt; , в случае Ubuntu нужно сделать следующее:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo nano /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В конец файла добавить (заменять версию &lt;code&gt;lucid&lt;/code&gt; на вашу не нужно):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deb http://ppa.launchpad.net/johannes-reinhardt/ppa/ubuntu lucid main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Выполнить:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install pgfplots
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;таблицы&#34;&gt;&lt;a href=&#34;#таблицы&#34; title=&#34;Таблицы&#34;&gt;Таблицы&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Таблицы будем подготавливать в &lt;a href=&#34;http://www.gnome.org/gnumeric&#34;&gt;Gnumeric&lt;/a&gt;. Можно использовать любой табличный редактор, главное - гибкая возможность экспорта в текстовый вид.&lt;/p&gt;

&lt;p&gt;Создадим таблицу, в первых трёх столбцах которой будут различные значения, а в четвёртом столбце - среднее по этим трём значениям и сохраним её под именем &lt;code&gt;work_0001_2010_table01.gnumeric&lt;/code&gt; (кстати, gnumeric умеет сохранять таблицы в формате LaTeX, но мы намереваемся использовать пакет &lt;code&gt;pgfplotstable&lt;/code&gt;, поэтому не будем этого делать):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_table01_save.png&#34; alt=&#34;Сохранение gnumeric-таблицы&#34;&gt;&lt;/p&gt;

&lt;p&gt;Теперь необходимо экспортировать таблицу в текстовый файл. Важно заметить две вещи, первая: в текстовый файл импортируется только текущий лист (Sheet), вторая: для того, чтобы удобно работать со столбцами при использовании пакета &lt;code&gt;pgfplotstable&lt;/code&gt;, необходимо в первой строке таблицы указать короткие однословные названия (алиасы) для столбцов.&lt;/p&gt;

&lt;p&gt;Таблицу можно сохранить в CSV, но если вы используете русскую локаль в операционной системе, то дробные числа в таблице будут представлены с использованием запятой. Так что лучше сохраним файл в формате Text (configurable), а назовём его, для удобства, &lt;code&gt;work_0001_2010_table01.dat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_table01_savecsv.png&#34; alt=&#34;Сохранение таблицы в CSV&#34;&gt;&lt;/p&gt;

&lt;p&gt;После этого вас спросят о дополнительных настройках - символ конца строки установите в соответствии с вашей операционной системой, разделитель - &amp;ldquo;пробел&amp;rdquo; и отключите кавычки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_table01_export.png&#34; alt=&#34;Параметры экспорта для CSV&#34;&gt;&lt;/p&gt;

&lt;p&gt;В результате должен получиться такой файл:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a b c mid
0.09 0.07 0.072 0.0773333333333333
0.15 0.073 0.073 0.0986666666666667
0.155 0.074 0.8 0.343
0.156 0.078 0.9 0.378
0.17 0.079 0.99 0.413
0.18 0.08 0.1 0.12
0.189 0.09 0.12 0.133
0.192 0.1 0.14 0.144
0.195 0.12 0.153 0.156
0.2 0.128 0.16 0.162666666666667

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь можно вставить таблицу в LaTeX-документ. Добавьте в заголовок:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\usepackage{pgfplotstable}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь, в теле документа, настроим вывод у пакета pgf (запятые в качестве дробных разделитей, округление до шести знаков) и загрузим файл с данными, привязав его к алиасу &lt;code&gt;midvalues&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\pgfkeys{/pgf/number format/.cd,precision=6,use comma,fixed,1000 sep={}}

\pgfplotstableread{work_0001_2010_table01.dat}\midvalues

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь опишем саму таблицу:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\newpage

Таблица

\begin{table}[h]
\centering
\caption{Средние числа}
\pgfplotstabletypeset[
    columns={a,b,c,mid},  % алиасы колонок, определённые в первой строке таблицы
    columns/a/.style={ column name=Значение $a$ }, % стиль столбца: определяем только заголовок
    columns/b/.style={ column name=Значение $b$ }, % стиль столбца: определяем только заголовок
    columns/c/.style={ column name=Значение $c$ }, % стиль столбца: определяем только заголовок
    columns/mid/.style={ column name=Среднее значение }, % стиль столбца: определяем только заголовок
    every head row/.style={ before row=\hline, after row=\hline\hline }, % одиночная линия над и двойная линия под первой строкой таблицы
    every last row/.style={ after row=\hline }, % одиночная линия под последней строкой таблицы
    every first column/.style={
        column type/.add={|}{} % вертикальная линия перед первым столбцом
    },
    every last column/.style={
        column type/.add={|}{|} % вертикальные линии с обоих сторон последнего столбца
    }
]\midvalues \\[0.5cm]
\label{tab:midvalues}
\end{table}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Снова перекомпилируем файл, и вот результат:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_table01_rendered.png&#34; alt=&#34;Как выглядит таблица&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;графики&#34;&gt;&lt;a href=&#34;#графики&#34; title=&#34;Графики&#34;&gt;Графики&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;В завершение построим график по данной таблице.&lt;/p&gt;

&lt;p&gt;Добавьте в заголовок документа:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\usepackage{pgfplots}
\pgfplotsset{compat=newest} % использовать новые возможности pgfplots

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И, в тело документа:&lt;/p&gt;
&lt;pre lang=&#34;latex&#34;&gt;&lt;code&gt;
\newpage

\begin{tikzpicture}
    \begin{axis}[ % начать график
        xlabel=Измерение, % метка для оси x
        ylabel=Значение, % метка для оси y
        xtick align=center, % риски оси x внутри графика
        yminorgrids, ymajorgrids, % линии для основных и второстепенных значений по оси y
        xmajorgrids, % линии для основных значений по оси x
        minor y tick num=4, % 4 второстепенных риски между каждыми основными рисками по оси y
        legend style={at={(0.74,0.74)}, anchor=south west} % позиционирование легенды относительно нижнего левого угла
    ],
    \addplot[green!40!black,mark=x] table[y=a] from \midvalues; % тёмно-зелёным отметить данные из столбца &amp;#39;a&amp;#39; таблицы midvalues на оси
    \addlegendentry{$a$ (таб. \ref{tab:midvalues})} % добавить линию на легенду
    \addplot[red!60!black,mark=x] table[y=b] from \midvalues; % тёмно-красным отметить данные из столбца &amp;#39;b&amp;#39; таблицы midvalues на оси
    \addlegendentry{$b$ (таб. \ref{tab:midvalues})} % добавить линию на легенду
    \addplot[yellow!80!black,mark=x] table[y=c] from \midvalues; % тёмно-жёлтым отметить данные из столбца &amp;#39;c&amp;#39; таблицы midvalues на оси
    \addlegendentry{$c$ (таб. \ref{tab:midvalues})} % добавить линию на легенду
    \addplot[blue!80!black,mark=o,smooth] table[y=mid] from \midvalues; % тёмно-синим сглаженной линией отметить данные из столбца &amp;#39;mid&amp;#39; таблицы midvalues на оси
    \addlegendentry{Среднее (таб. \ref{tab:midvalues})}  % добавить линию на легенду
    \end{axis}
\end{tikzpicture}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Мы указываем только значения для оси y и pgf автоматически подбирает значения на оси x, но в команде &lt;code&gt;addplot&lt;/code&gt; также можно указать и столбец-источник для оси x: &lt;code&gt;table[x=mid,y=b]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Снова перекомпиляция, и теперь мы видим отличный график-за-пять-минут по нашим значениям (значения я подбирал наугад, поэтому выглядят они не очень удачно (чуть лучше на графике с логарифмическими осями, однако задание сделать его таковым я лучше оставлю вам на дом), но надеюсь суть понятна).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/latex-study-works/latex_habr_plot01_rendered.png&#34; alt=&#34;Как выглядит график&#34;&gt;&lt;/p&gt;

&lt;p&gt;Я привёл лишь простейший пример, но пакет &lt;code&gt;pgfplots&lt;/code&gt; обладает настолько широкими возможностями, что если вы заинтересованы в данной теме, то вы просто обязаны хотя бы очень подробно рассмотреть всё &lt;a href=&#34;http://pgfplots.sourceforge.net/pgfplots.pdf&#34;&gt;руководство по пакету&lt;/a&gt; &lt;em&gt;(англ., PDF)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;заключение&#34;&gt;&lt;a href=&#34;#заключение&#34; title=&#34;Заключение&#34;&gt;Заключение&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Итак, LaTeX и &lt;code&gt;pgfplots&lt;/code&gt; - удобный способ оформлять не только текстовые документы с формулами, но и целые работы со схемами, графиками и таблицами. Причём делать их просто и удобно. Желаю вам большого количества полезных и легко созданных научных работ!&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>10 полезных решений для разработчика под Android</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/10-useful-solutions-for-android-developer/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/10-useful-solutions-for-android-developer/</id>
                <updated>2010-01-05T00:46:00Z</updated>
                
                
                <content type="html">&lt;h3 id=&#34;содержание&#34;&gt;&lt;a href=&#34;#содержание&#34; title=&#34;Содержание&#34;&gt;Содержание&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Вступление&lt;/li&gt;
&lt;li&gt;Про адаптеры списков (&lt;code&gt;ListView&lt;/code&gt;) с подразделами (для группировки элементов в списках)&lt;/li&gt;
&lt;li&gt;Про списки, содержащие какие-либо действия (элементы списка выполняют что-либо сложное или изменяют себя при выборе)&lt;/li&gt;
&lt;li&gt;Про принудительную инвалидацию видов в списках&lt;/li&gt;
&lt;li&gt;Про кэширование изображений для &lt;code&gt;ListView&lt;/code&gt; (для списков с изображениями)&lt;/li&gt;
&lt;li&gt;Про адаптеры, итерирующиеся по курсорам (для поддержки постраничного вывода в списках)&lt;/li&gt;
&lt;li&gt;Про авторизацию через OAuth на Android&lt;/li&gt;
&lt;li&gt;Про использование &lt;code&gt;MediaPlayer&lt;/code&gt; и буфферринг видео полученного по HTTP&lt;/li&gt;
&lt;li&gt;Про очереди из нескольких &lt;code&gt;AsyncTask&lt;/code&gt; (для поочерёдного выполнения фоновых задач)&lt;/li&gt;
&lt;li&gt;Про изменение подсветки выбранного элемента в &lt;code&gt;ListView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Про добавление &lt;a href=&#34;http://www.londatiga.net/it/how-to-create-quickaction-dialog-in-android/&#34;&gt;QuickActions&lt;/a&gt; в проект&lt;/li&gt;
&lt;li&gt;Ещё три маленьких решения&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1.-вступление&#34;&gt;&lt;a href=&#34;#1.-вступление&#34; title=&#34;1. Вступление&#34;&gt;1. Вступление&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Летом прошлого (уже) года я загорелся желанием написать Android-клиент для веб-сервиса &lt;a href=&#34;http://vimeo.com&#34;&gt;vimeo&lt;/a&gt;. Мне нравится этот сервис, и как по мне, было бы удобно следить за обновлениями в подписках на видео с коммуникатора.&lt;/p&gt;

&lt;p&gt;Я задумывал &lt;a href=&#34;http://code.google.com/p/vimeoid&#34;&gt;этот проект&lt;/a&gt; для себя как учебный (в смысле, что учусь я), однако в результате получилось сделать вполне ощутимую часть (можно посмотреть &lt;a href=&#34;http://code.google.com/p/vimeoid/wiki/Screenshots&#34;&gt;скриншоты того, что готово&lt;/a&gt;), однако он пока что не закончен. Такой клиент делаю не я один, &lt;a href=&#34;http://www.androlib.com/android.application.com-makotosan-vimeodroid-qmBCn.aspx&#34;&gt;свою версию&lt;/a&gt; практически одновременно (он был первым) со мной начал делать &lt;a href=&#34;http://vimeo.com/makotosan&#34;&gt;makotosan&lt;/a&gt; и его версия пока что, похоже, тоже ещё делается).&lt;/p&gt;

&lt;p&gt;В любом случае, в процессе написания проекта я получил некоторую базу знаний, которой и спешу поделиться. Не все темы экслюзивны, но некоторые рассматриваемые тонкости не раскрыты в интернете или закопаны довольно глубоко в его недрах. &lt;em&gt;Я буду дополнительно приводить примеры из искходных кодов vimeoid, это позволит вам подcмотреть как рассматриваемая тема работает в реальном времени&lt;/em&gt; (&lt;em&gt;NB&lt;/em&gt;: некоторые ссылки ведут на конкретные строки в коде).&lt;/p&gt;
&lt;h3 id=&#34;2.-списки-с-подразделами&#34;&gt;&lt;a href=&#34;#2.-списки-с-подразделами&#34; title=&#34;2. Списки с подразделами&#34;&gt;2. Списки с подразделами&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Кроме обычного использования &lt;code&gt;ListView&lt;/code&gt;, часто требуется сделать список, в котором элементы сгруппированы по нескольким разделам в таком виде: заголовок раздела, пункт, пункт, пункт, &amp;hellip;, заголовок раздела, пункт, пункт, &amp;hellip;, заголовок раздела, пункт, пункт, &amp;hellip; и т.д. На картинке это разделы &amp;ldquo;Statistics&amp;rdquo; и &amp;ldquo;Information&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;(здесь и далее я буду использовать слово &lt;em&gt;пункт&lt;/em&gt; как аналог английскому &lt;em&gt;item&lt;/em&gt;, чтобы отличать элемент списка, который может быть и заголовком раздела и пунктом, от пункта, обычного элемента, который не может быть заголовком)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/guest-channel.png&#34; alt=&#34;Список с разделами&#34;&gt;&lt;/p&gt;

&lt;p&gt;Заголовки не должны реагировать на нажатия и выбор и должны иметь собственный вид. Этого можно достичь, переопределив кроме &lt;code&gt;getView&lt;/code&gt; методы &lt;code&gt;getItemViewType&lt;/code&gt;, &lt;code&gt;getViewTypeCount&lt;/code&gt; и &lt;code&gt;isEnabled&lt;/code&gt; адаптера этого списка и отнаследовав его, например, от &lt;code&gt;BaseAdapter&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class SectionedItemsAdapter extends BaseAdapter { . . .

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Пример из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/SectionedActionsAdapter.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;SectionedActionsAdapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Прежде всего заводятся константы, которые однозначно идентифицируют тип элемента, одна для заголовка, вторая для пункта (то есть типов может быть и больше двух, однако в таком случае лучше использовать &lt;code&gt;enum&lt;/code&gt; с набором идентификаторов):&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public static final int ITEM_VIEW_TYPE = 0; \\ пункт
public static final int SECTION_VIEW_TYPE = 1; \\ раздел

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Потом константа, содержащая количество типов элементов (в нашем случае - два):&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public static final int VIEW_TYPES_COUNT = SECTION_VIEW_TYPE + 1;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Адаптер будет содержать в себе информацию обо всех элементах, поэтому реализации &lt;code&gt;getCount&lt;/code&gt;, &lt;code&gt;getItem&lt;/code&gt; и &lt;code&gt;getItemId&lt;/code&gt; зависят от вашей ситуации.&lt;/p&gt;

&lt;p&gt;Метод &lt;code&gt;getItemViewType&lt;/code&gt; должен возвращать константу соответствующую типу элемента по его позиции. Для неопределённого типа элемента в классе &lt;code&gt;Adapter&lt;/code&gt; существует константа &lt;code&gt;IGNORE_ITEM_VIEW_TYPE&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public int getItemViewType(int position) {
    if (. . .) return ITEM_VIEW_TYPE;
    if (. . .) return SECTION_VIEW_TYPE;
    return IGNORE_ITEM_VIEW_TYPE;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В моём случае я храню в адаптере список разделов, в которых содержатся им принадлежащие пункты. Таким образом у каждого раздела можно спросить сколько внутри него пунктов и засчёт этого узнать необходимый тип.&lt;/p&gt;

&lt;p&gt;Этот метод теперь можно использовать в переопределении &lt;code&gt;getView&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public View getView(int position, View convertView, ViewGroup parent) {
      final int viewType = getItemViewType(position);
      if (viewType == IGNORE_ITEM_VIEW_TYPE) throw new IllegalStateException(&amp;#34;Failed to get object at position &amp;#34; + position);
      if (viewType == SECTION_VIEW_TYPE) {
          convertView = . . . // здесь можно через LayoutInflater получить Layout для заголовка раздела
      } else if (viewType == ITEM_VIEW_TYPE) {
          convertView = . . . // здесь можно через LayoutInflater получить Layout для пункта
      }
      return convertView;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Метод &lt;code&gt;isEnabled&lt;/code&gt; должен возвращать &lt;code&gt;false&lt;/code&gt; для элементов, на которые нельзя нажимать и на которые нельзя переходить курсором и &lt;code&gt;true&lt;/code&gt; для остальных. Здесь снова поможет &lt;code&gt;getItemViewType&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public boolean isEnabled(int position) {
    return getItemViewType(position) != SECTION_VIEW_TYPE };

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Метод &lt;code&gt;getViewTypeCount&lt;/code&gt; возвращает ту самую константу, количество возможных типов элементов:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public int getViewTypeCount() { return VIEW_TYPES_COUNT; }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кстати, можно хранить ссылку на &lt;code&gt;LayoutInflater&lt;/code&gt; в самом адаптере, а получать её от создавшей его активити через конструктор.&lt;/p&gt;

&lt;p&gt;Это всё необходимое для реализации списка с разделами, если нужно - поглядывайте в пример, но прежде дам несколько пояснений.&lt;/p&gt;

&lt;p&gt;В примере я использую структуры для хранения данных о разделах и пунктах. В структуре раздела хранится идентификатор раздела, его заголовок и структуры пунктов, содержащихся в нём. Структура пункта хранит указатель на родительскую структуру раздела, заголовок пункта, путь к иконке и обработчик нажатия на пункт (о нём в следующей главе). Конструкторы обоих структур доступны только в адаптерах:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Пример из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/LActionItem.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;LActionItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Таким образом я упростил добавление групп и пунктов в список. Адаптер имеет методы:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public int addSection(String title);
public LActionItem addItem(int section, int icon, String title);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Метод &lt;code&gt;addSection&lt;/code&gt; возвращает идентификатор группы, который затем можно использовать для добавления пунктов в эту группу:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
final int suitsSection = adapter.addSection(&amp;#34;Suits&amp;#34;);
adapter.addItem(suitsSection, R.drawable.heart, &amp;#34;Hearts&amp;#34;);
adapter.addItem(suitsSection, R.drawable.diamond, &amp;#34;Diamonds&amp;#34;);
adapter.addItem(suitsSection, R.drawable.spade, &amp;#34;Spades&amp;#34;);
adapter.addItem(suitsSection, R.drawable.cross, &amp;#34;Crosses&amp;#34;);
final int figuresSection = adapter.addSection(&amp;#34;Figures&amp;#34;);
adapter.addItem(figuresSection, R.drawable.king, &amp;#34;King&amp;#34;);
adapter.addItem(figuresSection, R.drawable.queen, &amp;#34;Queen&amp;#34;);
. . .

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3.-списки-с-реагирующими-элементами&#34;&gt;&lt;a href=&#34;#3.-списки-с-реагирующими-элементами&#34; title=&#34;3. Списки с реагирующими элементами&#34;&gt;3. Списки с реагирующими элементами&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Иногда нужно, чтобы при нажатии на элементе списка он изменил своё состояние и/или перешёл на другую активити. Например, элемент &amp;ldquo;зафолловить&amp;rdquo; в списке с действиями над аккаунтом в твиттере может содержать иконку с минусом, если вы ещё не фолловили этого человека и менять иконку на плюс после нажатия и пришедшего подтверждения о фолловинге. Можно обрабатывать выбранный элемент в текущей &lt;code&gt;ListActivity&lt;/code&gt; и в зависимости от позиции предпринимать решение, но если список содержится где-то внутри обычной &lt;code&gt;Activity&lt;/code&gt;, то возможно легче обрабатывать выбор в адаптере.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Пример из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/SectionedActionsAdapter.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;SectionedActionsAdapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Использует: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/LActionItem.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;LActionItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Используется в: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/base/SingleItemActivity_.java?r=85e18485bdda1c526141170f67e65f4e00202f34#49&#34;&gt;&lt;code&gt;SingleItemActivity_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Если вы согласны с этим, ваш адаптер может имплементировать интерфейс &lt;code&gt;OnItemClickListener&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class ActionsAdapter extends . . . implements OnItemClickListener

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;А в использующей его активити можно сделать:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
final ListView actionsList = (ListView)findViewById(R.id.actionsList);
final SectionedActionsAdapter actionsAdapter = new ActionsAdapter(. . .);
. . . // заполнить адаптер значениями
actionsList.setAdapter(actionsAdapter);
actionsList.setOnItemClickListener(actionsAdapter);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В моём случае за пункты в каждом разделе выступают какие-то действия - переходы на активити либо изменения вида пункта после запроса к серверу. Поэтому я предпочёл сделать структуры с публично доступными свойствами для разделов и пунктов, при этом структуры пунктов содержат обработчик &lt;code&gt;OnClick&lt;/code&gt; который принимает &lt;code&gt;View&lt;/code&gt; на котором произошёл выбор, поэтому можно изменять &lt;code&gt;View&lt;/code&gt; прямо из них. Благодаря этому в адаптере можно просто передать действие обработчику:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public void onItemClick(AdapterView&amp;lt;?&amp;gt; parent, View view, int position, long id) {
    final LActionItem item = (LActionItem) getItem(position);
    if (item.onClick != null) item.onClick(view);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Используя описанный выше метод &lt;code&gt;addItem&lt;/code&gt; можно устанавливать обработчик:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
final LActionItem heartsItem = adapter.addItem(suitsSection, R.drawable.heart, &amp;#34;Hearts&amp;#34;);
heartsItem.onClick = new OnClickListener() { public void onClick(View view) { . . . } };

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4.-принудительная-инвалидация-видов-в-списках&#34;&gt;&lt;a href=&#34;#4.-принудительная-инвалидация-видов-в-списках&#34; title=&#34;4. Принудительная инвалидация видов в списках&#34;&gt;4. Принудительная инвалидация видов в списках&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt; в Android, как известно, устроены с небольшой хитростью, эта хитрость - &lt;a href=&#34;http://android.amberfog.com/?p=296&#34;&gt;&lt;em&gt;ListView Recycler&lt;/em&gt;&lt;/a&gt;. Приницип &lt;em&gt;Recycler&lt;/em&gt;&amp;#39;а, если кратко, состоит в том, что если в списке элементов больше, чем вмещается на экран, при прокручивании списка виды новых элементы не создаются, а переиспользуются виды старых - на этом приниципе работают имплементации &lt;code&gt;getView&lt;/code&gt; в адаптерах.&lt;/p&gt;

&lt;p&gt;Если в какой-то момент требуется обновить (инвалидировать) конкретный известный вид элемента (или даже его дочерний вид) списка в то время, когда он видим на экране, можно вызвать &lt;code&gt;ListView.invalidate()&lt;/code&gt; или &lt;code&gt;Adapter.notifyDataSetChanged()&lt;/code&gt;, но иногда эти методы нерационально обновляют и соседние виды, а то и вообще все видимые (особенно если layout &lt;a href=&#34;http://www.curious-creature.org/2009/02/22/android-layout-tricks-1/&#34;&gt;построен неправильно&lt;/a&gt;). Есть способ получить текущий вид элемента списка используя метод &lt;code&gt;ListView.getChildAt(position)&lt;/code&gt;. Однако &lt;code&gt;position&lt;/code&gt; в данном случае это не индекс элемента в списке, как можно было бы ожидать, а индекс относительно видимых на экране видов. Поэтому полезными будут такие методы:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public static View getItemViewIfVisible(AdapterView&amp;lt;?&amp;gt; holder, int itemPos) {
      int firstPosition = holder.getFirstVisiblePosition();
      int wantedChild = itemPos - firstPosition;
      if (wantedChild &amp;lt; 0 || wantedChild &amp;gt;= holder.getChildCount()) return null;
     return holder.getChildAt(wantedChild);
}

public static void invalidateByPos(AdapterView&amp;lt;?&amp;gt; parent, int position) {
    final View itemView = getItemViewIfVisible(parent, position);
    if (itemView != null) itemView.invalidate();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;invalidateByPos&lt;/code&gt; обновляет вид только если он видим на экране (насильно вызывая &lt;code&gt;getView&lt;/code&gt; адаптера), а если элемент не видим - &lt;code&gt;getView&lt;/code&gt; адаптера будет вызван автоматически когда этот вид появится в области видимости при прокрутке списка. Чтобы обновить некий дочерний вид элемента, вы можете использовать метод &lt;code&gt;getViewIsVisible&lt;/code&gt;, он вернёт вид элемента из которого можно получить доступ к его дочерним видам и &lt;code&gt;null&lt;/code&gt;, если вид не видим пользователю и в обновлении нет необходимости.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Методы описаны в классе: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/util/Utils.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Utils&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5.-про-кэширование-изображений-для-списков&#34;&gt;&lt;a href=&#34;#5.-про-кэширование-изображений-для-списков&#34; title=&#34;5. Про кэширование изображений для списков&#34;&gt;5. Про кэширование изображений для списков&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/guest-videos.png&#34; alt=&#34;Список с картинками&#34;&gt;&lt;/p&gt;

&lt;p&gt;Если вы создаёте список &lt;code&gt;ListView&lt;/code&gt;, содержащий изображения загружаемые из сети, эта глава для вас. Неразумно бы было при каждом вызове &lt;code&gt;getView&lt;/code&gt; в адаптере получать изображения по URL заново - естественно лучше бы было их а) кэшировать б) запрашивать только тогда, когда вид с изображением видим пользователю. На данный момент эта задача так часто вставала перед программистами на Android, что уже существует &lt;a href=&#34;http://stackoverflow.com/questions/541966/android-how-do-i-do-a-lazy-load-of-images-in-listview&#34;&gt;множество её решений&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Мой вариант оттуда же, это решение &lt;a href=&#34;http://stackoverflow.com/questions/541966/android-how-do-i-do-a-lazy-load-of-images-in-listview/3068012#3068012&#34;&gt;Фёдора Власова&lt;/a&gt;, исправленное под мои нужды. Во-первых, я сделал каталог для хранения кэшированных изображений статическим - то есть он создаётся единожды за время жизни приложения и стабильно очищается при вызове &lt;code&gt;clearCache&lt;/code&gt; (этот метод полезно вызывать в &lt;code&gt;onDestroy()&lt;/code&gt; у активити, использующей &lt;code&gt;ImageLoader&lt;/code&gt; или в &lt;code&gt;finalize()&lt;/code&gt; у использующего его адаптера), немного изменил способ создания этого каталога (см. &lt;code&gt;Utils.createCacheDir()&lt;/code&gt;). Во-вторых, в конструктор можно передать идентификаторы изображений, которые будут показаны на месте картинки в процессе её загрузки и/или если загрузить её не удалось. В-третьих ещё пара мелких изменений. Вообще, этот класс можно было бы и сделать синглтоном, изменяя настройки перед использованием, но это уже на ваше усмотрение. В моём случае по одному его экземпляру создаётся для каждой запущенной &lt;code&gt;ListActivity&lt;/code&gt; и передаётся адаптерам каждого нуждающегося &lt;code&gt;ListView&lt;/code&gt; (или создаётся в самих адаптерах, если &lt;code&gt;ListView&lt;/code&gt; находится внутри обычной &lt;code&gt;Activity&lt;/code&gt;). Основной метод - &lt;code&gt;displayImage(String url, ImageView view)&lt;/code&gt;, его определение говорит само за себя.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Исходник из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/com/fedorvlasov/lazylist/ImageLoader.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ImageLoader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Использует методы из: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/util/Utils.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Utils&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6.-адаптеры-итерирующиеся-по-курсорам&#34;&gt;&lt;a href=&#34;#6.-адаптеры-итерирующиеся-по-курсорам&#34; title=&#34;6. Адаптеры, итерирующиеся по курсорам&#34;&gt;6. Адаптеры, итерирующиеся по курсорам&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Эта глава касается постраничного вывода в &lt;code&gt;ListView&lt;/code&gt;. То есть, пользователь видит первые &lt;code&gt;n&lt;/code&gt; элементов, прокручивает список до &lt;code&gt;n&lt;/code&gt;-ного элемента и только после этого выполняется запрос на следующие &lt;code&gt;n&lt;/code&gt; элементов к базе данных или к серверу. Затем пользователь пролистывает список до элемента &lt;code&gt;2n&lt;/code&gt; и мы запрашиваем следующую пачку размером &lt;code&gt;n&lt;/code&gt; и т.д. В &lt;em&gt;vimeoid&lt;/em&gt; я делаю следующий запрос при клике по &lt;code&gt;footerView&lt;/code&gt; с надписью &amp;ldquo;Загрузить ещё&amp;hellip;&amp;rdquo; у списка: не автоматически, но техника примерно та же.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Загрузка по клику на &lt;code&gt;footerView&lt;/code&gt;: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/base/ItemsListActivity_.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ItemsListActivity_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Реализация для гостя: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/guest/ItemsListActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ItemsListActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Реализация для зарегистрированного пользователя: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/ItemsListActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ItemsListActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Здесь более сложная иерархия классов, загрузка каждой страницы осуществляется через специальный &lt;code&gt;AsyncTask&lt;/code&gt;, который после фонового вызова Vimeo API сообщает вызвавшему активити, остались ли ещё элементы и не последняя ли это страница, а активити обновляет свои виды в соответствии с этими данными.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Адаптер, содержащий набор курсоров: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/adapter/EasyCursorsAdapter.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;EasyCursorsAdapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для того, чтобы обеспечить постраничный вывод, можно просто хранить список из контейнеров для страниц (например, курсоров) в адаптере, а в &lt;code&gt;getView()&lt;/code&gt;, если запрошен один из последних элементов, запускать запрос на следующую страницу (предпочтительно - &lt;code&gt;AsyncTask&lt;/code&gt;), который при получении нового контейнера добавит его в адаптер и адаптер сможет вызвать &lt;code&gt;notifyDataSetChanged()&lt;/code&gt;. Примерно так:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
private final Page[] pages = new Page[MAX_PAGES_COUNT];

public View getView(final int position, View convertView, ViewGroup parent) {

    if (!waitingNextPage &amp;amp;&amp;amp;
        (pages.length &amp;lt; MAX_PAGES_COUNT) &amp;amp;&amp;amp;
        (position &amp;gt;= ((pages.length * PER_PAGE) - 2))) {

        final AsyncTask&amp;lt;Integer, . . .&amp;gt; nextPageTask = . . .;
        nextPageTask.execute(pages.length);
        // nextPageTask вызывает addSource, когда получает новую страницу

        waitingNextPage = true;
    }

    . . .

}

public void addSource(Page page) {
    if (pages.length &amp;gt;= MAX_PAGES_COUNT) return;
    pages[pages.length] = page;
    waitingNextPage = false;
    notifyDataSetChanged();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;EasyCursorsAdapter&lt;/code&gt; - хороший пример, где в качестве аналога &lt;code&gt;Page&lt;/code&gt; выступает &lt;code&gt;Cursor&lt;/code&gt;. Наверняка есть и альтернативные решения, буду рад если их упомянут в комментариях.&lt;/p&gt;
&lt;h3 id=&#34;7.-авторизация-через-oauth-на-android&#34;&gt;&lt;a href=&#34;#7.-авторизация-через-oauth-на-android&#34; title=&#34;7. Авторизация через OAuth на Android&#34;&gt;7. Авторизация через OAuth на Android&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Если вы пишете клиент для какого-либо сложного веб-сервиса - вы сталкиваетесь с проблемой авторизации, в подавляющем количестве веб-сервисов для её реализации ныне используется &lt;a href=&#34;http://en.wikipedia.org/wiki/OAuth&#34;&gt;OAuth&lt;/a&gt; и Vimeo как раз из числа таких.&lt;/p&gt;

&lt;p&gt;Не стоит писать реализацию самому, это несколько неблагодарное дело, благо уже есть отличная библиотека &lt;a href=&#34;http://code.google.com/p/oauth-signpost/&#34;&gt;signpost&lt;/a&gt; и лучших альтернатив, насколько я знаю, пока нет.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Пример из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/connection/VimeoApi.java?r=85e18485bdda1c526141170f67e65f4e00202f34#101&#34;&gt;&lt;code&gt;VimeoApi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Использует signpost через: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/connection/JsonOverHttp.java?r=85e18485bdda1c526141170f67e65f4e00202f34#164&#34;&gt;&lt;code&gt;JsonOverHttp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Активити, которое получает токен пользователя: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/ReceiveCredentials.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ReceiveCredentials&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Его описание в манифесте: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/AndroidManifest.xml?r=85e18485bdda1c526141170f67e65f4e00202f34#22&#34;&gt;&lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для начала нужно получить уникальный ключ для вашего приложения от веб-сервиса и указать веб-сервису URL, на который будет возвращатся пользователя при успешной авторизации (напр., &lt;code&gt;vimeoid://oauth.done&lt;/code&gt;) (но в случае Android его передают при запросе к &lt;code&gt;/request_token&lt;/code&gt;). Обычно это делается через веб-интерфейс самого сервиса.&lt;/p&gt;

&lt;p&gt;Алгоритм первой авторизации на Android следующий:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Указать signpost где у сервиса находятся точки входа в OAuth&lt;/li&gt;
&lt;li&gt;Запросом к &lt;code&gt;/request_token&lt;/code&gt; получить пару токен/секрет приложения для неавторизированных запросов по этому ключу (колбэк-URL &lt;code&gt;vimeoid://oauth.done&lt;/code&gt; передают здесь): &lt;code&gt;provider.retrieveRequestToken(Uri callbackUri)&lt;/code&gt;. &lt;em&gt;NB:&lt;/em&gt; &lt;code&gt;retrieveRequestToken&lt;/code&gt; возвращает не токен, а сразу &lt;code&gt;Uri&lt;/code&gt;, тот самый &lt;code&gt;authUri&lt;/code&gt; по которому надо обратиться в следующем пункте&lt;/li&gt;
&lt;li&gt;Запустить активити браузера, обратиться к &lt;code&gt;/authorize&lt;/code&gt;, передав токен приложения и, если необходимо, добавив дополнительные параметры о необходимых правах: &lt;code&gt;startActivity(new Intent(Intent.ACTION_VIEW, authUri + ...))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Пользователь увидит страницу в стиле &amp;ldquo;Разрешить этому приложению доступ к вашему аккаунту?&amp;rdquo; (если он разлогинен в сервисе, ему предложат залогиниться). Если он разрешает доступ, браузер перенаправляется по адресу колбэка &lt;code&gt;vimeoid://oauth.done?...&lt;/code&gt;, но так как в вашем &lt;code&gt;AndroidManifest.xml&lt;/code&gt; для перехвата таких URL описано специальное активити, Android возвращает пользователя к вашему приложению, открывая это самое активити - &lt;code&gt;ReceiveCredentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;В активити &lt;code&gt;ReceiveCredentials&lt;/code&gt; вы получаете токен пользователя в параметрах &lt;code&gt;Uri uri = getIntent().getData()&lt;/code&gt;, теперь по этому токену нужно получить секрет через запрос к &lt;code&gt;/access_token&lt;/code&gt;: &lt;code&gt;provider.retrieveAccessToken(Uri uri)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Теперь можно сохранить токен и секрет пользователя, например, в приватных &lt;code&gt;SharedPreferences&lt;/code&gt;: &lt;code&gt;consumer.getToken()&lt;/code&gt;, &lt;code&gt;consumer.getTokenSecret()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;После этого вы можете подписывать каждый запрос к API веб-сервиса полученными токенами: &lt;code&gt;consumer.sign(Object request)&lt;/code&gt;. Если ваше приложение было перезапущено, перед всеми запросами можно проверить, нет ли токенов в &lt;code&gt;SharedPreferences&lt;/code&gt;, если есть - напомнить о них &lt;code&gt;signpost&lt;/code&gt;&amp;#39;у: &lt;code&gt;consumer.setTokenWithSecret(String token, String secret)&lt;/code&gt;, а если нет - запросить секрет пользователя заново (или обновить токены, если веб-сервис это позволяет).&lt;/p&gt;

&lt;p&gt;Важное замечание: на Android signpost работает только с использованием &lt;code&gt;CommonsHttpOAuthConsumer&lt;/code&gt;/&lt;code&gt;CommonsHttpOAuthProvider&lt;/code&gt;. Классы &lt;code&gt;DefaultOAuth*&lt;/code&gt; не работают.&lt;/p&gt;
&lt;h3 id=&#34;8.-медиа-плеер-и-буфферинг-видео-по-http&#34;&gt;&lt;a href=&#34;#8.-медиа-плеер-и-буфферинг-видео-по-http&#34; title=&#34;8. Медиа-плеер и буфферинг видео по HTTP&#34;&gt;8. Медиа-плеер и буфферинг видео по HTTP&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://developer.android.com/reference/android/media/MediaPlayer.html&#34;&gt;&lt;code&gt;MediaPlayer&lt;/code&gt;&lt;/a&gt; как оказалось, очень трудно заставить работать так, как хочется, в случае проигрывания видео. Чтобы получить видео мне нужно было выполнить необычный HTTP-запрос со специальными заголовками, поэтому получение потока и его буфферизирование пришлось писать вручную. Потоковое воспроизведение по аналогу &lt;a href=&#34;http://blog.pocketjourney.com/2009/12/27/android-streaming-mediaplayer-tutorial-updated-to-v1-5-cupcake/&#34;&gt;примеров для аудио-файлов&lt;/a&gt; у меня не вышло, поэтому пока что я просто загружаю видео полностью и начинаю проигрывание, когда оно уже загрузилось (если на карте не хватит места, я предупреждаю пользователя). При закрытии плеера или неудачном проигрывании я очищаю кэш.&lt;/p&gt;

&lt;p&gt;Ещё, поведение &lt;code&gt;VideoView&lt;/code&gt;/&lt;code&gt;SurfaceView&lt;/code&gt; при переключении видов в пределе одного лэйаута тоже работает очень неоднозначно (чёрный экран через раз), поэтому пришлось банально оставлять в лэйауте один-единственный &lt;code&gt;VideoView&lt;/code&gt; и показывать &lt;code&gt;ProgressDialog&lt;/code&gt; поверх него, пока видео загружается. Опять же, если вы знаете что-то про потоковое воспроизведение видео средствами &lt;code&gt;MediaPlayer&lt;/code&gt; (или о получении чанков вручную), пишите в комментариях.&lt;/p&gt;

&lt;p&gt;Поэтому, если в вашем случае вам хватит вызова &lt;code&gt;MediaPlayer.setDataSource(Uri uri)&lt;/code&gt;, можете пропустить следующий абзац, большего в ней не рассказывается.&lt;/p&gt;

&lt;p&gt;Если же вам тоже пришлось получать поток вручную, я обращу ваше внимание на пару моментов, в остальном просто продемонстрирую код, он должен рассказать всё сам:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Пример из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/media/VimeoVideoPlayingTask.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;VimeoVideoPlayingTask&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Вызывается из активити: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/Player.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Player&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Лэйаут: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/layout/player.xml?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;player.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Загружать поток лучше используя &lt;code&gt;AsyncTask&lt;/code&gt;. Я просто агрегирую &lt;code&gt;MediaPlayer&lt;/code&gt; внутри &lt;code&gt;...PlayingTask&lt;/code&gt; для удобства, вы можете выбрать любой другой способ, но получать поток определённо лучше через &lt;code&gt;AsyncTask&lt;/code&gt;. При этом, в методе &lt;code&gt;onPreExecute&lt;/code&gt; можно подготовить плеер и настроить его, в &lt;code&gt;doInBackground&lt;/code&gt; получить поток видео и вернуть этот поток в &lt;code&gt;onPostExecute&lt;/code&gt;, в котором и запустить проигрывание. Опять же, удобно показывать процентный прогресс загрузки, потому что в &lt;code&gt;doInBackground&lt;/code&gt; известно количество полученных данных.&lt;/p&gt;

&lt;p&gt;Если при загрузке потока возникает исключение, сообщение о нём приходится показывать через &lt;code&gt;runOnUiThread&lt;/code&gt;, потому что выполнение задачи было прервано.&lt;/p&gt;

&lt;p&gt;Выполнение &lt;code&gt;getWindow().setFormat(PixelFormat.TRANSPARENT);&lt;/code&gt; предназначено, чтобы отображённые поверх плеера виды не оставались поверх него после скрытия. Хотя если нужно использовать &lt;code&gt;ViewSwitcher&lt;/code&gt;, это всё равно не помогает.&lt;/p&gt;

&lt;p&gt;Код получения потока по URL примерно таков:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public static InputStream getVideoStream(long videoId)
       throws FailedToGetVideoStreamException, VideoLinkRequestException {
    try {
        final HttpClient client = new DefaultHttpClient();
        . . .
        final HttpResponse response = client.execute(request);
        if ((response == null) || (response.getEntity() == null))
            throw new FailedToGetVideoStreamException(&amp;#34;Failed to get video stream&amp;#34;);
        lastContentLength = response.getEntity().getContentLength();
        return response.getEntity().getContent();
    } catch (URISyntaxException use) {
        throw new VideoLinkRequestException(&amp;#34;URI creation failed : &amp;#34; + use.getLocalizedMessage());
    } catch (ClientProtocolException cpe) {
        throw new VideoLinkRequestException(&amp;#34;Client call failed : &amp;#34; + cpe.getLocalizedMessage());
    } catch (IOException ioe) {
        throw new VideoLinkRequestException(&amp;#34;Connection failed : &amp;#34; + ioe.getLocalizedMessage());
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;9.-очереди-из-asynctask&#34;&gt;&lt;a href=&#34;#9.-очереди-из-asynctask&#34; title=&#34;9. Очереди из AsyncTask&#34;&gt;9. Очереди из AsyncTask&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Если вам часто приходится выполнять по нескольку фоновых задач поочерёдно (когда завершилось одно - запускать следующее), этот вольный паттерн, скрывающий в себе переходы по связанному списку, вам подойдёт. Например, вам может понадобиться выполнить при загрузке Activity сразу несколько поочерёдных запросов к API некоего веб-сервиса или к базе данных. Главное, чтобы типы параметров и результата у всех этих задач всегда были одинаковыми.&lt;/p&gt;

&lt;p&gt;Вот интерфейс задачи, которая знает что у неё есть следующая задача:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface HasNextTask&amp;lt;Params&amp;gt; {
    public int getId();
    void setNextTask(HasNextTask&amp;lt;Params&amp;gt; task);
    public HasNextTask&amp;lt;Parames&amp;gt; getNextTask();
    public AsyncTask&amp;lt;?, ?, ?&amp;gt; execute(Params... params);
                         // совпадение с AsyncTask&amp;lt;Params, ...&amp;gt;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Интерфейс, который следит за всеми моментами, когда задачи удачно или неудачно выполняются:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public interface PerformHandler&amp;lt;Params, Result&amp;gt; {
    public void onPerfomed(int taskId, Result result, HasNextTask&amp;lt;Params&amp;gt; nextTask);
    public void onError(Exception e, String description);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Реализация интерфейса &lt;code&gt;HasNextTask&lt;/code&gt;. То что представлено многоточиями, можно вынести в дочерний класс или сделать сам класс абстрактным, чтобы методы &lt;code&gt;doInBackground&lt;/code&gt;/&lt;code&gt;onPostExecute&lt;/code&gt; реализовывались прямо в &lt;code&gt;createTask&lt;/code&gt; очереди:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public class TaskInQueue&amp;lt;Params, Result&amp;gt; extends AsyncTask&amp;lt;Params, Void, Result&amp;gt;
                                         implements HasNextTask&amp;lt;Params&amp;gt; {

    private final int taskId;
    private HasNextTask&amp;lt;Params&amp;gt; nextTask = null;
    private final PerformHandler&amp;lt;Params, Result&amp;gt; listener;

    public TaskInQueue(PerformHandler&amp;lt;Params, Result&amp;gt; listener, int taskId) {
        this.taskId = taskId;
        this.listener = listener;
    }

    @Override
    public Result doInBackground(Params... params) { . . . /* выполнение задачи */ }

    @Override
    protected void onPostExecute(Result result) {
        . . . // обработка результата, если нужно
        listener.onPerformed(taskId, result, nextTask);
    }

    @Override public int getId() { return taskId; }

    @Override
    public void setNextTask(HasNextTask&amp;lt;Params&amp;gt; nextTask) {
        if (this.nextTask != null)
            throw new IllegalStateException(&amp;#34;Next task is already set&amp;#34;);
        this.nextTask = nextTask;
    }

    @Override
    public HasNextTask&amp;lt;Params&amp;gt; getNextTask() { return nextTask; };

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ну и самое главное, реализация очереди:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public abstract class TasksQueue&amp;lt;Params, Result&amp;gt;
                implements PerformHandler&amp;lt;Params, Result&amp;gt;, Runnable {

    public static final String TAG = &amp;#34;TasksQueue&amp;#34;;

    private HasNextTask&amp;lt;Params&amp;gt; firstTask = null;
    private HasNextTask&amp;lt;Params&amp;gt; lastTask = null;
    private Map&amp;lt;Integer, Params&amp;gt; tasksParams = null;
    private int currentTask = -1;
    private boolean running = false; // сейчас выполняется одна из задач
    private boolean started = false; // очередь запущена
    private int size = 0;

    protected HasNextTask&amp;lt;Params&amp;gt; createTask(int taskId) { // можно переопределить
        return new TaskInQueue&amp;lt;Params, Result&amp;gt;(this, taskId);
    }

    @Override
    public HasNextTask&amp;lt;Params&amp;gt; add(int taskId, Params params) {
        Log.d(TAG, &amp;#34;Adding task &amp;#34; + taskId);
        final HasNextTask&amp;lt;Params&amp;gt; = createTask(taskId);
        if (isEmpty()) {
            firstTask = task;
            lastTask = task;
            tasksParams = new HashMap&amp;lt;Integer, Params&amp;gt;();
        } else {
            lastTask.setNextTask(task);
            lastTask = task;
        }
        tasksParams.put(task.getId(), params);
        size += 1;
        return task;
    }

    @Override
    public void run() {
        Log.d(TAG, &amp;#34;Running first task&amp;#34;);
        if (!isEmpty())
            try {
                started = true;
                execute(firstTask);
            } catch (Exception e) {
                onError(e, e.getLocalizedMessage());
                finish();
            }
        else throw new IllegalStateException(&amp;#34;Queue is empty&amp;#34;);
    }

    @Override
    public void onPerfomed(int taskId, Result result, HasNextTask&amp;lt;Params&amp;gt; nextTask) {
          Log.d(TAG, &amp;#34;Task &amp;#34; + taskId + &amp;#34; performed&amp;#34;);
        if (taskId != currentTask)
            throw new IllegalStateException(&amp;#34;Tasks queue desynchronized&amp;#34;);
        running = false;
        try {
            if (nextTask != null) {
                execute(nextTask);
            } else finish();
        } catch (Exception e) {
            onError(e, &amp;#34;Error while executing task &amp;#34; +
                       ((nextTask != null) ? nextTask.getId() : taskId));
            finish();
        }
    }

    protected void execute(HasNextTask&amp;lt;Result&amp;gt; task) throws Exception {
          Log.d(TAG, &amp;#34;Trying to run task &amp;#34; + task.getId());
        if (running) throw new IllegalStateException(&amp;#34;Tasks queue desynchronized&amp;#34;);
        currentTask = task.getId();
        running = true;
        Log.d(TAG, &amp;#34;Running task &amp;#34; + task.getId());
        task.execute(tasksParams.get(task.getId())).get(); // wait for result
    }

    protected void finish() {
        firstTask = null;
        lastTask = null;
        if (tasksParams != null) tasksParams.clear();
        tasksParams = null;
        currentTask = -1;
        running = false;
        started = false;
        size = 0;
    }

    public boolean isEmpty() { return (firstTask == null); }

    public boolean started() { return started; }

    public boolean running() { return running; }

    public int size() { return size; }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь в ваших активити в любой момент можно с лёгкостью создать очередь фоновых задач:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
protected final TasksQueue secondaryTasks;

private final int TASK_1 = 0;
private final int TASK_2 = 1;
private final int TASK_3 = 2;

public ...Activity() { // конструктор

    secondaryTasks = new TasksQueue&amp;lt;..., ...&amp;gt;() {

        // здесь можно переопределить createTask

        @Override public void onPerfomed(int taskId, ... result) throws JSONException {
            super.onPerfomed(taskId, result);
            onSecondaryTaskPerfomed(taskId, result);
        }

        @Override public void onError(Exception e, String message) {
            Log.e(TAG, message + &amp;#34; / &amp;#34; + e.getLocalizedMessage());
            Dialogs.makeExceptionToast(ItemsListActivity.this, message, e);
        }

    };

    secondaryTasks.add(TASK_1, ...);
    secondaryTasks.add(TASK_2, ...);
    secondaryTasks.add(TASK_3, ...);

}

protected void someMethod() {
    . . .
    if (!secondaryTasks.isEmpty()) secondaryTasks.run();
    . . .
}

protected void onSecondaryTaskPerfomed(int taskId, ... result) {
    switch (taskId) {
        case TASK_1: . . .
        case TASK_2: . . .
        case TASK_3: . . .
        . . .
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кстати, благодаря интерфейсу &lt;code&gt;Runnable&lt;/code&gt; такие очереди можно запускать в отдельном потоке:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
new Thread(secondaryTasks, &amp;#34;Tasks Queue&amp;#34;).start();

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Очередь в vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/ApiTasksQueue.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;ApiTasksQueue&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Создаётся в: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/SingleItemActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#49&#34;&gt;&lt;code&gt;SingleItemActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Инициализируется задачами в: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/item/UserActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#122&#34;&gt;&lt;code&gt;UserActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Обработка выполненных задач в: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/item/UserActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#301&#34;&gt;&lt;code&gt;UserActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10.-подсветка-выбора-в-listview&#34;&gt;&lt;a href=&#34;#10.-подсветка-выбора-в-listview&#34; title=&#34;10. Подсветка выбора в ListView&#34;&gt;10. Подсветка выбора в ListView&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/user-video.png&#34; alt=&#34;Выбранная строка в списке&#34;&gt;&lt;/p&gt;

&lt;p&gt;На картинке видно синюю полосу, это кастомная подсветка выбранного элемента, она имеет четыре состояния - нажатая, имеющая фокус, запрещённая и анимация перехода от нажатой в зажатую для долгого тапа. Первые три и зажатое состояние - это так называемые &lt;code&gt;9-patch&lt;/code&gt;, вы наверняка &lt;a href=&#34;http://developer.android.com/guide/developing/tools/draw9patch.html&#34;&gt;о них слышали&lt;/a&gt;, анимация - &lt;code&gt;xml&lt;/code&gt;-файл анимации.&lt;/p&gt;

&lt;p&gt;Для того чтобы описать состояния для подсветки выбора, укажите в лэйауте &lt;code&gt;android:listSelector=&amp;quot;@drawable/selector_bg&amp;quot;&lt;/code&gt; для вашего &lt;code&gt;ListView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;selector_bg.xml&lt;/code&gt; - это ещё один &lt;code&gt;xml&lt;/code&gt;-файл, набор правил о том как изменяется подстветка в зависимости от состояний. Система проходит по каждому правилу и как только первое правило совпало, оно выполняется, а следующие игнорируются. Алгоритм прост, но выстроить правила в верном порядке не всегда выходит сразу. Смотрите примеры:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Описание: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/drawable/selector_bg.xml?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;selector_bg.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Анимация: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/drawable/selector_bg_transition.xml?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;selector_bg_transition.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Объявлен в: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/res/layout/generic_list.xml?r=85e18485bdda1c526141170f67e65f4e00202f34#16&#34;&gt;&lt;code&gt;generic_list.xml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/draw9patch-norm.png&#34; alt=&#34;редактор 9-patch&#34;&gt;&lt;/p&gt;

&lt;p&gt;С 9-patch тоже есть хитрости, чуть что не так в лэйауте - и они разъезжаются и весь список разъезжается тоже. Главное правило - проверить прежде описание &lt;code&gt;ListView&lt;/code&gt;, убедитесь что &lt;code&gt;layout_width&lt;/code&gt; и &lt;code&gt;layout_height&lt;/code&gt; установлены в &lt;code&gt;fill_parent&lt;/code&gt; и кроме того перепроверьте элементы выше по иерархии. Затем, если не помогло, можно исправлять 9-patch. Тонкие чёрные линии сверху и слева обозначают области картинки, которые будут растянуты если контент не влез в картинку. Тонкие чёрные линии (необязательные) справа и снизу обозначают области в которые сам контент будет вписан. Подобрать нужные позиции тоже получается не сразу, приходится экспериментировать. Даже не думайте создавать 9-patch без редактора из коробки, это лишний вынос мозга - в редакторе подсвечиваются области для контента и ошибки, и даже когда всё вроде верно, не всегда раскладка воспринимается инфлейтером как ожидалось.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/selector_bg_disabled.9.png&#34; alt=&#34;Запрещённое состояние&#34;&gt; &lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/selector_bg_focus.9.png&#34; alt=&#34;Cостояние фокуса&#34;&gt; &lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/selector_bg_pressed.9.png&#34; alt=&#34;Нажатое состояние&#34;&gt; &lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/selector_bg_longpress.9.png&#34; alt=&#34;Зажатое состояние&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11.-добавление-quickactions&#34;&gt;&lt;a href=&#34;#11.-добавление-quickactions&#34; title=&#34;11. Добавление QuickActions&#34;&gt;11. Добавление QuickActions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/10-useful-solutions-for-android-developer/user-videos.png&#34; alt=&#34;Пример QuickActions&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.londatiga.net/it/how-to-create-quickaction-dialog-in-android/&#34;&gt;QuickActions&lt;/a&gt; - небольшая библиотека для всплывающих диалогов с действиями, таких как на рисунке (и не только таких, потому что их дизайн можно менять свободно). Они стали новым популярным веянием при появлении официального твиттер-клиента. Должны быть и другие имплементации, в &lt;em&gt;vimeoid&lt;/em&gt; я использую эту, и её тоже немного подправил для своих нужд.&lt;/p&gt;

&lt;p&gt;Для того, чтобы отобразить такой диалог вместо контекстного меню при долгом тапе на элементе в списке, достаточно переопределить метод &lt;code&gt;onCreateContextMenu&lt;/code&gt; в &lt;code&gt;ListActivity&lt;/code&gt; таким образом:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
    . . .
    final AdapterView.AdapterContextMenuInfo info = extractMenuInfo(menuInfo);
    final QuickAction quickAction =
          createQuickActions(info.position, getItem(info.position), info.targetView);
    if (quickAction != null) quickAction.show();
}

protected QuickAction createQuickActions(final int position, final ... item, View view) {
    QuickAction qa = new QuickAction(view);
    qa.addActionItem(getString(R.string...),
                     getResources().getDrawable(R.drawable...),
            new QActionClickListener() {
                @Override public void onClick(View v, QActionItem item) {
                    . . .
                }
            });
    . . .
    return qa;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Каталог, содержащий модифицированную библиотеку &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/lib-qactions?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;lib-qactions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Используется в: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/activity/user/list/VideosActivity.java?r=85e18485bdda1c526141170f67e65f4e00202f34#113&#34;&gt;&lt;code&gt;VideosActivity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;О добавлении внешней библиотеки в проект Eclipse рассказано в &lt;a href=&#34;http://developer.android.com/guide/developing/eclipse-adt.html#libraryProject&#34;&gt;этой статье&lt;/a&gt;. Если кратко, достаточно создать для библиотеки отдельный Android-проект с исходниками, установить чекбокс &lt;code&gt;isLibrary&lt;/code&gt; в разделе &lt;code&gt;Android&lt;/code&gt; в свойствах этого проекта, а в основном проекте добавить проект с библиотекой пунктом &lt;code&gt;Library&lt;/code&gt; -&amp;gt; &lt;code&gt;Add&lt;/code&gt; из того же раздела. При этом &lt;code&gt;R&lt;/code&gt;-файл из проекта с библиотекой будет добавлен в основной проект.&lt;/p&gt;
&lt;h3 id=&#34;12.-ещё-три-маленьких-решения&#34;&gt;&lt;a href=&#34;#12.-ещё-три-маленьких-решения&#34; title=&#34;12. Ещё три маленьких решения&#34;&gt;12. Ещё три маленьких решения&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;12а.-единое-место-для-вызова-различных-активити&#34;&gt;&lt;a href=&#34;#12а.-единое-место-для-вызова-различных-активити&#34; title=&#34;12а. Единое место для вызова различных активити&#34;&gt;12а. Единое место для вызова различных активити&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Если в вашем приложении много различных активити и они вызываются схожим образом, возможно будет удобно перенести их вызовы включая заполнение &lt;code&gt;Extras&lt;/code&gt; в отдельный класс:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Пример из vimeoid: &lt;a href=&#34;http://code.google.com/p/vimeoid/source/browse/apk/src/org/vimeoid/util/Invoke.java?r=85e18485bdda1c526141170f67e65f4e00202f34&#34;&gt;&lt;code&gt;Invoke&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12б.-про-плэйсхолдеры-в-локализации&#34;&gt;&lt;a href=&#34;#12б.-про-плэйсхолдеры-в-локализации&#34; title=&#34;12б. Про плэйсхолдеры в локализации&#34;&gt;12б. Про плэйсхолдеры в локализации&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Возможно это очевидно, но в строках из &lt;code&gt;strings.xml&lt;/code&gt; можно использовать плейсходеры для того, чтобы подставлять какие-то независимые от локали значения внутрь строк, например: &lt;code&gt;&amp;lt;string name=&amp;quot;image_info&amp;quot;&amp;gt;Image size: {width}x{height}&amp;lt;/string&amp;gt;&lt;/code&gt;. В этом поможет функция &lt;code&gt;format&lt;/code&gt;, которую можно вызвать так: &lt;code&gt;format(getString(R.string.image_info), &amp;quot;width&amp;quot;, String.valueOf(600), &amp;quot;height&amp;quot;, String.valueOf(800))&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
public static String format(String source, String... params) {
    String result = source;
    int pos = 0;
    while (pos &amp;lt; params.length) {
        result = result.replaceAll(&amp;#34;\\{&amp;#34; + params[pos++] + &amp;#34;\\}&amp;#34;, params[pos++]);
    }
    return result;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; Оказалось, как я и думал, это велосипед: Есть стандартная функция &lt;a href=&#34;http://developer.android.com/intl/de/reference/android/content/Context.html#getString%28int,%20java.lang.Object...%29&#34;&gt;&lt;code&gt;getString(int resId, Object... formatArgs)&lt;/code&gt;&lt;/a&gt;. Спасибо &lt;a href=&#34;http://zochek.habrahabr.ru/&#34;&gt;zochek&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;12в.-про-некорректные-лэйауты&#34;&gt;&lt;a href=&#34;#12в.-про-некорректные-лэйауты&#34; title=&#34;12в. Про некорректные лэйауты&#34;&gt;12в. Про некорректные лэйауты&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Обязательно прочитайте эти статьи, инфлэйтер в андроиде действительно очень чувствителен к сложным структурам и если вы пишете сложное приложение, лэйауты рано или поздно придётся оптимизировать:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/02/22/android-layout-tricks-1/&#34;&gt;Layout Tricks #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/02/25/android-layout-trick-2-include-to-reuse/&#34;&gt;Layout Tricks #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/03/01/android-layout-tricks-3-optimize-part-1/&#34;&gt;Layout Tricks #3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/03/16/android-layout-tricks-4-optimize-part-2/&#34;&gt;Layout Tricks #4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.curious-creature.org/2009/03/04/speed-up-your-android-ui/&#34;&gt;Speed up your Android UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Мои часто перерендеривающиеся лэйауты в один момент потерпели крах и &lt;code&gt;getView&lt;/code&gt; адаптера стал вызываться практически каждую секунду (и до сих пор бывает такое, но уже сильно реже). После замены многих вложенных сложноструктурированных &lt;code&gt;LinearLayout&lt;/code&gt;ов на менее вложенные и элегантные &lt;code&gt;RelativeLayout&lt;/code&gt;, инфлэйтеру стало явно легче и мне самому тоже, потому что иерархия стала короче и делать мелкие изменения стало проще. Я их ещё не везде успел подменить, но теперь отнощусь к лэйаутам внимательнее. Также следите за тем, чтобы &lt;code&gt;width/height=wrap_content&lt;/code&gt; использовался по возможности только для простых элементов, использование &lt;code&gt;wrap_content&lt;/code&gt; в качестве параметров ширины/высоты &lt;code&gt;LinearLayout&lt;/code&gt; и прочих сложных видов может привести к сложным последствиям. Может и не привести, но кто предупреждён&amp;hellip;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Клиент для Google Wave в виде Java Web Application</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/sametimed-google-wave-client/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/sametimed-google-wave-client/</id>
                <updated>2009-10-13T00:46:00Z</updated>
                
                <summary type="html">Здравствуйте.</summary>
                <content type="html">&lt;p&gt;Здравствуйте.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/sametimed&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/sametimed-google-wave-client/logo.png&#34; alt=&#34;sametimed&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Итак, я написал небольшой проект на Java, который представляет собой клиент к Google Wave, который, в свою очередь, вы можете расширить необходимыми вам возможностями. Визуально выглядит он не очень презентабельно &lt;s&gt;(впрочем, а-ля Windows 3.11, почему бы и нет)&lt;/s&gt;, поскольку веб-дизайнер из меня не очень хороший, однако абсолютно за весь исходный код я отвечаю головой :). Так, например, требующиеся для отображения CSS-стили при этом выглядят максимально понятно, а XHTML-структура максимально упрощена (не в ущерб стандартам) для того, чтобы настоящий дизайнер мог развернуться и сделать действительно красиво :).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/blog/ru/figures/sametimed-google-wave-client/screenshot-full.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/sametimed-google-wave-client/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Сайт, исходные коды, и war-пакет с текущим состоянием проекта находятся по адресу &lt;a href=&#34;http://code.google.com/p/sametimed&#34;&gt;http://code.google.com/p/sametimed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Сейчас у меня нет под рукой общедоступного хостинга, чтобы я мог прямо вот так запустить проект и дать поиграться с ним не отходя от хабра, однако, я могу предложить вам &lt;a href=&#34;https://vimeo.com/7036141&#34;&gt;видео (на vimeo)&lt;/a&gt;, демонстирующее его основные возможности, что, думаю, тоже вполне ничего, а запустить проект вы сможете сами, благо подробные инструкции есть на сайте проекта, а развёрнутые пояснения и подробное описание работы (и руководство к расширению возможностей) — внутри&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vimeo.com/7036141&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/sametimed-google-wave-client/vimeo.png&#34; alt=&#34;video&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;установка&#34;&gt;&lt;a href=&#34;#установка&#34; title=&#34;Установка&#34;&gt;Установка&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для того, чтобы запустить этот клиент, нужно, по идее, четыре вещи:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WAR-пакет клиента, его можно взять из &lt;a href=&#34;http://code.google.com/p/sametimed&#34;&gt;проекта на googlecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Установленный с настройками по умолчанию wave-protocol сервер текущей версии (0.2) (&lt;a href=&#34;http://code.google.com/p/wave-protocol/wiki/Installation&#34;&gt;описание установки на английском&lt;/a&gt;, &lt;a href=&#34;http://habrahabr.ru/blogs/google/65964/&#34;&gt;перевод с английского&lt;/a&gt; by &lt;a href=&#34;http://DarwinTenk.habrahabr.ru&#34;&gt;DarwinTenk&lt;/a&gt; и &lt;a href=&#34;http://habrahabr.ru/blogs/google/65984/&#34;&gt;описание установки на Windows&lt;/a&gt; (на русском), by &lt;a href=&#34;http://vadbars.habrahabr.ru&#34;&gt;vadbars&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Любой Web-сервер, реализующий спецификации Java EE (тестировалось на встроенном в Eclipse Jetty)&lt;/li&gt;
&lt;li&gt;Браузер Firefox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чуть более подробные инструкции &lt;a href=&#34;http://code.google.com/p/sametimed/wiki/SametimedInstallationInstructions&#34;&gt;как его запустить сам по себе&lt;/a&gt; или &lt;a href=&#34;http://code.google.com/p/sametimed/wiki/CreatingEclipseProject&#34;&gt;в виде рабочего проекта для Eclipse&lt;/a&gt; представлены на странице проекта. Здесь же я рассмотрю структуру кода и опишу как он действует (пока без что UML-диаграмм, извините, по мере возможности я их добавлю).&lt;/p&gt;
&lt;h3 id=&#34;общая-концепция&#34;&gt;&lt;a href=&#34;#общая-концепция&#34; title=&#34;Общая концепция&#34;&gt;Общая концепция&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Здесь под сочетанием «серверная сторона/часть» подразумевается не сервер wave-protocol, а серверная строна веб-приложения.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Поскольку в wave-protocol сейчас существует только консольный клиент, релизованный в виде jar-приложения, основной вопрос состоит в своевременной передаче информации с клиента на серверную часть и наоборот.&lt;/p&gt;

&lt;p&gt;Посему стало необходимо ввести два понятия:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Команда&lt;/strong&gt;: отправляется с клиента на сервер, требует «открыть волну», «добавить участника», «отменить действие», «сказать привет» и т.п., отправляется по действию пользователя.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Сообщение&lt;/strong&gt;: отправляется с сервера на клиент, сообщает о том, что «кто-то пригласил в волну», «sonya ответила привет», «добавился участник», «произошла ошибка», отправляется при любом обновлении.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;При этом, команду с клиента можно отправить сразу, сильно не задумываясь о нагрузке на сервер, а вот сообщения об обновлениях требуется отсылать только по факту происшествия. Однако, на клиенте находится javascript, который без сложных приспоcоблений не может осуществлять такие вещи. Здесь потребовался &lt;a href=&#34;http://en.wikipedia.org/wiki/Reverse_Ajax&#34;&gt;Reverse Ajax&lt;/a&gt;, вернее его реализация для Java — библиотека &lt;a href=&#34;http://directwebremoting.org/dwr/index.html&#34;&gt;DWR&lt;/a&gt; (Direct Web Remoting), она позволяет вызывать функцию на клинете с сервера в тот момент, когда решит сервер, а не клиент. Их сайт рассказывает о всех возможностях, которые вовсе не ограничены данным применением, но для проекта, как я уже сказал, из всех возможностей я использовал только эту.&lt;/p&gt;

&lt;p&gt;Команды и сообщения передаются в виде XML, а содержимое сообщений об обновлениях в виде JSON, засчёт чего в построении интерфейса участвует только JavaScript (я использовал JQuery), а серверная сторона даже не задумывается о существовании UI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(для серверной стороны в проекте есть интерфейс Renderer, реализация которого вызывается при необходимых обновлениях, но он предназначен как раз для случаев вроде консольного клиента)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;описание-процесса-происходящего-в-текущей-версии&#34;&gt;&lt;a href=&#34;#описание-процесса-происходящего-в-текущей-версии&#34; title=&#34;Описание процесса, происходящего в текущей версии&#34;&gt;Описание процесса, происходящего в текущей версии&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;При запуске клиента, вы видите страницу с полем для ввода юзернейма и единственной кнопкой. Wave-protocol сервер при этом должен быть запущен. При нажатии на кнопку введённый вами юзернейм передаётся в сервлет (&lt;code&gt;GetClientViewServlet&lt;/code&gt;), который подключает вас «к волне», и возвращает всю структуру (модель) клиента в виде JSON. JQuery на клиентской стороне строит весь интерфейс вейвлета. Если вы нажмёте кнопку ещё раз, вы запросите ещё один вейвлет, при этом между собой они будут различаться по внутреннему ID (сгенерированному автоматически), указанному на синей полоске в скобках. По этому ID и сервер и клиент определяют, к какому клиенту относится команда и/или сообщение.&lt;/p&gt;

&lt;p&gt;Одновременно с этим DWR начинает ожидать вестей об обновлениях, а вы в это время можете ввести любую из доступных команд в поле консоли и нажать «send». Например, создать волну командой «&lt;code&gt;\new&lt;/code&gt;» , открыть её командой «&lt;code&gt;\open &amp;lt;id&amp;gt;&lt;/code&gt;» и что-нибудь сказать, набрав просто текст (как в скайпе). При нажатии на кнопку «send» отправляется POST-запрос к другому сервлету (&lt;code&gt;CommandsReceiverServlet&lt;/code&gt;), который получает сгенерированную в виде XML команду и тут же её выполняет, передавая данные серверу wave-protocol.&lt;/p&gt;

&lt;p&gt;Обновления в данный момент приходят с серверной стороны (и от сервера wave-protocol) в виде XML-сообщения (на клиентской стороне есть обработчик, который вызывается при получении новых сообщений), в котором содержится алиас изменившейся модели (например, &amp;ldquo;chat&amp;rdquo;, &amp;ldquo;inbox&amp;rdquo;, &amp;ldquo;userslist&amp;rdquo;, &amp;ldquo;errors&amp;rdquo; или &amp;ldquo;editor&amp;rdquo;) и её содержимое в виде JSON, которое тут же обрабатывается и обновляет соответствующую часть вейвлета.&lt;/p&gt;

&lt;p&gt;Как видите, всё до невозможности просто.&lt;/p&gt;
&lt;h3 id=&#34;структура-проекта-и-возможности-для-расширения&#34;&gt;&lt;a href=&#34;#структура-проекта-и-возможности-для-расширения&#34; title=&#34;Структура проекта и возможности для расширения&#34;&gt;Структура проекта и возможности для расширения&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;java&#34;&gt;&lt;a href=&#34;#java&#34; title=&#34;Java:&#34;&gt;Java:&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;**&lt;code&gt;name.shamansir.sametimed.wave&lt;/code&gt;** &lt;em&gt;Все классы, лежащие «снаружи» и относящиеся к клиенту непосредственно&lt;/em&gt;; здесь находятся абстрактные классы &lt;code&gt;AUpdatingWavelet&lt;/code&gt; и &lt;code&gt;ADocumentsWavelet&lt;/code&gt; — определяющие структуру соответствующего типа вейвлетов (обновляющийся вейвлет и его расширение, вейвлет содержащий документы). Класс &lt;code&gt;SimpleWavelet&lt;/code&gt; служит примером такой реализации. Класс &lt;code&gt;WavesClient&lt;/code&gt; занимается обработкой команд и именно он возвращает модель содержащегося в нём вейвлета в &lt;code&gt;GetClientViewServlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;name.shamansir.sametimed.wave.messaging&lt;/code&gt;** &lt;em&gt;Все, что относится к командам и сообщениям&lt;/em&gt;; Идентификаторы команд/сообщений в &lt;code&gt;CommandID&lt;/code&gt;/&lt;code&gt;MessageTypeID&lt;/code&gt;, сами классы &lt;code&gt;Command&lt;/code&gt; и &lt;code&gt;UpdateMessage&lt;/code&gt;, сервлет-обработчик &lt;code&gt;CommandsReceiverServlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;name.shamansir.sametimed.wave.model&lt;/code&gt;** &lt;em&gt;Классы, описывающие модель вейвлета&lt;/em&gt;; Они содержат описание каждой суб-модели, вроде списка участников, чата или текстового документа. И &lt;code&gt;ModelID&lt;/code&gt;, описывающий возможные модели с абстрактным классом &lt;code&gt;AModel&lt;/code&gt;, конечно. Плюс, &lt;code&gt;ModelFactory&lt;/code&gt;, фабрика моделей.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Значения моделей, вроде «набора строк чата», «набора блоков текста в документе», «списка доступных волн» и т.д.&lt;/em&gt;; Именно в этих классах описывается преобразование в JSON.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base.atom&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;То, из чего состоят значения, если это необходимо для их структуры — «строка чата», «блок текста», «идентификатор волны»&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base.chat&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Вейвлет с функцией чата и клиент для него&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name.shamansir.sametimed.wave.model.base.editor&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;Вейвлет с поддержкой редактируемого документа, на данный момент не имплементирован, поэтому отключен&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;**&lt;code&gt;name.shamansir.sametimed.wave.render&lt;/code&gt;** &lt;em&gt;Классы, относящиеся к рендерингу&lt;/em&gt;; Здесь находится тот самый класс &lt;code&gt;JSUpdatesListener&lt;/code&gt;, который средствами DWR вызывает функцию обновления на клиенте.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Самый логичный способ расширения — имплементация класса &lt;code&gt;ADocumentsWavelet&lt;/code&gt; или расширение класса &lt;code&gt;WaveletWithChat&lt;/code&gt;. Поскольку, в наиболее вероятном случае, вы будете оперировать понятием «документ» (А чат или что-либо другое, как раз являются документами), то именно такой способ должен подойти вам лучше всего. Также вам понадобится задуматься о модели данного документа (создав соответсвующий тип, реализующий &lt;code&gt;AModel&lt;/code&gt;, добавить id модели в тип &lt;code&gt;ModelID&lt;/code&gt; и генерацию модели в &lt;code&gt;ModelFactory&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Если документ не будет обрабатывать какие-либо новые команды, то этого достаточно — можно заменить в &lt;code&gt;GetClientViewServlet&lt;/code&gt; возвращаемый вейвлет на ваш собственный и вуаля!. Ах, да, ещё генерация UI на клиенте, но об этом ниже.&lt;/p&gt;

&lt;p&gt;Если же необходимы свои собственные, предназначенные сугубо для него команды, то необходимо добавить соответствующие команды в тип &lt;code&gt;CommandID&lt;/code&gt;. После этого нужно расширить класс &lt;code&gt;WavesClient&lt;/code&gt; для поддержки вашего вейвлета и для того, чтобы он обрабатывал и передавал новые команды вейвлету независимо от предка. И, в этом случае, заменить в &lt;code&gt;GetClientViewServlet&lt;/code&gt; реализацию &lt;code&gt;WavesClient&lt;/code&gt; на вашу собственную. И снова вуаля! (снова, не учитывая UI)&lt;/p&gt;

&lt;p&gt;Вам понадобится, конечно же, учесть пару тонкостей при написании обработки команд, но в общих чертах это весь необходимый процесс для расширения функциональности клиента.&lt;/p&gt;
&lt;h4 id=&#34;javascript&#34;&gt;&lt;a href=&#34;#javascript&#34; title=&#34;JavaScript&#34;&gt;JavaScript&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ui.js&lt;/code&gt;&lt;/strong&gt; занимается генерацией интерфейса, для каждого блока модели есть собственный метод&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;command.js&lt;/code&gt;&lt;/strong&gt; отправляет и генерирует команды, принимает сообщения об обновлениях, а также содержит обработчики для кнопок&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ajax.js&lt;/code&gt;&lt;/strong&gt; скрипт, который давно пора заменить на соответствующий метод jquery, но никак не доходят руки :). используется в command.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для того, чтобы добавить генерацию вашей модели, достаточно добавить строку, вызывающую ваш метод обработки в методы &lt;code&gt;сreateClient&lt;/code&gt; и &lt;code&gt;renderUpdate&lt;/code&gt; объекта &lt;code&gt;ClientRenderer&lt;/code&gt; в &lt;code&gt;ui.js&lt;/code&gt; и собственно написать этот метод. Всё остальное будет (должно) работать самостоятельно.&lt;/p&gt;
&lt;h4 id=&#34;css&#34;&gt;&lt;a href=&#34;#css&#34; title=&#34;CSS&#34;&gt;CSS&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sametimed-plain.css&lt;/code&gt;&lt;/strong&gt; ещё чуть более ужасный интерфейс чем цветной :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sametimed-colored.css&lt;/code&gt;&lt;/strong&gt; цветной, Windows 3.11-подобный интерфейс :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Пока что стили, определяющие позиционирование и внешний вид (цветность) не разделены, хотя они разделяются комментариями в самих файлах. Думаю, я не буду этого менять.&lt;/p&gt;
&lt;h3 id=&#34;эпилог&#34;&gt;&lt;a href=&#34;#эпилог&#34; title=&#34;Эпилог&#34;&gt;Эпилог&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Вышло много текста про одно небольшое веб-приложение, но зато пост описывает все его возможности. Надеюсь найдётся не один человек, которому эта разработка будет интересна и если найдётся, планирую усовершенствовать его дальше. Пока это небольшая поделка «из интереса», но немного стараний — и её можно превратить в полноценный проект.&lt;/p&gt;

&lt;p&gt;Тех, кто это будет тестировать, прошу постить баги в &lt;a href=&#34;http://code.google.com/p/sametimed/issues/list&#34;&gt;соответствующее место&lt;/a&gt;, в разумных пределах и не относящиеся к дизайну :).&lt;/p&gt;

&lt;p&gt;Участие в разработке приветствуется но поощрить нечем, только лицензией :).&lt;/p&gt;
&lt;h3 id=&#34;важное-пояснение&#34;&gt;&lt;a href=&#34;#важное-пояснение&#34; title=&#34;Важное пояснение&#34;&gt;Важное пояснение&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Если вы будете проверять приложение в работе одновременно с консольным клиентом wave-protocol, сообщения отосланные из консольного клиента  будут приходить на одно позже. Это не баг и не фича, это способ генерации «документа» чата. В консольном случае Google, по крайней мере как посчитал я, изменили порядок записи элементов документа так, чтобы их было удобнее отображать в консоли (начало элемента, конец элемента, затем его содержимое). В моём случае элемент строится в привычном порядке (начало, содержимое, конец), этим и обусловлено это несоответствие. Если исправить порядок генерации в моём проекте на тот же, что и в консоли, они будут будут полностью друг другу соответствовать.&lt;/p&gt;

&lt;p&gt;И да, специальной проверки/валидации введённых на клиенте данных пока не производится.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;Сопутствующая история.&lt;/em&gt; Где-то с месяц назад в поисках работы я получил тестовое задание от некоторой фирмы X, аж на три недели. При том, что большую часть задания я выполнил и показал текущий на то время вариант в работе и прошёл 80% тестов на собеседовании, меня не приняли. Посему я считаю что имею право поделиться и исходным кодом и руководством к использованию с хабраобществом. Код я развил немного в другом направлении, но тем не менее он может оказаться полезным, даже если у гугла неожиданно окажется есть всё необходимое и в рабочем (доступном разработчикам) варианте.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;да-да, слово editor используется часто применительно к проекту, потому что изначально он планировался (и планируется) как одновременный редактор&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            </entry>
        
            <entry>
                <title>На клиенте! Получить XML! Получить XSL! Сделать XHTML! Марш!</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/client-xml-xslt-xhtml-browsers/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/client-xml-xslt-xhtml-browsers/</id>
                <updated>2009-09-18T00:46:00Z</updated>
                
                <summary type="html">&lt;strong&gt;(X-Task: &amp;ldquo;On your Client! Get XML! Get XSL! Do XHTML! Go!&amp;rdquo;)&lt;/strong&gt;</summary>
                <content type="html">&lt;p&gt;&lt;strong&gt;(X-Task: &amp;ldquo;On your Client! Get XML! Get XSL! Do XHTML! Go!&amp;rdquo;)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;вступление&#34;&gt;&lt;a href=&#34;#вступление&#34; title=&#34;Вступление&#34;&gt;Вступление&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Статья рассматривает преобразование XML в XHTML посредством XSLT на клиенте средствами JavaScript. К примеру, у вас есть какие-либо данные в виде XML, а вам требуется по какому-либо действию клиента (по клику на ссылке), оформить их в [X]HTML и динамически вставить в страницу. Это не так сложно, но по пути, как оказалось, встречается несколько подводных камней — в основном, относительно кросс-браузерности этого подхода и малой освещённости процесса в сети. &lt;em&gt;Генерация XHTML-страниц средствами браузера (прямой запрос на XML файл, содержащий информацию о стиле) — это другая тема, она намного проще, и здесь затронута не будет.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Задача будет рассмотрена на банальном примере личного сайта. Дано: Файл с контактными данными (XML), некая главная страница (XHTML) и пять браузеров: Firefox 3, Opera 9.5, IE7, Safari 3, Google Chrome. На главной странице есть ссылка, при нажатии которой контактные данные преобразуются в несортированный список (UL) и отображаются в специально выделенной области прямо на этой странице. Это реальный рабочий пример, который я сейчас использую для создания своего сайта (ещё не выложенного).&lt;/p&gt;
&lt;h3 id=&#34;xml&#34;&gt;&lt;a href=&#34;#xml&#34; title=&#34;XML&#34;&gt;XML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Контактные данные, при их большом количестве, можно сгруппировать, поэтому XML-схема построена с учётом группировки элементов. Группа имеет краткое имя (&lt;code&gt;shortname&lt;/code&gt;) для создания &lt;code&gt;id&lt;/code&gt; у списка (возможно, потребуется оформить каждую группу по-особому) и, собственно, имя группы. XML-файл может содержать &lt;code&gt;contact&lt;/code&gt;-ноды и вне групп, но в данном примере в этом нет необходимости. Все контакты имеют тип (&lt;code&gt;type&lt;/code&gt;) для создания корректных ссылок в будущем (это мы также опустим). С остальным, вроде бы, всё понятно:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/client-xml-xslt-xhtml-browsers/xml-schema-example.jpg&#34; alt=&#34;XML Schema Example&#34;&gt;&lt;/p&gt;

&lt;p&gt;Структура довольно-таки проста, поэтому приведу сразу пример файла (любое сходство с реальными данными какого-либо индивидуума полностью случайно и приведено не намеренно):&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;?xml-stylesheet type=&amp;#34;text/xsl&amp;#34; href=&amp;#34;./contacts.xsl&amp;#34;?&amp;gt;
&amp;lt;contacts
    xmlns=&amp;#34;http://any-developer.name&amp;#34;
    xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
    xsi:schemaLocation=&amp;#34;http://any-developer.name ./contacts.xsd&amp;#34;&amp;gt;
    &amp;lt;group shortname=&amp;#34;messengers&amp;#34;&amp;gt;
        &amp;lt;name&amp;gt;Messengers&amp;lt;/name&amp;gt;
        &amp;lt;contact type=&amp;#34;skype&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;any.developer&amp;lt;/id&amp;gt;
        &amp;lt;/contact&amp;gt;
        &amp;lt;contact type=&amp;#34;jabber&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;any.developer@jabber.org&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;ulric.wilfred&amp;lt;/name&amp;gt;
        &amp;lt;/contact&amp;gt;
        &amp;lt;contact type=&amp;#34;gtalk&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;any.developer&amp;lt;/id&amp;gt;
        &amp;lt;/contact&amp;gt;
        &amp;lt;contact type=&amp;#34;yahoo&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;any.developer&amp;lt;/id&amp;gt;
        &amp;lt;/contact&amp;gt;
        &amp;lt;contact type=&amp;#34;icq&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;7484939304033345544&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;any.developer&amp;lt;/name&amp;gt;
        &amp;lt;/contact&amp;gt;
    &amp;lt;/group&amp;gt;
    &amp;lt;group shortname=&amp;#34;email&amp;#34;&amp;gt;
        &amp;lt;name&amp;gt;E-Mail&amp;lt;/name&amp;gt;
        &amp;lt;contact type=&amp;#34;gmail&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;any.developer&amp;lt;/id&amp;gt;
        &amp;lt;/contact&amp;gt;
        &amp;lt;contact type=&amp;#34;yahoo-mail&amp;#34;&amp;gt;
            &amp;lt;id&amp;gt;any.developer&amp;lt;/id&amp;gt;
        &amp;lt;/contact&amp;gt;
    &amp;lt;/group&amp;gt;
&amp;lt;/contacts&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xsl&#34;&gt;&lt;a href=&#34;#xsl&#34; title=&#34;XSL&#34;&gt;XSL&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Стиль генерирует XHTML-код, в виде списка UL, состоящего из негруппированных контактов и вложенных списков для групп. Поскольку результат вывода именно &lt;strong&gt;X&lt;/strong&gt;HTML, требования к оформлению результата несколько строже, чем если бы это был обычный HTML. Поэтому следует обратить внимание на следующие моменты:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Важно:&lt;/strong&gt; В результате преобразования должен получаться файл с одной и только одной корневой нодой, иначе Safari и Google Chrome (&lt;em&gt;Читай:&lt;/em&gt; WebKit) не смогут добавить результирующий элемент в документ. Это довольно разумно, поскольку для всех XML объектов (результат в виде XHTML из их числа) есть правило: корневой элемент должен быть только один (&lt;em&gt;There can be the only one&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Важно:&lt;/strong&gt; В качестве &lt;code&gt;xsl:output method&lt;/code&gt; должен быть указан либо &lt;code&gt;xml&lt;/code&gt; либо &lt;code&gt;html&lt;/code&gt; (однако, в последнем случае, при использовании пронстранств имён, таковые будут потеряны). Некоторые ставят это значение в &lt;code&gt;xhtml&lt;/code&gt; и в результате получают некорректную обработку или ошибки на клиенте — пока этого метода не введено и не следует его использовать. Для этого есть &lt;code&gt;media-type&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Код генерируется без заголовков XML: &lt;code&gt;omit-xml-declaration&lt;/code&gt; установлен в &lt;code&gt;yes&lt;/code&gt; и &lt;code&gt;xmlns&lt;/code&gt; не указывается, иначе в результате получится недоXHTML-файл с XML-заголовком, не содержащий &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt; и &lt;code&gt;body&lt;/code&gt;. Генерация &lt;code&gt;DOCTYPE&lt;/code&gt; (&lt;code&gt;doctype-system&lt;/code&gt;, &lt;code&gt;doctype-public&lt;/code&gt;) также отключена.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Исходник:&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;
&amp;lt;xsl:stylesheet version=&amp;#34;1.0&amp;#34;
        xmlns:xsl=&amp;#34;http://www.w3.org/1999/XSL/Transform&amp;#34;
        xmlns:c=&amp;#34;http://any-developer.name&amp;#34; exclude-result-prefixes=&amp;#34;c&amp;#34;&amp;gt;
&amp;lt;!--    xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; --&amp;gt;

&amp;lt;xsl:output method=&amp;#34;xml&amp;#34;
            encoding=&amp;#34;utf-8&amp;#34;
            standalone=&amp;#34;yes&amp;#34;
            indent=&amp;#34;yes&amp;#34;
            omit-xml-declaration=&amp;#34;yes&amp;#34;
            media-type=&amp;#34;text/xhtml&amp;#34;/&amp;gt;
        &amp;lt;!--
            doctype-system=&amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;#34;
            doctype-public=&amp;#34;-//W3C//DTD XHTML 1.0 Strict//EN&amp;#34;
        --&amp;gt;

&amp;lt;xsl:template name=&amp;#34;contact&amp;#34;&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;javascript:alert(&amp;#39;{@type}&amp;#39;)&amp;#34; title=&amp;#34;{@type}&amp;#34; id=&amp;#34;contact-{@type}-sitelink&amp;#34;&amp;gt;
            &amp;lt;img alt=&amp;#34;{@type}&amp;#34; src=&amp;#34;{@type}.ico&amp;#34; id=&amp;#34;contact-{@type}-icon&amp;#34; class=&amp;#34;contact-icon&amp;#34; /&amp;gt;
        &amp;lt;/a&amp;gt;
        &amp;lt;xsl:if test=&amp;#34;c:name&amp;#34;&amp;gt;
            &amp;lt;a href=&amp;#34;javascript:alert(&amp;#39;{@type}:{c:id}&amp;#39;);&amp;#34; id=&amp;#34;contact-{@type}-link&amp;#34; title=&amp;#34;{c:id}&amp;#34; alt=&amp;#34;{c:name}&amp;#34; class=&amp;#34;contact-link&amp;#34;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;#34;c:name&amp;#34;/&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/xsl:if&amp;gt;
        &amp;lt;xsl:if test=&amp;#34;not(c:name)&amp;#34;&amp;gt;
            &amp;lt;a href=&amp;#34;javascript:alert(&amp;#39;{@type}:{c:id}&amp;#39;);&amp;#34; id=&amp;#34;contact-{@type}-link&amp;#34; title=&amp;#34;{c:id}&amp;#34; alt=&amp;#34;{c:id}&amp;#34; class=&amp;#34;contact-link&amp;#34;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;#34;c:id&amp;#34;/&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/xsl:if&amp;gt;
        &amp;lt;span class=&amp;#34;contact-type&amp;#34;&amp;gt;(&amp;lt;xsl:value-of select=&amp;#34;@type&amp;#34;/&amp;gt;)&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match=&amp;#34;/c:contacts&amp;#34;&amp;gt;
    &amp;lt;ul id=&amp;#34;contacts&amp;#34;&amp;gt;
    &amp;lt;xsl:for-each select=&amp;#34;./c:contact&amp;#34;&amp;gt;
        &amp;lt;xsl:call-template name=&amp;#34;contact&amp;#34; /&amp;gt;
    &amp;lt;/xsl:for-each&amp;gt;
    &amp;lt;xsl:for-each select=&amp;#34;./c:group&amp;#34;&amp;gt;
        &amp;lt;li&amp;gt;
            &amp;lt;xsl:if test=&amp;#34;c:name&amp;#34;&amp;gt;
                &amp;lt;span class=&amp;#34;contact-group-name&amp;#34;&amp;gt;&amp;lt;xsl:value-of select=&amp;#34;c:name&amp;#34;/&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
            &amp;lt;ul id=&amp;#34;{@shortname}&amp;#34;&amp;gt;
                &amp;lt;xsl:for-each select=&amp;#34;./c:contact&amp;#34;&amp;gt;
                    &amp;lt;xsl:call-template name=&amp;#34;contact&amp;#34; /&amp;gt;
                &amp;lt;/xsl:for-each&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/xsl:for-each&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате преобразования получается такой блок XHTML:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/client-xml-xslt-xhtml-browsers/xml-rendering-result.jpg&#34; alt=&#34;XHTML Rendering Result&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascript&#34;&gt;&lt;a href=&#34;#javascript&#34; title=&#34;JavaScript&#34;&gt;JavaScript&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Настало время выполнить само преобразование на стороне клиента. В этом абзаце придётся использовать немного больше хитростей, ввиду того, что каждый браузер предлагает это делать по-своему.&lt;/p&gt;
&lt;h3 id=&#34;загрузка-xml-файлов&#34;&gt;&lt;a href=&#34;#загрузка-xml-файлов&#34; title=&#34;Загрузка XML-файлов&#34;&gt;Загрузка XML-файлов&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для начала нам потребуется загрузить оба файла — XML и XSLT. По своей природе они оба — файлы XML,  Internet Explorer предоставляет для этих целей ActiveX-объект &lt;code&gt;XMLDOM&lt;/code&gt;, Firefox и Opera — фунцию &lt;code&gt;createDocument&lt;/code&gt;, позволяющую загрузить XML-файл в созданный объект. Safari и Chrome (&lt;em&gt;Читай:&lt;/em&gt; WebKit), однако, предоставляя эту же функцию, возвращают объект, не поддерживающий загрузку — опять же, вполне разумно, в соответствии со спецификациями W3C.&lt;/p&gt;
&lt;h4 id=&#34;метод-1.-xmlhttprequest&#34;&gt;&lt;a href=&#34;#метод-1.-xmlhttprequest&#34; title=&#34;Метод 1. XMLHttpRequest&#34;&gt;Метод 1. XMLHttpRequest&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Поэтому, плюнув на всё, мы можем загружать файлы через &lt;code&gt;XMLHttpRequest&lt;/code&gt; (&lt;em&gt;синхронный&lt;/em&gt; или нет — по вашему выбору), используя всем известный шаблон AJAX.&lt;/p&gt;

&lt;p&gt;Предложу вам свою версию, вы же можете использовать &lt;a href=&#34;http://ajaxpatterns.org/XMLHttpRequest_Call&#34;&gt;какую только заблагорассудится&lt;/a&gt;.  Моя версия отличается тем, что принимает в параметры функцию, которая будет вызвана при успешном завершении вызова, позволяет делать и &lt;code&gt;POST&lt;/code&gt; и &lt;code&gt;GET&lt;/code&gt; запросы, позволяет передавать объекты и позволяет делать синхронный вызов (тогда она возвращает объект по его завершению).&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/**
 * Browser-independent [A]JAX call
 *
 * @param {String} locationURL an URL to call, without parameters
 * @param {String} [parameters=null] a parameters list, in the form
 *        &amp;#39;param1=value1&amp;amp;param2=value2&amp;amp;param3=value3&amp;#39;
 * @param {Function(XHMLHTTPRequest, Object)} [onComplete=null] a function that
 *        will be called when the response (responseText or responseXML of
 *        XHMLHTTPRequest) will be received
 * @param {Boolean} [doSynchronous=false] make a synchronous request (onComplete
 *        will /not/ be called)
 * @param {Boolean} [doPost=false] make a POST request instead of GET
 * @param {Object} [dataPackage=null] any object to transfer to the onComplete
 *        listener
 * @return {XHMLHTTPRequest} request object, if no exceptions occured
 */
function makeRequest(locationURL, parameters, onComplete, doSynchronous, doPost, dataPackage) {

    var http_request = false;
    try {
        http_request = new ActiveXObject(&amp;#34;Msxml2.XMLHTTP&amp;#34;);
    } catch (e1) {
        try {
            http_request= new ActiveXObject(&amp;#34;Microsoft.XMLHTTP&amp;#34;);
        } catch (e2) {
            http_request = new XMLHttpRequest();
        }
    }

    //if (http_request.overrideMimeType) { // optional
    //  http_request.overrideMimeType(&amp;#39;text/xml&amp;#39;);
    //}

    if (!http_request) {
      alert(&amp;#39;Cannot create XMLHTTP instance&amp;#39;);
      return false;
    }

    if (onComplete &amp;amp;&amp;amp; !doSynchronous) {
        completeListener = function() {
            if (http_request.readyState == 4) {
                if (http_request.status == 200) {
                    onComplete(http_request, dataPackage)
                }
            }
        };
        http_request.onreadystatechange = completeListener;
    }

    //var salt = hex_md5(new Date().toString());
    if (doPost) {
        http_request.open(&amp;#39;POST&amp;#39;, locationURL, !doSynchronous);
        http_request.setRequestHeader(&amp;#34;Content-type&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;);
        http_request.setRequestHeader(&amp;#34;Content-length&amp;#34;, parameters.length);
        http_request.setRequestHeader(&amp;#34;Connection&amp;#34;, &amp;#34;close&amp;#34;);
        http_request.send(parameters);
    } else {
        http_request.open(&amp;#39;GET&amp;#39;, locationURL + (parameters ? (&amp;#34;?&amp;#34; + parameters) : &amp;#34;&amp;#34;), !doSynchronous);
        //http_request.open(&amp;#39;GET&amp;#39;, &amp;#39;./proxy.php?&amp;#39; + parameters +
                    // &amp;#34;&amp;amp;salt=&amp;#34; + salt, true);
        http_request.send(null);
    }

    return http_request;

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;При использовании этого метода, функция загрузки XML будет выглядеть довольно просто — например, так:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/**
 * Loads any XML using synchronous XMLHttpRequest call.
 * @param {String} fileName name of the file to be loaded
 * @return {XMLDocument|Object}
 */
function loadXML(fileName) {
                                              // no parameters, no handler, but synchronous
    var request = makeRequest(fileName, null, null, true);
    return request.responseXML;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;метод-2.-в-зависимости-от-браузера&#34;&gt;&lt;a href=&#34;#метод-2.-в-зависимости-от-браузера&#34; title=&#34;Метод 2. В зависимости от браузера&#34;&gt;Метод 2. В зависимости от браузера&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Однако, если вы хотите использовать именно те способы, которые (как ни забавно) &lt;a href=&#34;http://www.w3schools.com/xsl/xsl_client.asp&#34;&gt;рекомендуются&lt;/a&gt; на W3Schools, функцию &lt;code&gt;loadXML&lt;/code&gt; придётся усложнить, потому что приведённые на W3Schoolds примеры не работают на браузерах WebKit (&lt;em&gt;Читай:&lt;/em&gt; Safari и Chrome). Пусть это будет, так сказать, &lt;em&gt;«рекомендованный вид»&lt;/em&gt;. Подозреваю, правда, что все эти обходы скрывают под собой те же вызовы XMLHttpRequest, поэтому, если вы не сторонник неоправданных действий, пропустите этот раздел.&lt;/p&gt;

&lt;p&gt;Итак, функция будет делать прямой синхронный вызов XHMHttpRequest (вернее, функции описанной в предыдущем разделе) только в случае вызова из Safari, в остальных же случаях прибегать к средствам конкретного браузера (Не забываем правило: &lt;em&gt;Никаких прямых проверок браузера, только проверка, поддерживается ли вызываемая функция&lt;/em&gt;):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/**
 * Loads any XML document using ActiveX (for IE) or createDocumentFunction (for
 * other browsers)
 * @param {String} fileName name of the file to be loaded
 * @return {XMLDocument|Object}
 */
function loadXML(fileName) { // http://www.w3schools.com/xsl/xsl_client.asp
    var xmlFile = null;

    if (window.ActiveXObject) { // IE
        xmlFile = new ActiveXObject(&amp;#34;Microsoft.XMLDOM&amp;#34;);
    } else if (document.implementation
            &amp;amp;&amp;amp; document.implementation.createDocument) { // Mozilla, Firefox, Opera, etc.
        xmlFile = document.implementation.createDocument(&amp;#34;&amp;#34;,&amp;#34;&amp;#34;,null);
        if (!xmlFile.load) { // Safari lacks on this method,
           // so we make a synchronous XMLHttpRequest
            var request = makeRequest(fileName, null, null, true);
            return request.responseXML;
        }
    } else {
        alert(&amp;#39;Your browser cannot create XML DOM Documents&amp;#39;);
    }
    xmlFile.async = false;
    try {
        xmlFile.load(fileName);
    } catch(e) {
        alert(&amp;#39;an error occured while loading XML file &amp;#39; + fileName);
    }
    return(xmlFile);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В результате, функция возвращает XML-объект по заданному имени файла. Можно приступать собственно к трансформации.&lt;/p&gt;
&lt;h3 id=&#34;преобразование-через-xslt&#34;&gt;&lt;a href=&#34;#преобразование-через-xslt&#34; title=&#34;Преобразование через XSLT&#34;&gt;Преобразование через XSLT&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Преобразованием будет заниматься ещё одна функция, которая будет принимать в качестве аргументов пути к XML-файлу и XSL-файлу. Загружать эти файлы она будет описанной выше функцией  &lt;code&gt;loadXML&lt;/code&gt;. А возвращать эта функция будет строку с XHTML-кодом, который можно будет вставить прямо в &lt;code&gt;innerHTML&lt;/code&gt; нужного элемента.&lt;/p&gt;

&lt;p&gt;Почему строку? Потому что метод &lt;code&gt;transformFragment&lt;/code&gt; объекта &lt;code&gt;XSLTProcessor&lt;/code&gt; не поддерживает рендеринг XML (&lt;code&gt;xsl:output method=&amp;quot;xml&amp;quot;&lt;/code&gt;), а поддерживает только HTML (&lt;code&gt;xsl:output method=&amp;quot;html&amp;quot;&lt;/code&gt;). В результате преобразования с &lt;code&gt;xsl:output method=&amp;quot;xml&amp;quot;&lt;/code&gt; и &lt;code&gt;transformFragment&lt;/code&gt; генерируется корректный &lt;code&gt;DocumentFragment&lt;/code&gt;, который, однако, при вставке в XHTML-код действует как некая XML-нода — поэтому визуально виден только, так называемый, &lt;code&gt;plain text&lt;/code&gt;. Если вас не смущает потеря пространств имён, вы можете изменить &lt;code&gt;xsl:output method&lt;/code&gt; на &lt;code&gt;html&lt;/code&gt; и использовать &lt;code&gt;transformFragment&lt;/code&gt;, добившись в результате, чтобы функция возвращала &lt;code&gt;DocumentFragment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В случае Internet Explorer используется функция &lt;code&gt;transformNode&lt;/code&gt; XML-объекта, в остальных браузерах используется &lt;code&gt;XSLTProcessor&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/**
 * Applies specified XSL stylesheet to the specified XML file and returns
 * the result as a string. ActiveX is used in IE, otherwise, XSLTProcessor
 * is used.
 * @param {String} xmlFileName path to the xml file to be transformed
 * @param {String} xslFileName path to the xsl file to be applied to the xml
 * @return {String} xsl transformation result as a text
 */
function getStylingResult(xmlFileName, xslFileName) {
    var xmlContent = loadXML(xmlFileName);
    var xslContent = loadXML(xslFileName);
    if (window.ActiveXObject) { // IE
        return xmlContent.transformNode(xslContent);
    } else if (window.XSLTProcessor) { // Mozilla, Firefox, Opera, Safari etc.
        var xsltProcessor=new XSLTProcessor();
        xsltProcessor.importStylesheet(xslContent);
        // return xsltProcessor.transformToFragment(xmlContent, document);
            // somehow, transformToFragment works incorrectly, recognizing the
            // result of transformation as xml, not html, because
            // xsl:output=&amp;#34;xhtml&amp;#34; is still not supported, and for xhtml
            // xsl:output=&amp;#34;xml&amp;#34; is used
            // (xsl:output=&amp;#34;html&amp;#34; strips namespaces)
            // see: http://osdir.com/ml/mozilla.devel.layout.xslt/2003-10/msg00008.html
            // also, see: https://developer.mozilla.org/en/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations
        var resultDocument = xsltProcessor.transformToDocument(xmlContent);
        var xmls = new XMLSerializer();
        return xmls.serializeToString(resultDocument);
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;итог&#34;&gt;&lt;a href=&#34;#итог&#34; title=&#34;Итог&#34;&gt;Итог&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Всё, весь необходимый код готов и вы можете использовать функцию &lt;code&gt;getStylingResult&lt;/code&gt; для преобразования XML-файлов и вставки результата в XHTML. Например, таким образом:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
document.getElementById(&amp;#39;content&amp;#39;).innerHTML =
            getStylingResult(&amp;#39;./contacts.xml&amp;#39;, &amp;#39;./contacts.xsl&amp;#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Как итог, мы получили действительно кросс-браузерную версию обработки XML на клиенте. Спасибо за внимание.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Для того, чтобы иметь возможность передавать параметры XSL-шаблону через метод &lt;code&gt;addParameter&lt;/code&gt;, в качестве документа XSL нужно использовать экземпляр &lt;code&gt;Msxml2.FreeThreadedDOMDocument.3.0&lt;/code&gt;, а не обычный &lt;code&gt;Microsoft.XMLDOM&lt;/code&gt;. Если вам это необходимо, обратитесь к &lt;a href=&#34;http://www.mindlence.com/WP/?page_id=224&#34;&gt;данной статье&lt;/a&gt; (вам потребуется перегрузить функцию &lt;code&gt;loadXML&lt;/code&gt; из моего примера).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.P.S.&lt;/strong&gt; И да, с использованием JQuery всё &lt;a href=&#34;http://johannburkard.de/software/xsltjs/&#34;&gt;делается&lt;/a&gt; &lt;a href=&#34;http://jquery.glyphix.com/&#34;&gt;проще&lt;/a&gt;, но ведь иногда приходится обходиться без JQuery&amp;hellip;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Java + JSON</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/java-and-json/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/java-and-json/</id>
                <updated>2008-05-25T00:46:00Z</updated>
                
                
                <content type="html">&lt;h3 id=&#34;введение&#34;&gt;&lt;a href=&#34;#введение&#34; title=&#34;Введение&#34;&gt;Введение&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Спешу поделиться результатами небольшого исследования, оказавшегося необходимым для текущего проекта. Рассматривается возможность связки Java и JSON, её преимущества и недостатки. Я расскажу о практической части, о теории больше поведают нижеприведённые ссылки (&lt;em&gt;англ.&lt;/em&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hunlock.com/blogs/Mastering_JSON_(_JavaScript_Object_Notation_)&#34;&gt;Mastering JSON&lt;/a&gt; &amp;ndash; самая приятная статья по JSON, описывающая все основные принципы и дополнительные возможности&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/xml/library/wa-ajaxintro10/&#34;&gt;Использование JSON для передачи данных посредством AJAX&lt;/a&gt; в статье от IBM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.json.org/js.html&#34;&gt;Описание&lt;/a&gt; связи JSON и JavaScript на официальном сайте&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://json.org/java/simple.txt&#34;&gt;Краткое описание&lt;/a&gt; скрещивания JSON и Java на официальном сайте&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://json.org/java/&#34;&gt;Java-классы&lt;/a&gt; на официальном сайте&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/library/j-ajax2/&#34;&gt;Способы сериализации&lt;/a&gt; Java-объектов в статье от IBM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twit88.com/blog/2007/11/20/serialize-java-object-to-json-string/&#34;&gt;И ещё&lt;/a&gt; о сериализации JSON-объектов в строку&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsontools.berlios.de/&#34;&gt;JSONTools&lt;/a&gt; для Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Если кратко &amp;ndash; JSON (JavaScript Object Notation) не является ничем более сложным, чем описано в его названии. Если вы можете описать сложно-структурированный объект на JavaScript &amp;ndash; то о клиентской стороне JSON вы знаете практически всё. Серверная часть JSON занимается тем, что принимает каким-либо способом объект, записанный в нотации JavaScript и разворачивает данные таким образом (наверное можно сказать, десериализует), чтобы они стали доступны (или хотя бы понятны :) ) остальной части кода.&lt;/p&gt;

&lt;p&gt;Не скажу корректно о других языках, но для Java код приёма объекта вам придётся написать самим (если только я не пропустил что-то очевидное) &amp;ndash; ну и это не так сложно, поскольку всё необходимое &lt;a href=&#34;http://json.org/java/&#34;&gt;для разворачивания объекта&lt;/a&gt; доступно на &lt;a href=&#34;http://json.org/&#34;&gt;сайте JSON&lt;/a&gt;. Ммм, я сказал только &amp;ldquo;разворачивания&amp;rdquo;? Простите, и сворачивания тоже. Засчёт приведённого кода вы можете, например, создать Java-проекцию объекта в JavaScript-нотации (далее — JSON-объект) из &lt;code&gt;JavaBean&lt;/code&gt;‘а (с некоторыми оговорками, о которых ниже), из &lt;code&gt;java.util.Map&lt;/code&gt;, или, собственно, из строки в этой нотации.&lt;/p&gt;

&lt;p&gt;Я не буду приводить примеров объектов на JSON, их доступно изрядно по ссылкам выше, да и зная JavaScript, как я уже говорил &amp;ndash; вы знаете JSON. Обращу ваше внимание на то, что с передачей JSON-объектов следует быть осторожными и всё время помнить, что недоброжелатель, знающий серверные технологии и JavaScript, если захочет &amp;ndash; эту лазейку, наверное, найдёт в первую очередь. Вспоминайте ваши любимые методы JavaScript и Java-секьюрности &amp;ndash; это несколько сторонняя тема, об этом я здесь рассказывать не буду. И, кстати, передача JSON-объектов — это ещё и &lt;a href=&#34;http://json-rpc.org/wd/JSON-RPC-1-1-WD-20060807.html&#34;&gt;протокол&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;описание&#34;&gt;&lt;a href=&#34;#описание&#34; title=&#34;Описание&#34;&gt;Описание&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Итак, практика. Я выбрал путь общего Java-сервлета для принятия (или раздачи) всех JSON-объектов в приложении и менеджера, ему их подготавливающего (или от него их принимающего). Для того, чтобы было легче создавать JSON-объекты на основе Java-объектов я выбрал путь JavaBean‘ов, JSON для Java умеет на их основе (засчет геттеров) создавать JSON-объект, а нам достаточно написать код для обратного действия. Для объектов со сложной структурой наверняка понадобится эти методы переопределять, поэтому я выделил их в отдельный абстрактный класс, который должен стать отцом для всех объектов, которые будут передаваться между сервером и клиентом. В качестве бонуса, в конце статьи представлены несколько кривенькие, но читабельные, диаграмма классов и диаграмма последовательностей этой небольшой конструкции.&lt;/p&gt;
&lt;h3 id=&#34;процесс&#34;&gt;&lt;a href=&#34;#процесс&#34; title=&#34;Процесс&#34;&gt;Процесс&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В первую очередь соберём &lt;code&gt;jar&lt;/code&gt;-библиотеку JSON, поскольку для Java этот пакет поставляется &lt;a href=&#34;http://www.json.org/java/json.zip&#34;&gt;в исходниках&lt;/a&gt; (описание сборки позаимствовано &lt;a href=&#34;http://processing.org/discourse/yabb_beta/YaBB.cgi?board=Integrate;action=display;num=1163101573&#34;&gt;отсюда&lt;/a&gt; и вы можете спокойно пропустить эту часть, если свободно собираете &lt;code&gt;jar&lt;/code&gt;‘ы из исходников или вам это не требуется):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Сохраните &lt;a href=&#34;http://www.json.org/java/json.zip&#34;&gt;пакет&lt;/a&gt; в какой-либо каталог, который будет далее называться &lt;code&gt;%DOWNLOAD_HOME%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Распакуйте его и убедитесь, что структура каталогов (&lt;code&gt;/org/json/&lt;/code&gt;) не изменилась.&lt;/li&gt;
&lt;li&gt;Перейдите в каталог &lt;code&gt;%DOWNLOAD_HOME%/org/json/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Скомпилируйте классы командой &lt;code&gt;javac *.java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Вернитесь в каталог &lt;code&gt;%DOWNLOAD_HOME%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Командой &lt;code&gt;jar -cvf json.jar org\json\*.class&lt;/code&gt; создайте &lt;code&gt;jar&lt;/code&gt;-архив.&lt;/li&gt;
&lt;li&gt;Добавьте библиотеку в ваш проект&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Теперь приведу код интерфейса &lt;code&gt;IJSONSerializable&lt;/code&gt; (объекта, который может быть свёрнут в &lt;code&gt;JSON&lt;/code&gt; и развернут обратно &amp;ndash; думаю, это довольно корректно) и абстрактного класса &lt;code&gt;JSONBean&lt;/code&gt;, который его имплементирует.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package com.acme.json;

import org.json.JSONObject;

public interface IJSONSerializable {

    public boolean fromJSONObj(JSONObject object);

    public JSONObject toJSONObject();

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Обратите внимание, что в стандартной версии JSON по геттерам считает за пары ключ-свойство значения некоторых недозволенных методов, например, &lt;code&gt;getClass&lt;/code&gt; и &lt;code&gt;getInstance&lt;/code&gt; — нижеприведённый класс этот недостаток (в случае указанных методов) обходит и, собственно, добавляет функциональность конструирования (а в данном случае правильнее &amp;ndash; инициализации) &lt;code&gt;Bean&lt;/code&gt;‘а из JSON-объекта. Да, здесь, иcпользуется &lt;code&gt;reflection&lt;/code&gt;, и если вас не устраивает этот факт &amp;ndash; вы вольны поменять концепцию :) &amp;ndash; JSON выстраивает свой объект из &lt;code&gt;Bean&lt;/code&gt;‘а точно таким же способом.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package com.acme.json;

import java.lang.reflect.Method;

import org.json.JSONException;
import org.json.JSONObject;

public abstract class JSONBean implements IJSONSerializable {

    public boolean fromJSONObj(JSONObject jsonObj) {
        Class beanClass = this.getClass();
        Method[] methods = beanClass.getMethods();
        for (int i = 0;  i &amp;lt; methods.length; i += 1) {
            try {
                Method method = methods[i];
                String name = method.getName();
                String key = &amp;#34;&amp;#34;;
                if (name.startsWith(&amp;#34;set&amp;#34;)) {
                    key = name.substring(3);
                }
                if (key.length() &amp;gt; 0 &amp;amp;&amp;amp;
                        Character.isUpperCase(key.charAt(0)) &amp;amp;&amp;amp;
                        method.getParameterTypes().length == 1) {
                    if (key.length() == 1) {
                        key = key.toLowerCase();
                    } else if (!Character.isUpperCase(key.charAt(1))) {
                        key = key.substring(0, 1).toLowerCase() +
                            key.substring(1);
                    }
                    if (isAllowedKey(key))
                        method.invoke(this, jsonObj.get(key));
                }
            } catch (Exception e) {
                return false;
            }
        }
        return true;
    }

    public JSONObject toJSONObject() {
        return new JSONObject(this) {
            @Override
            public Object get(String key) throws JSONException {
                return isAllowedKey(key) ? super.get(key) : null;
            }
        };
    }

    protected static boolean isAllowedKey(String key) {
        return ((key != &amp;#34;class&amp;#34;) &amp;amp;&amp;amp; (key != &amp;#34;instance&amp;#34;));
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ну, и простенький пример &lt;code&gt;Bean&lt;/code&gt;‘а, с которым мы будем работать.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package com.acme.json.beans;

import com.acme.json.JSONBean;

public class PersonBean extends JSONBean {

    private String personFirstName = &amp;#34;Homer&amp;#34;;
    private String personLastName = &amp;#34;Simpson&amp;#34;;
    private int personAge = 46;

    public String getPersonFirstName() {
        return personFirstName;
    }

    public void setPersonFirstName(String personFirstName) {
        this.personFirstName = personFirstName;
    }

    public String getPersonLastName() {
        return personLastName;
    }

    public void setPersonLastName(String personLastName) {
        this.personLastName = personLastName;
    }

    public int getPersonAge() {
        return personAge;
    }

    public void setPersonAge(int personAge) {
        this.personAge = personAge;
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;JSONBeanManager&lt;/code&gt; управляет подготовкой &lt;code&gt;Bean&lt;/code&gt;‘ов для отправки и принятия их на основе параметров запроса. Думаю, концентрация этого кода в одном месте оправдана, поскольку вы вряд ли захотите, чтобы отвечающий за пересылку &lt;code&gt;Bean&lt;/code&gt;‘ов код был разбросан по проекту. В худших случаях паттерны проектирования придут вам на помощь. Кстати, возможно вы захотите сделать некоторые ваши &lt;code&gt;Bean&lt;/code&gt;‘ы &lt;code&gt;Singleton&lt;/code&gt;‘ами, тогда здесь вы можете возвращать их единственные инстансы (не забудьте только, что в связи с этим их нужно аккуратнее готовить :) ).&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package com.acme.json;

import java.util.Map;

import com.acme.json.beans.PersonBean;

public class JSONBeanManager {

    protected JSONBean prepareBeanForReceiving(Map parametersMap) {
        if (parametersMap.containsKey(&amp;#34;source&amp;#34;) &amp;amp;&amp;amp;
           (parametersMap.get(&amp;#34;source&amp;#34;) == &amp;#34;sampleBean&amp;#34;)) {
            return new PersonBean();
        }
        return null;
    }

    protected JSONBean prepareBeanForSending(Map parametersMap) {
        if (parametersMap.containsKey(&amp;#34;source&amp;#34;) &amp;amp;&amp;amp;
           (parametersMap.get(&amp;#34;source&amp;#34;) == &amp;#34;sampleBean&amp;#34;)) {
            return new PersonBean();
        }
        return null;
    }

    protected void onBeanReceived(JSONBean bean) { }

    protected void onBeanSent(JSONBean bean) { }

    protected void onBeanTransferError() { }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ну и наконец &amp;ndash; сервлет. Ядро пересылки. Запрос &lt;code&gt;GET&lt;/code&gt; на сервер отправляет клиенту &lt;code&gt;Bean&lt;/code&gt;, отданный менеджером на основе анализа параметров запроса, а затем сконвертированный в JSON-объект, а &lt;code&gt;POST&lt;/code&gt; &amp;ndash; принимает и заполняет предоставленный тем же менеджером &lt;code&gt;Bean&lt;/code&gt; полученными из JSON-объекта данными.&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package com.acme.json;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONException;
import org.json.JSONObject;

public class JSONBeanServlet extends HttpServlet {

    protected static final String JSON_OBJ_PARAM = &amp;#34;jsonBean&amp;#34;;

    private JSONBeanManager beanManager = null;

    public JSONBeanServlet(/*Class beanManagerClass*/) {
        super();
        this.beanManager = new JSONBeanManager();
    }

    @Override
    public void doGet(HttpServletRequest req,
            HttpServletResponse resp)
            throws java.io.IOException, ServletException {
        JSONBean activeBean =
            beanManager.prepareBeanForSending(req.getParameterMap());
        if (activeBean != null) {
            resp.setContentType(&amp;#34;application/x-json&amp;#34;);
            resp.getWriter().print(activeBean.toJSONObject());
            beanManager.onBeanSent(activeBean);
        } else {
            beanManager.onBeanTransferError();
            // throw new ServletException(&amp;#34;JSONBeanServlet got no bean for sending&amp;#34;);
        }
    }

    @Override
    protected void doPost(HttpServletRequest req,
            HttpServletResponse resp)
            throws ServletException, IOException {

        JSONBean activeBean =
            beanManager.prepareBeanForReceiving(req.getParameterMap());

        if (activeBean != null) {
            String jsonText = req.getParameter(JSON_OBJ_PARAM);
            JSONObject jsonObj = null;
            try {
                jsonObj = new JSONObject(jsonText);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            activeBean.fromJSONObj(jsonObj);

            beanManager.onBeanReceived(activeBean);

        } else {
            beanManager.onBeanTransferError();
            // throw new ServletException(&amp;#34;JSONBeanServlet got no bean for receiving&amp;#34;);
        }

    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для завершения описания серверной части следует напомнить о добавлении сервлета в &lt;code&gt;web.xml&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
 &amp;lt;web-app xmlns=&amp;#34;http://java.sun.com/xml/ns/j2ee&amp;#34;
          xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
          xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/j2ee
    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&amp;#34;
    version=&amp;#34;2.4&amp;#34;&amp;gt;

    &amp;lt;display-name&amp;gt;SomeAplication&amp;lt;/display-name&amp;gt;

    . . .

    &amp;lt;servlet&amp;gt;
        &amp;lt;description&amp;gt;JSON Beans Manage Servlet&amp;lt;/description&amp;gt;
        &amp;lt;display-name&amp;gt;JSON Beans Servlet&amp;lt;/display-name&amp;gt;
        &amp;lt;servlet-name&amp;gt;JSON Beans Servlet&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;
            com.acme.json.FNJSONBeanServlet
        &amp;lt;/servlet-class&amp;gt;
    &amp;lt;/servlet&amp;gt;

    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;JSON Beans Servlet&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/jsonBean/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;

    . . .

&amp;lt;/web-app&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Клиентская часть состоит, собственно из &lt;a href=&#34;http://www.json.org/json2.js&#34;&gt;JSON-парсера-конструктора&lt;/a&gt; (да, всё это можно сделать через &lt;code&gt;eval()&lt;/code&gt;, но предоставленный разработчиками код делает это, по их обещаниям, аккуратнее) и, в моём случае, класса, облегчающего работу с сервлетом. Класс использует немного модифицированную функцию &lt;code&gt;makeRequest&lt;/code&gt; из &lt;a href=&#34;?16-really-useful-javascript-solutions&#34;&gt;статьи о решениях JavaScript&lt;/a&gt; (которую я обновлю до этой версии там сразу же после написания статьи) и обеспечивающие ООП функции &lt;code&gt;Class&lt;/code&gt; [&lt;a href=&#34;../16-useful-solutions-for-javascript#sol-1&#34;&gt;1&lt;/a&gt;] и &lt;code&gt;createMethodReference&lt;/code&gt; [&lt;a href=&#34;../16-useful-solutions-for-javascript#sol-2&#34;&gt;2&lt;/a&gt;] оттуда же.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var JSONManager = Class.extend({

    JSON_BEAN_SERVLET_PATH: &amp;#34;./jsonBean&amp;#34;,
    JSON_BEAN_PARAM_NAME: &amp;#34;jsonBean&amp;#34;,

    construct:
        function() {
            this._handlerFuncRef =
                createMethodReference(this, &amp;#34;_responseHandler&amp;#34;);
        },

    requestJSONBean: function(handlerFunc, addParams) {
        makeRequest(this.JSON_BEAN_SERVLET_PATH, addParams,
                this._handlerFuncRef, handlerFunc);
    },

    sendJSONBean: function(jsonBean, addParams) {
        makeRequest(this.JSON_BEAN_SERVLET_PATH,
                this.JSON_BEAN_PARAM_NAME + &amp;#34;=&amp;#34; +
                JSON.stringify(jsonBean) + (addParams ?
                (&amp;#34;&amp;amp;&amp;#34; + addParams) : &amp;#34;&amp;#34;), null, true);
    },

    _responseHandler: function(http_request, handlerFunc) {
        handlerFunc(JSON.parse(http_request.responseText));
    }

});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ну и в завершение &amp;ndash; пример использующего всё вышеприведённое кода:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
    var alexanderJSON =
        {&amp;#34;personFirstName&amp;#34;:    &amp;#34;Alexander&amp;#34;,
         &amp;#34;personLastName&amp;#34;:     &amp;#34;Makedonsky&amp;#34;,
         &amp;#34;personAge&amp;#34;:             35,
        };

    var jsonManager = new JSONManager();
    jsonManager.sendJSONBean(alexanderJSON, &amp;#34;source=SampleBean&amp;#34;);

    var homerJSON = null;
    function onGotObject(http_request) {
        homerJSON = JSON.parse(http_request.responseText);
    }
    jsonManager.requestJSONBean(onGotObject, &amp;#34;source=SampleBean&amp;#34;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В качестве альтернативных идей &amp;ndash; методы &lt;code&gt;JSONBeanManager&lt;/code&gt;‘а можно сделать статическими, а &lt;code&gt;JSONBean&lt;/code&gt; научить приготавливать самого себя к отправке (инициировать данными) &amp;ndash; но при сложной структуре менеджера и требовании комплексной подготовки, когда &lt;code&gt;Bean&lt;/code&gt; не может подготовить сам себя &amp;ndash; придётся от них отказаться. Однако, поскольку выбор &lt;code&gt;Bean&lt;/code&gt;‘а по параметрам будет общим и для передачи и для приёма &amp;ndash; код выбора можно вынести и в отдельный метод.&lt;/p&gt;
&lt;h3 id=&#34;заключение&#34;&gt;&lt;a href=&#34;#заключение&#34; title=&#34;Заключение&#34;&gt;Заключение&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Кажется, задача ознакомления выполнена и я со спокойной совестью, надеюсь, могу идти делать другие дела (я помню про обновление функции :) ). Если совесть должна быть неспокойна &amp;ndash; обязательно сообщайте, я стараюсь исправлять ошибки в своих статьях &amp;ndash; и даже те, которые, изредка, сам нахожу со временем. Приятной вам разработки.&lt;/p&gt;
&lt;h3 id=&#34;пояснительные-изображения&#34;&gt;&lt;a href=&#34;#пояснительные-изображения&#34; title=&#34;Пояснительные изображения&#34;&gt;Пояснительные изображения&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://shamansir.github.com/blog/ru/figures/java-and-json/json-package-structure.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/java-and-json/json-package-structure-thumb.png&#34; alt=&#34;JSON Classes Structure&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://shamansir.github.com/blog/ru/figures/java-and-json/json-action-diagram.png&#34;&gt;&lt;img src=&#34;http://shamansir.github.com/blog/ru/figures/java-and-json/json-action-diagram-thumb.png&#34; alt=&#34;JSON Action Diagram&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Trac + Subversion @ Ubuntu: Revisited</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/trac-subversion-ubuntu-revisited/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/trac-subversion-ubuntu-revisited/</id>
                <updated>2008-03-17T00:46:00Z</updated>
                
                
                <content type="html">&lt;h3 id=&#34;задача&#34;&gt;&lt;a href=&#34;#задача&#34; title=&#34;Задача&#34;&gt;Задача&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Установить на только что инсталлированный Ubuntu последнюю версию Trac, создать репозитории для нескольких проектов и настроить окружение соответственно. Структура проектов должна быть полностью корректной, установка максимально быстрой при минимальном количестве пакетов. Авторизация в репозитории и окружения Trac может быть общей, но позволяющей индивидуальную настройку для каждого проекта. Также, установка должна быть максимально независима от версий.&lt;/p&gt;
&lt;h3 id=&#34;дано&#34;&gt;&lt;a href=&#34;#дано&#34; title=&#34;Дано&#34;&gt;Дано&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; &lt;em&gt;(12.11.2009)&lt;/em&gt; Сценарий работает и для новых версий Ubuntu/Debian, Python, Trac - заменив версии в ссылках на более новые, можно оставить всё остальное как есть. Устанавливать SQLite из исходников не обязательно, подойдёт и обычная установка через &lt;code&gt;sudo apt-get install sqlite3&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 7.04 &lt;em&gt;Feisty Fawn Herd&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Trac 0.11b2&lt;/li&gt;
&lt;li&gt;Subversion 1.4.3&lt;/li&gt;
&lt;li&gt;Два пользователя: &lt;code&gt;user1&lt;/code&gt; и &lt;code&gt;user2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Два проекта: &lt;code&gt;Some Project&lt;/code&gt; и &lt;code&gt;Another Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Требуется доступ в Trac и репозиторий по адресам &lt;code&gt;&amp;lt;host&amp;gt;/localProjects&lt;/code&gt; и &lt;code&gt;&amp;lt;host&amp;gt;/svn&lt;/code&gt; соотвественно&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;решение&#34;&gt;&lt;a href=&#34;#решение&#34; title=&#34;Решение&#34;&gt;Решение&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;пункт-1.-установка-базовых-дистрибутивов-доступных-в-пакетах.&#34;&gt;&lt;a href=&#34;#пункт-1.-установка-базовых-дистрибутивов-доступных-в-пакетах.&#34; title=&#34;Пункт 1. Установка базовых дистрибутивов, доступных в пакетах.&#34;&gt;Пункт 1. Установка базовых дистрибутивов, доступных в пакетах.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Для начала можно установить дистрибутивы, доступные в репозиториях Ubuntu в поддерживаемых версиях &amp;ndash; на данный момент это &lt;a href=&#34;http://apache.org/&#34;&gt;Apache&lt;/a&gt; 2.2.3, &lt;a href=&#34;http://python.org/&#34;&gt;Python&lt;/a&gt; 2.5.1 (необходим для работы trac), &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt; 1.4.3 и &lt;a href=&#34;http://gcc.gnu.org/&#34;&gt;g++&lt;/a&gt; 4.1.2 (необходим для сборки sqlite). Установим, предварительно обновив данные о пакетах:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install python
sudo apt-get install apache2
sudo apt-get install subversion
sudo apt-get install g++
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;пункт-2.-установка-sqlite.&#34;&gt;&lt;a href=&#34;#пункт-2.-установка-sqlite.&#34; title=&#34;Пункт 2. Установка sqlite.&#34;&gt;Пункт 2. Установка sqlite.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Теперь необходимо собрать sqlite (легковесная база данных, в котрой будут хранится внутренние данные trac) — версия, находящая в репозитории (3.3.13) на данный момент меньше требуемой (3.3.4). Создадим каталог для временного хранения дистрибутивов и перейдём в него:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/distr
cd ~/distr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Скачаем &lt;a href=&#34;http://www.sqlite.org/download.html&#34;&gt;последнюю версию&lt;/a&gt; sqlite и установим:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://www.sqlite.org/sqlite-3.5.6.tar.gz
tar -xvzf ./sqlite-3.5.6.tar.gz
mv ./sqlite-3.5.6 ./sqlite # чтобы следовать букве README-руководства
mkdir ./bld # временный каталог для скомпилированных файлов
cd ./bld
../sqlite/configure
make
sudo make install
cd ..
rm -r ./bld
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;пункт-3.-установка-trac-related-пакетов-через-easy_install.&#34;&gt;&lt;a href=&#34;#пункт-3.-установка-trac-related-пакетов-через-easy_install.&#34; title=&#34;Пункт 3. Установка trac-related пакетов через easy_install.&#34;&gt;Пункт 3. Установка trac-related пакетов через easy_install.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Для Python существует утилита, облегчающая установку python-пакетов, называемых также &lt;em&gt;яйцами&lt;/em&gt; (они имеют расширение *.egg). Установим её:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://peak.telecommunity.com/dist/ez_setup.py
sudo python ./ez_setup.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И посредством неё установим последние версии &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt; (0.9) (инструмент для подсветки программного кода на Python), &lt;a href=&#34;http://genshi.edgewall.org/&#34;&gt;Genshi&lt;/a&gt; (0.4.4) (механизм шаблонов от создателей trac) и собственно самого &lt;a href=&#34;http://trac.edgewall.org/&#34;&gt;trac&lt;/a&gt; (0.11b2):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo easy_install Pygments
sudo easy_install Genshi
sudo easy_install Trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можно установить также &lt;code&gt;docutils&lt;/code&gt; и &lt;code&gt;pytz&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;пункт-4.-создание-репозиториев.&#34;&gt;&lt;a href=&#34;#пункт-4.-создание-репозиториев.&#34; title=&#34;Пункт 4. Создание репозиториев.&#34;&gt;Пункт 4. Создание репозиториев.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Создадим репозитории для наших проектов и сделаем первые коммиты, содержащие отправные точки для их структур. Все репозитории будут находиться в каталоге &lt;code&gt;/var/svn&lt;/code&gt;, полностью доступном для сервера, каждый в своём подкаталоге &amp;ndash; такой метод удобен при наличии нескольких проектов и это будет заметно в следующем пункте, на этапе настройки авторизации.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /var/svn
sudo mkdir /var/svn/someProject
sudo mkdir /var/svn/anotherProject
cd /tmp
sudo rm -Rf * # удалить все обычные файлы
sudo rm -Rf .* # удалить все скрытые/системные файлы
sudo mkdir /tmp/someProject
sudo mkdir /tmp/someProject/trunk
sudo mkdir /tmp/someProject/tags
sudo mkdir /tmp/someProject/branches
sudo mkdir /tmp/anotherProject
sudo mkdir /tmp/anotherProject/trunk
sudo mkdir /tmp/anotherProject/tags
sudo mkdir /tmp/anotherProject/branches
sudo svnadmin create /var/svn/someProject
sudo svn import ./someProject file:///var/svn/someProject \
    -m &amp;#34;Initial import&amp;#34;
sudo svnadmin create /var/svn/anotherProject
sudo svn import ./anotherProject file:///var/svn/anotherProject \
    -m &amp;#34;Initinal import&amp;#34;
sudo chown -R www-data:www-data /var/svn
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;пункт-5.-связывание-apache-и-subversion.&#34;&gt;&lt;a href=&#34;#пункт-5.-связывание-apache-и-subversion.&#34; title=&#34;Пункт 5. Связывание apache и subversion.&#34;&gt;Пункт 5. Связывание apache и subversion.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Необходимо настроить доступ извне для созданных репозиториев. Для этого нужно установить модуль &lt;code&gt;dav_svn&lt;/code&gt; для &lt;code&gt;apache2&lt;/code&gt; и заодно, раз мы работаем с subversion, установим связку subversion c Python, для корректной работы trac с репозиториями:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libapache2-svn
sudo apt-get install python-subversion
sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь нужно настроить установленный модуль (при установки он автоматически включается для &lt;code&gt;apache&lt;/code&gt;, если нет — используйте &lt;code&gt;a2enmod dav_svn&lt;/code&gt; по завершению настройки):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo cp /etc/apache2/mods-available/dav_svn.conf /etc/apache2/mods-available/dav_svn.conf.bak
sudo vi /etc/apache2/mods-available/dav_svn.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ниже приведено точное содержимое конфигурационного файла. При обращении на путь &lt;code&gt;&amp;lt;host&amp;gt;/svn/...&lt;/code&gt; модуль авторизации apache будет обращаться к файлу &lt;code&gt;/etc/apache2/dav_svn.passwd&lt;/code&gt; за списком пользователей, а затем давать права на доступ к соответствующему проекту из файла &lt;code&gt;/etc/apache2/dav_svn.authz&lt;/code&gt;. Обратите также внимание на использование &lt;code&gt;SVNParentPath&lt;/code&gt; вместо &lt;code&gt;SVNPath&lt;/code&gt; &amp;ndash; таким образом subversion-модуль поймёт, что мы используем мультипроектную структуру и будет обрабатывать путь не как один общий репозиторий, а как несколько внутренних:&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;Location /svn&amp;gt;
    DAV svn
    SVNParentPath /var/svn
    AuthType Basic
    AuthName &amp;#34;Subversion Repository&amp;#34;
    AuthUserFile /etc/apache2/dav_svn.passwd
    AuthzSVNAccessFile /etc/apache2/dav_svn.authz
    Require valid-user
&amp;lt;/Location&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Создадим соответствующих пользователей в файлах авторизации. Используйте пароли попроще для проверки и не забудьте их потом поменять:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo htpasswd -c /etc/apache2/dav_svn.passwd user1
sudo htpasswd /etc/apache2/dav_svn.passwd user2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Создадим файл аутентификации:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/dav_svn.authz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В открытым файле опишем права доступа (на чтение &amp;ndash; “&lt;code&gt;r&lt;/code&gt;” и на запись &amp;ndash; “&lt;code&gt;w&lt;/code&gt;“) пользователей в соответствующие репозитории:&lt;/p&gt;
&lt;pre lang=&#34;ini&#34;&gt;&lt;code&gt;
[/]
user1=r
user2=r

[/someProject]
user1=rw
user2=r

[/anotherProject]
user1=r
user2=rw

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;пункт-6.-создание-окружений-trac.&#34;&gt;&lt;a href=&#34;#пункт-6.-создание-окружений-trac.&#34; title=&#34;Пункт 6. Создание окружений trac.&#34;&gt;Пункт 6. Создание окружений trac.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Создадим каталог, в котором будут находиться окружения для соответствующих проектов.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /var/trac
cd /var/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь создадим для каждого из них, по очереди, окружение:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo trac-admin someProject initenv
sudo trac-admin anotherProject initenv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Имена проектов остаются на ваше усмотрение, тип репозиториев &amp;ndash; по умолчанию &lt;code&gt;svn&lt;/code&gt; (просто нажать Enter), путь к базе общий, по умолчанию (&lt;code&gt;sqlite:db/trac.db&lt;/code&gt;, аналогично), пути к репозиториям: &lt;code&gt;/var/svn/someProject&lt;/code&gt; и &lt;code&gt;/var/svn/anotherProject&lt;/code&gt; соответственно.&lt;/p&gt;

&lt;p&gt;Дадим права apache пользоваться этим каталогом.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R www-data:www-data /var/trac
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;пункт-7.-связывание-apache-и-trac.&#34;&gt;&lt;a href=&#34;#пункт-7.-связывание-apache-и-trac.&#34; title=&#34;Пункт 7. Связывание apache и trac.&#34;&gt;Пункт 7. Связывание apache и trac.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Есть несколько вариантов такого связывания, мы остановимся на быстром, но надёжном способе &amp;ndash; через &lt;code&gt;mod_python&lt;/code&gt; (&lt;a href=&#34;http://trac.edgewall.org/wiki/TracInstall#WebServer&#34;&gt;описания способов&lt;/a&gt; на сайте trac). Для этого модуль нужно установить (также, если он не включился после установки, по завершению настройки используйте &lt;code&gt;a2enmod mod_python&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libapache2-mod-python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Настроим доступ к окружениям trac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/sites-available/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Эта настройка специфична для использования &lt;code&gt;mod_python&lt;/code&gt; (&lt;a href=&#34;http://trac.edgewall.org/wiki/TracModPython&#34;&gt;руководство&lt;/a&gt; на сайте trac, см. &lt;a href=&#34;http://trac.edgewall.org/wiki/TracInstall#WebServer&#34;&gt;описания&lt;/a&gt;, если необходимы другие способы настройки). Обработчиком обращений по адресу &lt;code&gt;&amp;lt;host&amp;gt;/localProjects&lt;/code&gt; выступит модуль, он будет рассматривать каталог &lt;code&gt;/var/trac/&lt;/code&gt; как корень нескольких проектов и содаст страницу с их списком (редактируемый шаблон можно найти внутри исходников trac), аналогично принципам &lt;code&gt;SVNParentPath&lt;/code&gt;, &lt;code&gt;URI&lt;/code&gt; передаётся в код trac. Запросы на вход будут обрабатываться по пользователям из того же &lt;code&gt;passwd&lt;/code&gt; файла, из которого берёт их список subversion, а их права на действия в окружениях trac раздаются через &lt;code&gt;trac-admin&lt;/code&gt; или в GUI-версии TracAdmin, доступной для аминистраторов окружений (будьте внимательны, пользователи создаваемые через интерфейс также добавляются в этот файл и доступны к использованию для настройки авторизации в subversion через &lt;code&gt;authz&lt;/code&gt;-файл (по умолчанию у них нет никаких прав)) .&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;Location /localProjects&amp;gt;
   SetHandler mod_python
   PythonInterpreter main_interpreter
   PythonHandler trac.web.modpython_frontend
   PythonOption TracEnvParentDir /var/trac
   PythonOption TracUriRoot /localProjects
&amp;lt;/Location&amp;gt;

&amp;lt;LocationMatch /localProjects/[^/]+/login&amp;gt;
   AuthType Basic
   AuthName “Local Projects”
   AuthUserFile /etc/apache2/dav_svn.passwd
   Require valid-user
&amp;lt;/LocationMatch&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь заменим сайт по умолчанию для apache на сайт trac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2dissite default
sudo a2ensite trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Дадим пользователям права администратов в окружениях trac, в соотвествии с правами на репозиторий, теперь у них, у каждого в своём проекте, будет веб-интерфейс для полной настройки trac.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo trac-admin someProject permission add user1 TRAC_ADMIN
sudo trac-admin anotherProject permission add user2 TRAC_ADMIN
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;заключение.&#34;&gt;&lt;a href=&#34;#заключение.&#34; title=&#34;Заключение.&#34;&gt;Заключение.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Осталось перезагрузить сервер, (принудительная перезагрузка настроек: &lt;code&gt;force-reload&lt;/code&gt;) и проверить адреса &lt;code&gt;&amp;lt;host&amp;gt;/localProjects&lt;/code&gt;, &lt;code&gt;&amp;lt;host&amp;gt;/svn/someProject&lt;/code&gt; и &lt;code&gt;&amp;lt;host&amp;gt;/svn/anotherProject&lt;/code&gt;, попробовав авторизироваться разными пользователями.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если при установке появились какие-либо проблемы и ничего не помогает, попробуйте ознакомиться с &lt;a href=&#34;?trac-subversion-ubuntu-initial&#34;&gt;предыдущей статьёй&lt;/a&gt; (но она несколько более сумбурна и менее структурирована) или опишите проблему(-мы) по почте &amp;ndash; постараюсь реагировать быстро.&lt;/p&gt;
&lt;h3 id=&#34;примечания&#34;&gt;&lt;a href=&#34;#примечания&#34; title=&#34;Примечания&#34;&gt;Примечания&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;примечание-a.-о-добавлении-проектов.&#34;&gt;&lt;a href=&#34;#примечание-a.-о-добавлении-проектов.&#34; title=&#34;Примечание A. О добавлении проектов.&#34;&gt;Примечание A. О добавлении проектов.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Добавление проектов в будущем требует лишь нескольких шагов &amp;ndash; создание базовой структуры первым коммитом в какой-либо подкаталог &lt;code&gt;/var/svn&lt;/code&gt;, опциональное добавление новых пользователей в &lt;code&gt;htpasswd&lt;/code&gt;-файл, настройка прав доступа в &lt;code&gt;authz&lt;/code&gt;-файле, создание окружения trac в соответствующем подкталоге &lt;code&gt;/var/trac&lt;/code&gt; через &lt;code&gt;trac initenv&lt;/code&gt;, опциональная выдача trac-прав новым пользователям и проверка, что apache имеет доступ к созданным каталогам.&lt;/p&gt;
&lt;h4 id=&#34;примечание-б.-ssl-и-виртуальные-хосты&#34;&gt;&lt;a href=&#34;#примечание-б.-ssl-и-виртуальные-хосты&#34; title=&#34;Примечание Б. SSL и виртуальные хосты&#34;&gt;Примечание Б. SSL и виртуальные хосты&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Для работы с SSL достаточно включить модуль &lt;code&gt;ssl&lt;/code&gt; для &lt;code&gt;apache&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2enmod ssl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для того, чтобы закрыть доступ в &lt;code&gt;svn&lt;/code&gt; по &lt;code&gt;http&lt;/code&gt;, нужно обратно закомментировать все строки в &lt;code&gt;/etc/apache2/mods-available/dav_svn.conf&lt;/code&gt; или вернуть забекапленную версию:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo cp -f /etc/apache2/mods-available/dav_svn.conf.bak /etc/apache2/mods-available/dav_svn.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь настроим виртуальные хосты для &lt;code&gt;subversion&lt;/code&gt; и &lt;code&gt;trac&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/sites-available/svn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В нём:&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;VirtualHost acme.org:796&amp;gt;
    ServerName svn.acme.org
    &amp;lt;Location /&amp;gt;
        DAV svn
        SVNParentPath /var/svn
        AuthType Basic
        AuthName &amp;#34;Subversion Repository&amp;#34;
        AuthUserFile /etc/apache2/dav_svn.passwd
        AuthzSVNAccessFile /etc/apache2/dav_svn.authz
        Require valid-user
    &amp;lt;/Location&amp;gt;
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
&amp;lt;/VirtualHost&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/sites-available/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В нём:&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;VirtualHost acme.org:967&amp;gt;
    ServerName trac.acme.org

    &amp;lt;Location /&amp;gt;
        SetHandler mod_python
        PythonInterpreter main_intepreter
        PythonHandler trac.web.modpython_frontend
        PythonOption TracEnvParentDir /var/trac
        PythonOption TracUriRoot /
    &amp;lt;/Location&amp;gt;

    &amp;lt;LocationMatch /[^/]+/login&amp;gt;
        AuthType Basic
        AuthName &amp;#34;Local Projects&amp;#34;
        AuthUserFile /etc/apache2/dav_svn.passwd
        Require valid-user
    &amp;lt;/LocationMatch&amp;gt;
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
&amp;lt;/VirtualHost&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Замените &lt;code&gt;acme.org&lt;/code&gt; на имя вашего хоста, &lt;code&gt;796&lt;/code&gt; и &lt;code&gt;967&lt;/code&gt; на необходимый вам порт для &lt;code&gt;svn&lt;/code&gt; и &lt;code&gt;trac&lt;/code&gt; соответственно, и при необходимости укажите свой собственный сертификат/ключ.&lt;/p&gt;

&lt;p&gt;Указанные вами порты необходимо добавить в &lt;code&gt;/etc/apache2/ports.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/ports.conf
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
...
NameVirtualHost *:80
Listen 80
Listen 443
# svn.acme.org
Listen 796
# trac.acme.org
Listen 967

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Наступило время включить модуль &lt;code&gt;svn&lt;/code&gt; и перезапустить &lt;code&gt;apache&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2ensite svn
sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь по адресам &lt;code&gt;https://svn.acme.org:796&lt;/code&gt; и &lt;code&gt;https://trac.acme.org:967&lt;/code&gt; должны быть доступны ваши &lt;code&gt;svn&lt;/code&gt; и &lt;code&gt;trac&lt;/code&gt;. Всё.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; По мотивам этой статьи пользователь &lt;code&gt;MaroonOrg&lt;/code&gt; создал &lt;a href=&#34;http://maroonorg.wikidot.com/trac&#34;&gt;другую&lt;/a&gt;, где описал свою конфигурацию.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>[g]Vim в режиме Python: Рекомпиляция в Windows</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/vim-python-windows-compilation/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/vim-python-windows-compilation/</id>
                <updated>2008-03-15T00:46:00Z</updated>
                
                
                <content type="html">&lt;h3 id=&#34;введение&#34;&gt;&lt;a href=&#34;#введение&#34; title=&#34;Введение&#34;&gt;Введение&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Редактор Vim наиболее известен среди разработчиков в системах Unix &amp;ndash; конкурент &lt;code&gt;emacs&lt;/code&gt;, что-то вроде консольного IDE &amp;ndash; этот редактор при должной сноровке и настройке (мне кажется, сноровке несколько меньшей и настройке более очевидной чем в &lt;code&gt;emacs&lt;/code&gt;, но у последнего также есть мощная мультифункциональность &amp;ndash; выбор за программистом) способен убыстрить и упростить многие процессы на этапах разработки не в ущерб таким удобствам как, например, авто-дополнение и навигация по проекту. Однако, если вы собираетесь использовать его для разработки на Python со всеми подобными удобствами &amp;ndash; потребуются некоторые усилия: а именно, перекомпиляция…&lt;/p&gt;

&lt;p&gt;Приведу несколько ссылок по теме:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mgul.ac.ru/%7Et-alex/Linux/Vim-Color-Editor-HOW-TO/Vim-9.html&#34;&gt;Vim How-To&lt;/a&gt; — Работа в &lt;code&gt;vim&lt;/code&gt;. Небольшое, но грамотное, вводное руководство. (&lt;a href=&#34;http://mgul.ac.ru/%7Et-alex/Linux/Vim-Color-Editor-HOW-TO/Vim.html&#34;&gt;полное содержание&lt;/a&gt;, содержит &lt;a href=&#34;http://mgul.ac.ru/%7Et-alex/Linux/Vim-Color-Editor-HOW-TO/Vim-10.html&#34;&gt;справочник по командам&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&#34;&gt;Набор изображений (читшитов)&lt;/a&gt; для быстрого и наглядного изучения сочетаний клавиш. &lt;em&gt;(англ.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cachealot.habrahabr.ru/blog/45414.html#habracut&#34;&gt;Статья по использованию vim на Хабрахабре&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://allaboutvim.blogspot.com/2007/12/vim-python.html&#34;&gt;Настройка Vim для работы с Python&lt;/a&gt; &amp;ndash; статья с подробным рассмотрением настройки и упоминанием всех необходимых дополнений&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://users.skynet.be/antoine.mechelynck/vim/compile.htm&#34;&gt;Компилирование (g)Vim для Windows&lt;/a&gt; &amp;ndash; статья, послужившая основой для написания той, которую вы читаете. &lt;em&gt;(англ.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://people.smu.edu/jrobinet/howto/compile-vim-on-windows.asp&#34;&gt;Альтернативная статья&lt;/a&gt; на ту же тему &amp;ndash; более краткая, но о Python 2.5&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.petersblog.org/node/461&#34;&gt;Некоторые заметки&lt;/a&gt; о работе c Python в редакторе Vim. &lt;em&gt;(англ.)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;версии&#34;&gt;&lt;a href=&#34;#версии&#34; title=&#34;Версии&#34;&gt;Версии&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Компиляция производилась с использованием &lt;code&gt;[g]Vim 7.1&lt;/code&gt;, &lt;code&gt;Python 2.5.2&lt;/code&gt;, &lt;code&gt;Tcl 8.5.1&lt;/code&gt;, &lt;code&gt;Cygwin 1.5.25-11&lt;/code&gt; на &lt;code&gt;Windows XP SP2&lt;/code&gt;, но сценарий при этом должен быть насколько возможно независим от версий.&lt;/p&gt;
&lt;h3 id=&#34;установка-необходимых-программ&#34;&gt;&lt;a href=&#34;#установка-необходимых-программ&#34; title=&#34;Установка необходимых программ&#34;&gt;Установка необходимых программ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Итак, подготовка. Нужно заранее установить сам язык &amp;ndash; &lt;a href=&#34;http://www.python.org/download/&#34;&gt;Python&lt;/a&gt; (если он не установлен) и, если вы собираетесь использовать Tcl &amp;ndash; соответственно &lt;a href=&#34;http://www.tcl.tk/software/tcltk/&#34;&gt;Tcl/Tk&lt;/a&gt; (с некоторого времени язык стал владением ActiveState: можно &lt;a href=&#34;http://www.activestate.com/store/activetcl&#34;&gt;скачать бесплатный ActiveTcl&lt;/a&gt;). При компиляции используются динамические библиотеки соответствующих языков.&lt;/p&gt;

&lt;p&gt;Для работы с архивами и собственно компиляции нам понадобится эмулятор Unix-утилит под Windows - это &lt;a href=&#34;http://cygwin.com/&#34;&gt;Cygwin&lt;/a&gt;. В нём существуют и компилятор &lt;code&gt;gcc&lt;/code&gt;, и необходимые для компиляции файлы (есть путь с компилятором Borland, но он несколько сложнее). &lt;a href=&#34;http://cygwin.com/setup.exe&#34;&gt;Файл установки&lt;/a&gt; работает немного непривычным образом &amp;ndash; скачивая и файлы установки и пакеты уже после вашего выбора (если вы выберете установку из Интернет, которая в первый раз в любом случае необходима) &amp;ndash; при этом для обновления или до/переустановки пакетов вы, возможно, будете возвращаться к инсталлятору довольно-таки часто. Тем не менее, чтобы установить минимальный набор необходимых для нашего случая вещей &amp;ndash; нужно отметить лишь пару пунктов: после выбора способа установки (на данный момент наиболее стабильно для меня работало зеркало &lt;code&gt;ftp://mirror.switch.ch&lt;/code&gt; (хотя буквально в эти секунды его исключили из списка официальных зеркал): если будут ошибки закачки &amp;ndash; вас снова вернут к выбору зеркала) в списке выбора пакетов убедитесь что вы находитесь в режиме &lt;code&gt;Category&lt;/code&gt; (переключив его, если надо, кнопкой &lt;code&gt;View&lt;/code&gt; вверху), рядом с пунктом &lt;code&gt;All&lt;/code&gt;, несколько раз потыкав надпись &lt;code&gt;Default&lt;/code&gt; поменяйте её на &lt;code&gt;Uninstall&lt;/code&gt; (чтобы не устанавливать ненужных пакетов) и выберите следующие пункты &amp;ndash; &lt;code&gt;Utils/patch&lt;/code&gt;, &lt;code&gt;Devel/gcc-g++&lt;/code&gt;, &lt;code&gt;Devel/make&lt;/code&gt;, &lt;code&gt;System/man&lt;/code&gt; и &lt;code&gt;Devel/gcc-mingw&lt;/code&gt; (последний, возможно, будет уже заранее выбран, значит они уже исправили одну проблему, которая отражалось на удачной компиляции :) ) — при этом у вас автоматически станут выбраны некоторые другие относительно необходимые пакеты (можно перепроверить): &lt;code&gt;Shells/bash&lt;/code&gt;, &lt;code&gt;Utils/bzip2&lt;/code&gt; и &lt;code&gt;Devel/mingw-runtime&lt;/code&gt; (последний, тем не менее, безмерно важен). Также советую установить &lt;code&gt;Web/wget&lt;/code&gt; для того, чтобы облегчить в дальнейшем закачку патчей. Всё, можно жать установку.&lt;/p&gt;

&lt;p&gt;Затем нужно, собственно, установить &lt;a href=&#34;http://www.vim.org/download.php#pc&#34;&gt;gVim&lt;/a&gt;. Можно заранее его настроить под Python, руководствуясь &lt;a href=&#34;http://allaboutvim.blogspot.com/2007/12/vim-python.html&#34;&gt;статьей&lt;/a&gt;, упомянутой выше — тогда при попытке подключения авто-дополнения Vim будет сообщать о необходимости перекомпиляции с ключом &lt;code&gt;+python&lt;/code&gt;, что мы и планируем сделать.&lt;/p&gt;
&lt;h3 id=&#34;подготовка&#34;&gt;&lt;a href=&#34;#подготовка&#34; title=&#34;Подготовка&#34;&gt;Подготовка&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Запустите &lt;code&gt;cmd&lt;/code&gt; и убедитесь, что в переменных окружения &lt;code&gt;USERNAME&lt;/code&gt; и &lt;code&gt;USERDOMAIN&lt;/code&gt; содержатся ваше имя и имя вашего компьютера и домена соответственно (&lt;code&gt;echo %username%@%userdomain%&lt;/code&gt;), а &lt;code&gt;PATH&lt;/code&gt; содержит путь к &lt;code&gt;bin&lt;/code&gt;-каталогу Cygwin. &lt;code&gt;HOME&lt;/code&gt; может указывать на ваш каталог “Мои документы” (туда, где находится ваш файл настройки vim — &lt;code&gt;vimrc&lt;/code&gt;), а &lt;code&gt;VIM&lt;/code&gt; &amp;ndash; на месторасположение установленного, рабочего редактора vim, желательно в формате &lt;code&gt;8.3&lt;/code&gt; (напр.: &lt;code&gt;C:\PROGRA~1\VIM&lt;/code&gt;). Значения переменных можно изменять в диалоге, расположенном здесь: &lt;em&gt;Мой компьютер → Свойства → Дополнительно → Переменные среды&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Не менее, а даже более нам необходимы исходники, поэтому &lt;a href=&#34;ftp://ftp.vim.org/pub/vim/unix/&#34;&gt;скачиваем их&lt;/a&gt; для соответствующей установленной версии (будьте внимательны &amp;ndash; именно исходники для Unix, даже при компиляции под Win32) (по предыдущей ссылке также можно скачать файлы для отладки, но отлаживание в этой статье не рассматривается и в их присутствии нет необходимости). Поверх этих исходников нужно добыть дополнение для Windows (&lt;code&gt;-extra&lt;/code&gt;) и файлы языков (&lt;code&gt;-lang&lt;/code&gt;) соответствующей версии отсюда.&lt;/p&gt;

&lt;p&gt;Также, если вы используете стабильный релиз и хотите заодно установить новейшие патчи &amp;ndash; за файлами патчей обращайтесь &lt;a href=&#34;ftp://ftp.vim.org/pub/vim/patches/7.1/&#34;&gt;сюда&lt;/a&gt; (исправьте номер версии в ссылке, если нужно). Здесь есть некоторая проблема, поскольку файлы патчей упаковываются в один только при достижении сотни (001-100, 101-200 и т.д.), поэтому если их, например, 275 &amp;ndash; последние 75 файлов придётся закачивать руками или написав batch-скрипт с использованием &lt;code&gt;telnet&lt;/code&gt;. Однако, у нас уже установлен , поэтому можно создать &lt;code&gt;.sh&lt;/code&gt;-скрипт, выполняющий те же функции через &lt;code&gt;wget&lt;/code&gt;, выглядеть это может примерно так:&lt;/p&gt;
&lt;pre lang=&#34;bash&#34;&gt;&lt;code&gt;
PATCHES_DOWNLOAD_PATH=ftp://ftp.vim.org/pub/vim/patches
PATCHES_VER=7.1
wget $PATCHES_DOWNLOAD_PATH/$PATCHES_VER/$PATCHES_VER.001-100.gz
wget $PATCHES_DOWNLOAD_PATH/$PATCHES_VER/$PATCHES_VER.101-200.gz

for i in `seq 201 278`;
do
    wget $PATCHES_DOWNLOAD_PATH/$PATCHES_VER/$PATCHES_VER.$i
done

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь займёмся расположением исходников в виде, удобном для компиляции.&lt;/p&gt;

&lt;p&gt;Архивы с исходником, &lt;code&gt;-extra&lt;/code&gt; и &lt;code&gt;-lang&lt;/code&gt; нужно распаковать (по очереди, с заменой более старых файлов) в какой-либо каталог с сохранением структуры (пусть в нашем случае это будет &lt;code&gt;C:/devel/vim-src/vim71&lt;/code&gt;), в нём должны содержаться каталоги &lt;code&gt;/doc&lt;/code&gt;, &lt;code&gt;/nsis&lt;/code&gt;, &lt;code&gt;/src&lt;/code&gt;, &lt;code&gt;/farsi&lt;/code&gt; и т.д.. В распаковке вам поможет или &lt;code&gt;bzip2&lt;/code&gt; из Cygwin, или встроенный архиватор файлового менеджера &lt;a href=&#34;http://www.ghisler.com/&#34;&gt;Total Commander&lt;/a&gt; или архиватор &lt;a href=&#34;http://www.7-zip.org/&#34;&gt;7-zip&lt;/a&gt; или любой другой архиватор, поддерживающий архивы &lt;code&gt;.tar.gz&lt;/code&gt; :).&lt;/p&gt;

&lt;p&gt;В подкаталог &lt;code&gt;/runtime&lt;/code&gt; можно положить файлы &lt;code&gt;.vim&lt;/code&gt;, каталоги &lt;code&gt;/doc&lt;/code&gt; и &lt;code&gt;/plugins&lt;/code&gt; из рабочей версии вашего редактора vim &amp;ndash; тогда они будут пропатчены соответственно, если вы выбрали путь компилирования с патчами. Патчи при этом можно положить в каталог &lt;code&gt;/patches&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;компиляция&#34;&gt;&lt;a href=&#34;#компиляция&#34; title=&#34;Компиляция&#34;&gt;Компиляция&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для того, чтобы установить патчи, нужно выполнить над каждым из них команду patch из набора Cygwin, предварительно распаковав архивы файлов с сотнями патчей. В этом случае я воспользовался &lt;code&gt;.bat&lt;/code&gt;-файлом вместо &lt;code&gt;.sh&lt;/code&gt; скрипта (номера патчей, конечно, нужно, поправить на соответствующие вашему набору):&lt;/p&gt;
&lt;pre lang=&#34;batch&#34;&gt;&lt;code&gt;
@ECHO off
ECHO changing directory to parent...

CD ..

ECHO -------------------- %Date% -------------------- &amp;gt;&amp;gt; patching-src.log

ECHO %CD%: applying first 200 patches

patch -p0 &amp;lt; patches/7.1.001-100 &amp;gt;&amp;gt; patching-src.log 2&amp;gt;&amp;amp;1
patch -p0 &amp;lt; patches/7.1.101-200 &amp;gt;&amp;gt; patching-src.log 2&amp;gt;&amp;amp;1

ECHO %CD%: applying the last patches

FOR /L %%B IN (201,1,278) DO
    patch -p0 &amp;lt; patches/7.1.%%B &amp;gt;&amp;gt; patching-src.log 2&amp;gt;&amp;amp;1

ECHO Finished

PAUSE

@ECHO on

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Этот файл нужно положить в каталог &lt;code&gt;/patches&lt;/code&gt; и после корректировки выполнить (убедитесь, что вся описанная выше структура дерева исходников сформирована): в корне исходников будет создан файл &lt;code&gt;patching-src.log&lt;/code&gt;, в котором можно проследить результаты прошедшего патчинга. Если утилита &lt;code&gt;patch&lt;/code&gt; не была найдена, проверьте &lt;code&gt;PATH&lt;/code&gt; на наличие пути к Cygwin. Если некоторое (небольшое) количество файлов не было найдено и пропатчено &amp;ndash; можно сильно не беспокоится, это в основном файлы для XWindow-версии.&lt;/p&gt;

&lt;p&gt;Теперь можно перейти непосредственно к компиляции из консоли Cygwin. Для этого необходимо удачно выполнить лишь три команды — перейти в каталог с исходниками (cygwin монтирует ваши диски в точке &lt;code&gt;/cygdrive/&lt;/code&gt;: подставьте корректные пути к вашей установке Python и Tcl а также их корректные версии, а если вы не компилируете версию для Tcl &amp;ndash; просто уберите соответствующие параметры) и создать файлы &lt;code&gt;vim.exe&lt;/code&gt; (консольная версия) и &lt;code&gt;gvim.exe&lt;/code&gt; (GUI-версия):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /cygdrive/c/devel/vim-src/vim71
$ make -B -f Make_cyg.mak GUI=no \
    PYTHON=/cygdrive/c/devel/Python PYTHON_VER=25 DYNAMIC_PYTHON=yes \
    TCL=/cygdrive/c/devel/Tcl TCL_VER=85 DYNAMIC_TCL=yes vim.exe
$ make -B -f Make_cyg.mak OLE=yes \
    PYTHON=/cygdrive/c/devel/Python PYTHON_VER=25 DYNAMIC_PYTHON=yes \
    TCL=/cygdrive/c/devel/Tcl TCL_VER=85 DYNAMIC_TCL=yes gvim.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;На предупреждения и даже некоторые ошибки, если они относятся к Python или Tcl и если процесс продолжается, а в результате &lt;code&gt;.exe&lt;/code&gt;-файлы созданы, можно не обращать внимания. Если всё завершилось удачно, то в каталоге &lt;code&gt;/src&lt;/code&gt; вы найдёте оба &lt;code&gt;.exe&lt;/code&gt;-файла. Сделайте бэкап существующих файлов в рабочем, установленном vim (например, &lt;code&gt;vim.exe.bak&lt;/code&gt; и &lt;code&gt;gvim.exe.bak&lt;/code&gt;) и замените их только что скомпилированными. Если вы применяли патчи, то верните обратно &lt;code&gt;*.vim&lt;/code&gt; файлы, каталоги &lt;code&gt;/doc&lt;/code&gt; и &lt;code&gt;/plugins&lt;/code&gt; из каталога &lt;code&gt;/runtime&lt;/code&gt;, предварительно сделав бэкапы и для них и заменяя старые версии. После этого запустите gVim и vim из папки рабочего vim, проверьте версию и опции компилирования там же на присутствие &lt;code&gt;+python&lt;/code&gt; &amp;ndash; в большинстве случаев всё должно сложиться удачно.&lt;/p&gt;
&lt;h3 id=&#34;возможные-ошибки&#34;&gt;&lt;a href=&#34;#возможные-ошибки&#34; title=&#34;Возможные ошибки&#34;&gt;Возможные ошибки&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В процессе компилирования мне встретилось две ошибки: &lt;code&gt;cannot exec&lt;/code&gt;cc1&amp;#39;: No such file or directory&lt;code&gt;и&lt;/code&gt;ld: cannot find -lgcc&lt;code&gt;. Обе они [известны авторам](http://www.mail-archive.com/cygwin@cygwin.com/msg10910.html) Cygwin, однако в моём случае в скачанных мной версиях они ещё не были решены. Первая временно решается предварительным (перед компиляцией) добавлением каталога с исполняемым файлом&lt;/code&gt;cc1.exe&lt;code&gt;в локальный&lt;/code&gt;PATH cygwin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ PATH=$PATH:/cygdrive/c/devel/cygwin/lib/gcc/i686-pc-cygwin/3.4.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вторая решается так, как должна была решаться и первая &amp;ndash; установкой &lt;code&gt;Devel/gcc-mingw&lt;/code&gt; (её обещали сделать автоматической при выборе &lt;code&gt;gcc&lt;/code&gt; в будущем) при установке Cygwin. При этом важно установить пакеты одновременно, поэтому если ошибка всё равно появляется &amp;ndash; попробуйте выбрать режим &lt;code&gt;Reinstall&lt;/code&gt; в установщике Cygwin в том месте, где до этого вы выбирали режим &lt;code&gt;Uninstall&lt;/code&gt; и установите Cygwin заново.&lt;/p&gt;
&lt;h3 id=&#34;настройка-vim-для-python&#34;&gt;&lt;a href=&#34;#настройка-vim-для-python&#34; title=&#34;Настройка Vim для Python&#34;&gt;Настройка Vim для Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;(&lt;strong&gt;Upd.&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;На основе &lt;a href=&#34;http://allaboutvim.blogspot.com/2007/12/vim-python.html&#34;&gt;этой статьи&lt;/a&gt; я создал пак (взять можно &lt;a href=&#34;http://shaman-sir.by.ru/files/vimfiles.zip&#34;&gt;здесь&lt;/a&gt;) из последних версий упомянутый в ней плагинов (&lt;a href=&#34;http://allaboutvim.blogspot.com/2007/07/projecttargz-ide.html&#34;&gt;Project&lt;/a&gt;, PythonComplete, NERD&lt;em&gt;Commenter, &lt;a href=&#34;http://allaboutvim.blogspot.com/2007/08/vcscommandvim-svn_09.html&#34;&gt;VCSCommand&lt;/a&gt;, RunScript и TagList плюс, поверх — &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=850&#34;&gt;PyDiction&lt;/a&gt;) + минимальной настройки (в &lt;code&gt;ftplugin/python.vim&lt;/code&gt;, практически идентичный соответствующему в статье (изменённая функция TabWrapper + другой способ подключения словаря) &amp;ndash; только общепринятые стандарты, _omni completion&lt;/em&gt; повешен на &lt;code&gt;Tab&lt;/code&gt;). Содержимое требуется распаковать в каталог &lt;code&gt;&amp;lt;путь_к_установленному_vim&amp;gt;\vimfiles&lt;/code&gt;. Для плагина taglist потребуется скачать ctags &lt;a href=&#34;http://prdownloads.sourceforge.net/ctags/ec57w32.zip&#34;&gt;отсюда&lt;/a&gt;, и распаковав полученный архив в некоторый каталог, добавить путь к нему в переменную окружения &lt;code&gt;PATH&lt;/code&gt;. Затем нужно запустить vim и выполнить команду:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:helptags $VIM\vimfiles\doc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;После этого можно будет использовать команду &lt;code&gt;:help &amp;lt;название_плагина&amp;gt;&lt;/code&gt; для получения документации по соответствующему плагину.&lt;/p&gt;

&lt;p&gt;Обычное автодополнение при использовании настроек из пакета работает по &lt;code&gt;Tab&lt;/code&gt;, дополнение по контексту (&lt;em&gt;omni completion&lt;/em&gt;) &amp;ndash; по &lt;code&gt;Ctrl+Enter&lt;/code&gt; и &lt;code&gt;Ctrl+Space&lt;/code&gt;, а дополнение по ключевым словам и модулям &amp;ndash; по &lt;code&gt;Ctrl+Tab&lt;/code&gt; (при большом количестве вариантов словарь загружается относительно долго, поэтому намеренно установлено не очень удобное сочетание).&lt;/p&gt;

&lt;p&gt;Для того, чтобы вставлять &lt;a href=&#34;http://www.python.org/dev/peps/pep-0263/&#34;&gt;предлагаемые&lt;/a&gt; по спецификации строки в заголовки python-файлов при создании, добавьте нижеприведённый код в файл &lt;code&gt;&amp;lt;путь_к_установленному_vim&amp;gt;\_vimrc&lt;/code&gt; (строка filename добавлена для демонстрации возможности добавления имени файла):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function! BufNewFile_PY()
   0put = &amp;#39;#!/usr/bin/env python&amp;#39;
   1put = &amp;#39;#-*- coding: utf-8 -*-&amp;#39;
   $put = &amp;#39;#-*- filename: &amp;#39; . expand(&amp;#39;&amp;#39;) . &amp;#39; -*-&amp;#39;
   $put = &amp;#39;&amp;#39;
   $put = &amp;#39;&amp;#39;
   normal G
endfunction

autocmd BufNewFile *.py call BufNewFile_PY()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…Вот теперь можно c чрезвычайным удобством программировать на Python.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Редеплойинг приложения на Tomcat средствами Ant</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/ant-tomcat-redeploying/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/ant-tomcat-redeploying/</id>
                <updated>2007-09-25T00:46:00Z</updated>
                
                <summary type="html">Процесс разработки нашего проекта обладает одним минусом, свойственным многим J2EE-проектам: при изменении кода проекта и пересборке его сервер не сразу подхватывает обновку, а требует полного останова себя, очистки кэша, запуска себя по-новой и передеплойинга пакета.</summary>
                <content type="html">&lt;p&gt;Процесс разработки нашего проекта обладает одним минусом, свойственным многим J2EE-проектам: при изменении кода проекта и пересборке его сервер не сразу подхватывает обновку, а требует полного останова себя, очистки кэша, запуска себя по-новой и передеплойинга пакета.&lt;/p&gt;

&lt;p&gt;Для того чтобы не делать это каждый раз ручками есть несколько простых способов: например, те же скрипты (batch’и для windows и shell-скрипты для linux). Но мне показалось более простым сделать так, чтобы делал это сам собирающий ant-скрипт (сценарий?): одно нажатие клавиши и все просходит автоматически…&lt;/p&gt;

&lt;p&gt;(версия для windows)&lt;/p&gt;

&lt;p&gt;Поэтому я взял скрипт существующий и стал его править. Пришлось столкнуться с несколькими проблемами/хитростями ant’а на windows (опытному в ant’о-строении человеку они конечно нипочем :) ), в результате чего получился рабочий скрипт, выдержки из которого я и разберу ниже.&lt;/p&gt;

&lt;p&gt;Вот &amp;ndash; файл &lt;code&gt;build.properties&lt;/code&gt;. Он содержит некоторые значения, которые возможно будут часто меняться и поэтому лучше хранить их отдельно от ant-срипта.&lt;/p&gt;
&lt;pre lang=&#34;ini&#34;&gt;&lt;code&gt;
# имя пакета
war.name = SomeProjectPackage

# путь к JDK
java.home = &amp;#34;C:\Worktable\Java\jdk1.5.0_12&amp;#34;
# путь к корневому каталогу сервера
server.dir = C:/Worktable/Java/apache-tomcat-5.5.25
# скрипт, использующийся для запуска сервера
server.command = catalina.bat

# путь к расположению проекта
root.dir = C:/Workspace/SomeProject
# путь к месту, куда на сервере будет выкладываться пакет
deploy.dir = ${server.dir}/webapps/

# настройки JPDA (удаленнный дебаггинг может осуществляться
# (например, средствами Eclipse) подключением к указанному порту)
jpda.transport = dt_socket
jpda.port = 56666

# путь к библиотекам проекта
lib.dir = ${root.dir}/lib/
# путь к временному месту сборки проекта
dist.dir = ${root.dir}/dist/
# путь к каталогу с веб-содержимым - страницами, скриптами и т.п.
web.dir = ${root.dir}/WebContent/

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь по частям рассмотрим сам скрипт. В заголовке - включаем наш файл &lt;code&gt;.properties&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;

    &amp;lt;project name=&amp;#34;SomeProject&amp;#34; default=&amp;#34;redeploy&amp;#34; basedir=&amp;#34;.&amp;#34;&amp;gt;
    &amp;lt;property file=&amp;#34;build.properties&amp;#34;/&amp;gt;

    . . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Далее идут цели сборки (&lt;code&gt;build&lt;/code&gt;), очистки временных каталогов, использованных при сборке (&lt;code&gt;clean&lt;/code&gt;) и цель пересборки - очищающая, а затем собирающая (&lt;code&gt;rebuild&lt;/code&gt;). Их подробное рассмотрение не относится к цели статьи :).&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
    . . .

    &amp;lt;!-- Compiles project with all dependencies. --&amp;gt;

    &amp;lt;target name=&amp;#34;build&amp;#34;
            description=&amp;#34;--&amp;gt; compiles project with all dependencies&amp;#34;&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${dist.dir}&amp;#34;/&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${dist.dir}/classes&amp;#34;/&amp;gt;
        &amp;lt;javac source=&amp;#34;1.5&amp;#34;
            srcdir=&amp;#34;${root.dir}/src&amp;#34;
            destdir=&amp;#34;${dist.dir}/classes&amp;#34;
            debug=&amp;#34;on&amp;#34;
            verbose=&amp;#34;false&amp;#34;
            optimize=&amp;#34;on&amp;#34;&amp;gt;
            &amp;lt;classpath&amp;gt;
                &amp;lt;fileset dir=&amp;#34;${lib.dir}&amp;#34; includes=&amp;#34;**/*.jar&amp;#34;/&amp;gt;
            &amp;lt;/classpath&amp;gt;
        &amp;lt;/javac&amp;gt;
    &amp;lt;/target&amp;gt;

    &amp;lt;!-- Cleans the build. --&amp;gt;

    &amp;lt;target name=&amp;#34;clean&amp;#34;
            description=&amp;#34;--&amp;gt; cleans the build&amp;#34;&amp;gt;
        &amp;lt;delete quiet=&amp;#34;true&amp;#34; dir=&amp;#34;${dist.dir}&amp;#34;/&amp;gt;
    &amp;lt;/target&amp;gt;

    &amp;lt;!-- Rebuild. --&amp;gt;

    &amp;lt;target name=&amp;#34;rebuild&amp;#34; depends=&amp;#34;clean,build&amp;#34;
            description=&amp;#34;--&amp;gt; [clean, build]&amp;#34;/&amp;gt;

    . . .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;А вот, собственно, наши подчиненные &amp;ndash; цели деплойинга (выкладывания нового пакета на сервер), де-деплойинга (забирания старого пакета с сервера) и пере-деплойинга (забирания старого, а потом выкладывания нового).&lt;/p&gt;

&lt;p&gt;При выкладывании (&lt;code&gt;deploy&lt;/code&gt;) мы компилируем код (&lt;code&gt;depends=&amp;quot;build&amp;quot;&lt;/code&gt;), затем создаем на сервере каталог для логов, собираем пакет из скомпилированных исходников (командой &lt;code&gt;jar&lt;/code&gt;), выкладывая его во временный каталог, а затем запускаем сервер. Для Windows сервер из ant-скрипта может быть запущен только в своем окружении, для этого приходится вызывать его командой &lt;code&gt;cmd /c catalina.bat jpda start&lt;/code&gt;, через команду ant’а &lt;code&gt;exec&lt;/code&gt; (аргументы должны быть разделены командами &lt;code&gt;arg&lt;/code&gt; именно так, как представлено ниже &amp;ndash; для того чтобы &lt;code&gt;exec&lt;/code&gt; обернул команду &lt;code&gt;catalina jpda start&lt;/code&gt; в кавычки, для ее целостности). Также серверу нужно передать несколько переменных окружения, что мы и делаем, используя команды &lt;code&gt;env&lt;/code&gt;. Сервер мы запускаем в отдельном потоке (&lt;code&gt;spawn=&amp;quot;true&amp;quot;&lt;/code&gt; &amp;ndash; иначе скрипт будет ожидать от сервера команды завершения и не будет производить дальнейших действий) и в чистом виде (не через ява-машину - &lt;code&gt;vmlauncher=&amp;quot;false&amp;quot;&lt;/code&gt;). Сервер запущен, можно выложить туда пакет и удалить временные каталоги и файлы (последовательность команд &lt;code&gt;copy&lt;/code&gt; и двух &lt;code&gt;delete&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Для выгрузки пакета с сервера (&lt;code&gt;undeploy&lt;/code&gt;) мы останавливаем серевер по правилам, описанным выше (при остановке мы можем не указывать переменные окружения для JPDA и подолждать пока сервер остановится; но если что-то не вышло &amp;ndash; это нормально &amp;ndash; возможно сервер и не был запущен (&lt;code&gt;failifexecutionfails=&amp;quot;false&amp;quot;&lt;/code&gt;)). Затем мы очищаем каталог на сервере, в которые он распаковывал наш пакет, удаляем сам пакет и очищаем кэш сервера.&lt;/p&gt;

&lt;p&gt;При перевыладке (&lt;code&gt;redeploy&lt;/code&gt;) - цели по умолчанию - старая версия пакета удаляется с сервера (&lt;code&gt;undeploy&lt;/code&gt;), очищаются временные каталоги (&lt;code&gt;clean&lt;/code&gt;), и пакет собирается и выкладывается на сервер (&lt;code&gt;deploy&lt;/code&gt;).&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
    . . .

    &amp;lt;!-- Prepares deployment --&amp;gt;

    &amp;lt;target name=&amp;#34;pre-deploy&amp;#34;&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${dist.dir}/war&amp;#34;/&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${dist.dir}/war/WEB-INF&amp;#34;/&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${dist.dir}/war/WEB-INF/classes&amp;#34;/&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${dist.dir}/war/WEB-INF/lib&amp;#34;/&amp;gt;
        &amp;lt;copy todir=&amp;#34;${dist.dir}/war&amp;#34;&amp;gt;
            &amp;lt;fileset dir=&amp;#34;${web.dir}&amp;#34;&amp;gt;
                &amp;lt;include name=&amp;#34;**/*.*&amp;#34;/&amp;gt;
            &amp;lt;/fileset&amp;gt;
        &amp;lt;/copy&amp;gt;
        &amp;lt;copy todir=&amp;#34;${dist.dir}/war/WEB-INF/classes&amp;#34;&amp;gt;
            &amp;lt;fileset dir=&amp;#34;${dist.dir}/classes&amp;#34;&amp;gt;
                &amp;lt;include name=&amp;#34;**/*.*&amp;#34;/&amp;gt;
            &amp;lt;/fileset&amp;gt;
        &amp;lt;/copy&amp;gt;
        &amp;lt;copy todir=&amp;#34;${dist.dir}/war/WEB-INF/lib&amp;#34; flatten=&amp;#34;true&amp;#34;&amp;gt;
            &amp;lt;fileset dir=&amp;#34;${lib.dir}&amp;#34;&amp;gt;
                &amp;lt;include name=&amp;#34;**/*.jar&amp;#34;/&amp;gt;
            &amp;lt;/fileset&amp;gt;
        &amp;lt;/copy&amp;gt;
    &amp;lt;/target&amp;gt;

    &amp;lt;!-- Deploys application on server. --&amp;gt;

    &amp;lt;target name=&amp;#34;deploy&amp;#34; depends=&amp;#34;rebuild, pre-deploy&amp;#34;
            description=&amp;#34;--&amp;gt; deploys application on server&amp;#34;&amp;gt;
        &amp;lt;mkdir dir=&amp;#34;${server.dir}/logs&amp;#34;/&amp;gt;
        &amp;lt;jar jarfile=&amp;#34;${war.name}.war&amp;#34; basedir=&amp;#34;${dist.dir}/war&amp;#34;/&amp;gt;
        &amp;lt;exec dir=&amp;#34;${server.dir}/bin&amp;#34; executable=&amp;#34;cmd&amp;#34;
                vmlauncher=&amp;#34;false&amp;#34; spawn=&amp;#34;true&amp;#34;&amp;gt;
            &amp;lt;env key=&amp;#34;JAVA_HOME&amp;#34; value=&amp;#34;${java.home}&amp;#34;/&amp;gt;
            &amp;lt;env key=&amp;#34;JPDA_TRANSPORT&amp;#34; value=&amp;#34;${jpda.transport}&amp;#34; /&amp;gt;
            &amp;lt;env key=&amp;#34;JPDA_ADDRESS&amp;#34; value=&amp;#34;${jpda.port}&amp;#34; /&amp;gt;
            &amp;lt;env key=&amp;#34;CATALINA_HOME&amp;#34; value=&amp;#34;${server.dir}&amp;#34;/&amp;gt;
            &amp;lt;arg value=&amp;#34;/c&amp;#34; /&amp;gt;
            &amp;lt;arg value=&amp;#34;${server.command} jpda start&amp;#34;/&amp;gt;
        &amp;lt;/exec&amp;gt;

        &amp;lt;copy file=&amp;#34;${war.name}.war&amp;#34; todir=&amp;#34;${deploy.dir}&amp;#34;/&amp;gt;
        &amp;lt;delete dir=&amp;#34;${dist.dir}&amp;#34; failonerror=&amp;#34;false&amp;#34; /&amp;gt;
        &amp;lt;delete file=&amp;#34;${war.name}.war&amp;#34; failonerror=&amp;#34;false&amp;#34; /&amp;gt;
    &amp;lt;/target&amp;gt;

    &amp;lt;!-- Un-deploys application from server. --&amp;gt;

    &amp;lt;target name=&amp;#34;undeploy&amp;#34;
            description=&amp;#34;--&amp;gt; un-deploys application from server&amp;#34;&amp;gt;
        &amp;lt;exec dir=&amp;#34;${server.dir}/bin&amp;#34; executable=&amp;#34;cmd&amp;#34;
                failifexecutionfails=&amp;#34;false&amp;#34; vmlauncher=&amp;#34;false&amp;#34;&amp;gt;
            &amp;lt;env key=&amp;#34;JAVA_HOME&amp;#34; value=&amp;#34;${java.home}&amp;#34;/&amp;gt;
            &amp;lt;env key=&amp;#34;CATALINA_HOME&amp;#34; value=&amp;#34;${server.dir}&amp;#34;/&amp;gt;
            &amp;lt;arg value=&amp;#34;/c&amp;#34; /&amp;gt;
            &amp;lt;arg value=&amp;#34;${server.command} stop&amp;#34;/&amp;gt;
        &amp;lt;/exec&amp;gt;

        &amp;lt;delete quiet=&amp;#34;true&amp;#34;&amp;gt;
            &amp;lt;fileset dir=&amp;#34;${deploy.dir}&amp;#34;&amp;gt;
                &amp;lt;include name=&amp;#34;${war.name}*&amp;#34;/&amp;gt;
            &amp;lt;/fileset&amp;gt;
        &amp;lt;/delete&amp;gt;

        &amp;lt;delete dir=&amp;#34;${deploy.dir}/${war.name}&amp;#34; failonerror=&amp;#34;false&amp;#34;/&amp;gt;
        &amp;lt;delete file=&amp;#34;${deploy.dir}/${war.name}.war&amp;#34; failonerror=&amp;#34;false&amp;#34; /&amp;gt;
        &amp;lt;delete dir=&amp;#34;${server.dir}/work/Catalina&amp;#34; failonerror=&amp;#34;false&amp;#34; /&amp;gt;
    &amp;lt;/target&amp;gt;

    &amp;lt;!-- Re-deploys application on server. --&amp;gt;

    &amp;lt;target name=&amp;#34;redeploy&amp;#34;
            depends=&amp;#34;undeploy,clean,deploy&amp;#34;
            description=&amp;#34;--&amp;gt; [undeploy,clean,deploy]&amp;#34;&amp;gt;
    &amp;lt;/target&amp;gt;

    &amp;lt;/project&amp;gt;

&amp;lt;/xml&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Собственно, все :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Действительно, как мне подсказывают, есть &lt;a href=&#34;http://tomcat.apache.org/tomcat-5.5-doc/deployer-howto.html#Deploying%20using%20the%20Client%20Deployer%20Package&#34;&gt;Tomcat Client Deployer&lt;/a&gt; &amp;ndash; пакет, имеющий свои средства (в том числе таски) для деплоинга через Ant, но требующий сервер быть всегда запущенным.&lt;/p&gt;

&lt;p&gt;И конечно же, чтобы избежать новых претензий, есть дополнительные средства, облегчающие этот процесс вроде &lt;a href=&#34;http://cruisecontrol.sourceforge.net/&#34;&gt;CruiseControl&lt;/a&gt; и так далее - при большом количестве проектов и действительно большой команде они бы, возможно, были бы хорошим решением (пока у меня такого опыта [к счастью?] нет).&lt;/p&gt;

&lt;p&gt;А ещё у &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; есть, например, &lt;a href=&#34;http://maven.apache.org/maven-1.x/plugins/war/goals.html&#34;&gt;war-плагин&lt;/a&gt;. Я об этом тоже знаю, правда-правда :).&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>ООП и JavaScript</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/javascript-oop/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/javascript-oop/</id>
                <updated>2007-08-19T00:46:00Z</updated>
                
                <summary type="html">В &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;предыдущей статье&lt;/a&gt; я представил на ваше рассмотрение небольшой кусок кода, который позволяет использовать три столпа ООП в JavaScript. Все это достигается несколько хитро, тем не менее я позволил себе чуточку изменить функцию &lt;code&gt;extend&lt;/code&gt;, дабы классы имели понятие о том, что такое статические константы (на самом деле константы конечно получились условные, но это, думаю, можно оправдать условностью их в самом JavaScript). Здесь я рассмотрю этот вопрос поподробнее и, видимо, буду расширять статью по мере его более глубокого понимания.</summary>
                <content type="html">&lt;p&gt;В &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;предыдущей статье&lt;/a&gt; я представил на ваше рассмотрение небольшой кусок кода, который позволяет использовать три столпа ООП в JavaScript. Все это достигается несколько хитро, тем не менее я позволил себе чуточку изменить функцию &lt;code&gt;extend&lt;/code&gt;, дабы классы имели понятие о том, что такое статические константы (на самом деле константы конечно получились условные, но это, думаю, можно оправдать условностью их в самом JavaScript). Здесь я рассмотрю этот вопрос поподробнее и, видимо, буду расширять статью по мере его более глубокого понимания.&lt;/p&gt;

&lt;p&gt;Итак, исходные данные (повторюсь, заимствованы из источников на &lt;a href=&#34;http://www.ajaxpath.com/javascript-inheritance&#34;&gt;AJAXPath&lt;/a&gt; и на &lt;a href=&#34;http://ajaxpatterns.org/Javascript_Inheritance&#34;&gt;AJAXPatterns&lt;/a&gt;):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function Class() { };

Class.prototype.construct = function() { };

Class.extend = function(def) {

    var classDef = function() {
        if (arguments[0] !== Class) {
            this.construct.apply(this, arguments);
        }
    };

    var proto = new this(Class);
    var superClass = this.prototype;

    for (var n in def) {
        var item = def[n];
        if (item instanceof Function) item.$ = superClass;
                else classDef[n] = item;
        proto[n] = item;
    }

    classDef.prototype = proto;
    classDef.extend = this.extend;

    return classDef;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Благодаря использованию трех этих функций, у вас появляется замечательная возможность строить довольно серьезные и обширные по конструкции фреймворки, не теряя при этом читабельности кода и возможности быстро найти нужное место дабы его изменить. Ну и плюс, конечно, практически все преимущества ООП.&lt;/p&gt;

&lt;p&gt;Эти три функции использовались как фундамент ООП-Drag’n&amp;#39;Drop фреймворка для крупного проекта на Java+Wicket. Я бы с удовольствием безвозмездно поделился бы его кодом, но по контракту этот код - собственность компании, а компания не хочет его рассекречивать. По этой причине я могу лишь дать, если нужно, наводящие мысли, наводящие на конкретные мысли :).&lt;/p&gt;

&lt;p&gt;Впрочем, ближе к делу. Для такого кода требуется пример. Я наваял тут небольшой скрипт, эмулирующий операционную систему Windows, надеюсь он подойдет:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/* пара вспомогательных функций */

function getInstanceOf(className) {
    // возвращает объект класса по имени класса
    return eval(&amp;#39;new &amp;#39; + className + &amp;#39;()&amp;#39;);
}

function pause(millis) // останавливает выполнение
    // скрипта на указанное количество миллисекунд
{
    var time = new Date();
    var curTime = null;
    do { curTime = new Date(); }
        while( curTime - time &amp;lt; millis);
}

/* === Абстрактная Операционная Система === */

var AbstractOS = Class.extend({

    construct: // конструктор, параметр - тип компьютера
        function(computerClassName) {
            // компьютер, на котором запускается ОС
            this._computer = getInstanceOf(computerClassName);
        },

    getComputer: function() { return this._computer; },

    reboot: // перезагрузка ОС
        function() {
            return this.getComputer().shutDown() &amp;amp;&amp;amp;
                   this.getComputer().startUp();
        },

    shutDown: // выключение ОС
        function() { return this.getComputer().shutDown(); },

    startUp: // запуск ОС
        function() { return this.getComputer().startUp(); },

    exec: // абстрактный (условно) метод запуска команды
        function(commandStr) { return false; },

    cycle: // запуск ОС, выполнение команды, отключение ОС
        function(cmdStr) {
            return this.startUp() &amp;amp;&amp;amp; this.exec(cmdStr) &amp;amp;&amp;amp;
                                     this.shutDown();
        }

});

/* === Синий Экран Смерти === */

var BSOD = Class.extend({

    launch: // запуск
        function() {
            alert(&amp;#39;You see the BSOD&amp;#39;);
            return true;
        }

});

/* === Операционная Система MS Windows === */

var MSWindows = AbstractOS.extend({
    // наследуется от абстрактной ОС

    // сообщения - статические константы (условно)
    STARTUP_MSG: &amp;#39;Windows Starting&amp;#39;,
    EXEC_MSG: &amp;#39;This program has performed an illegal operation&amp;#39;,
    REBOOT_MSG: &amp;#39;Do you really want to reboot your computer?&amp;#39;,

    construct: // конструктор, параметр - тип компьютера
        function(computerClassName) {
            // вызов родительского конструктора
            arguments.callee.$.construct.call(this, computerClassName);
            // кэш-е синего экрана смерти (ибо он будет один)
            this._bsod = new BSOD();
        },

    getBSOD: function() { return this._bsod; },

    reboot: // перегруженная перезагрузка
        function() {
            // вывод сообщения
            alert(MSWindows.REBOOT_MSG);
            // вызов родительского метода
            return arguments.callee.$.reboot.call(this);
        },

    shutDown: // перегруженное выключение
        function() {
            // запуск СЭС и, если он удачен - вызов
            // родительского метода. возвращается результат
            // удачности
            return (this.getBSOD().launch() &amp;amp;&amp;amp;
                    arguments.callee.$.shutDown.call(this));
        },

    startUp: //  перегруженная загрузка
        function() {
            // если удачно выполнился родительский метод
            if (arguments.callee.$.startUp.call(this)) {
                // выполнить необходимые операции
                pause(400);
                //setTimeout(&amp;#34;alert(&amp;#39;Windows Starting&amp;#39;)&amp;#34;, 400);
                // сообщить об удачной загрузке
                alert(MSWindows.STARTUP_MSG);
                return true;
            } else return false; // нет - так нет
        },

    exec: // перегруженное выполнение команды
        function(commandStr) {
            // если команда валидна - выдать результат
            // исполнения, иначе - выключиться
            return commandStr
                ? alert(MSWindows.EXEC_MSG)
                : this.shutDown();
        }

});

/* === Обычный Компьтер === */

var SimpleComputer = Class.extend({

    startUp: // при запуске выводит сообщение
        function() { alert(&amp;#39;Starting Up&amp;#39;); return true; },

    shutDown: // при выключении выводит сообщение
        function() { alert(&amp;#39;Shutting Down&amp;#39;); return true; }

});

/* проверочная функция */

function perform() {
    // инициируем ОС на обычном компьютере (инсталляция)
    var testOs = new MSWindows(&amp;#39;SimpleComputer&amp;#39;);
    // запускаем ОС
    testOs.startUp();
    // выполняем банальную команду
    testOs.exec(&amp;#39;ls -laF&amp;#39;);
    // выключаем ОС
    testOs.shutDown();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (не забывайте - после последнего объявления метода в классе запятой ставить не нужно, иначе Ослик (IE) обидится)&lt;/p&gt;

&lt;p&gt;Если предыдущий пример вам не понравился &amp;ndash; я могу предложить вам довольно полезный класс, который сильно помогает, если в вашем проекте понятие элемента DOM пересекается с понятием объекта, над которым производятся манипуляции:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var ElementWrapper = Class.extend({

    construct:
        function(elementId) {
            this.elementId = elementId;
            this.element = null;
            this._initializeElement();
        },

    _initializeElement:
        function() {
            var docElm = document.getElementById(this.elementId);
            if (!docElm) {
                this.element = document.createElement(&amp;#39;div&amp;#39;);
                this.element.id = this.elementId;
            } else {
                this.element = docElm;
            }
            this._assignListeners();
        },

    _assignListeners:
        function() {
            . . .
        },

    . . .

    reassignTo:
        function(elementId) {
            this.elementId = elementId;
            this.element = null;
            this._initializeElement();
        }

});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;От этого класса очень удобно наследовать классы, расширяющие функциональность элементов DOM. Также, теперь вы можете использовать код типа этого:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;var someElement = new ElementWrapper(&amp;#39;someElmId&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…и объект &lt;code&gt;someElement&lt;/code&gt; будет связан с элементом (оборачивать элемент) с &lt;code&gt;id&lt;/code&gt; &lt;em&gt;‘&lt;code&gt;SomeElmId&lt;/code&gt;’&lt;/em&gt;. Доступ к нему &amp;ndash; как к элементу DOM &amp;ndash; можно будет получить через свойство &lt;code&gt;someElement.element&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Приведенный ниже класс наследуется от &lt;code&gt;ElementWrapper&lt;/code&gt; и позволяет обращаться с обернутым элементом как с практически полноценным (неполноценным? :) ) графическим объектом (используются некоторые функции из &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;предыдущей статьи&lt;/a&gt;: &lt;code&gt;getElmAttr&lt;/code&gt;, &lt;code&gt;setElmAttr&lt;/code&gt;, &lt;code&gt;findOffsetHeight&lt;/code&gt;, &lt;code&gt;getPosition&lt;/code&gt;, &lt;code&gt;getAlignedPosition&lt;/code&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Как и у некоторых функций из &lt;a href=&#34;../16-useful-solutions-for-javascript&#34;&gt;предыдущей статьи&lt;/a&gt;, со временем код изменился &amp;ndash; в данном случае он оброс функциональностью и одновременно несколько упростился:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var DND_NS              = &amp;#39;dnd&amp;#39;; // to use in getAttributeNS and setAttributeNS

var DND_LWIDTH_ATTR     = &amp;#39;localWidth&amp;#39;;
var DND_LHEIGHT_ATTR    = &amp;#39;localHeight&amp;#39;;
var DND_LTOP_ATTR       = &amp;#39;localTop&amp;#39;;
var DND_LLEFT_ATTR      = &amp;#39;localLeft&amp;#39;;
var DND_BTOP_ATTR       = &amp;#39;baseTop&amp;#39;;
var DND_BLEFT_ATTR      = &amp;#39;baseLeft&amp;#39;;

var GraphicalElementWrapper = ExpandedElementWrapper.extend({

    _assignListeners:
        function() {
            // не назначать слушателей событий, если не необходимо
        },

    // ========[ функции установки необходимых для работы аттрибутов ]==========

    /* localLeft, localTop -- атрибуты, содержащие координату верхнего левого угла элемента
                              с учётом смещения [скроллинга];
       localWidth, localHeight -- атрибуты, содержащие реальную высоту и ширину элемента;
       baseLeft, baseTop -- атрибуты, содержащие координату верхнего левого угла элемента
                            без учёта смещения [скроллинга] */

    setLocalWidth:
        function(localWidth) {
            setElmAttr(this.element, DND_LWIDTH_ATTR, localWidth + &amp;#39;px&amp;#39;, DND_NS);
        },

    setLocalHeight:
        function(localHeight) {
            setElmAttr(this.element, DND_LHEIGHT_ATTR, localHeight + &amp;#39;px&amp;#39;, DND_NS);
        },

    setLocalLeft:
        function(localLeft) {
            setElmAttr(this.element, DND_LLEFT_ATTR, localLeft + &amp;#39;px&amp;#39;, DND_NS);
        },

    setLocalTop:
        function(localTop) {
            setElmAttr(this.element, DND_LTOP_ATTR, localTop + &amp;#39;px&amp;#39;, DND_NS);
        },

    setBaseLeft:
        function(baseLeft) {
            setElmAttr(this.element, DND_BLEFT_ATTR, baseLeft + &amp;#39;px&amp;#39;, DND_NS);
        },

    setBaseTop:
        function(baseTop) {
            setElmAttr(this.element, DND_BTOP_ATTR, baseTop + &amp;#39;px&amp;#39;, DND_NS);
        },

    getLocalWidth:
        function() {
            return getElmAttr(this.element, DND_LWIDTH_ATTR, DND_NS);
        },

    getLocalHeight:
        function() {
            return getElmAttr(this.element, DND_LHEIGHT_ATTR, DND_NS);
        },

    getLocalLeft:
        function() {
            return getElmAttr(this.element, DND_LLEFT_ATTR, DND_NS);
        },

    getLocalTop:
        function() {
            return getElmAttr(this.element, DND_LTOP_ATTR, DND_NS);
        },

    getBaseLeft:
        function() {
            return getElmAttr(this.element, DND_BLEFT_ATTR, DND_NS);
        },

    getBaseTop:
        function() {
            return getElmAttr(this.element, DND_BTOP_ATTR, DND_NS);
        },

    getOffsetWidth:
        function() {
            return this.element.offsetWidth;
        },

    getOffsetHeight:
        function() {
            return this.element.offsetHeight || this.element.style.pixelHeight || findOffsetHeight(this.element);
        },

    // =======[ / функции установки необходимых для работы аттрибутов ]=========

    show: // показать элемент
        function() {
            this.element.style.display    = &amp;#39;&amp;#39;;
            this.element.style.visibility = &amp;#39;visible&amp;#39;;
        },

    hide: // спрятать элемент
        function() {
            if (this.element.style.display != &amp;#39;none&amp;#39;) {
                this.element.style.display  = &amp;#39;none&amp;#39;;
            }
        },

    blank: // &amp;#34;забелить&amp;#34; эелемент
        function() {
            if (this.element.style.display != &amp;#39;&amp;#39;) {
                this.element.style.display    = &amp;#39;&amp;#39;;
                this.element.style.visibility = &amp;#39;hidden&amp;#39;;
            }
        },

    makeBlock: // сделать элемент блоком (иногда необходимо)
        function() {
            if (this.element.style.display != &amp;#39;block&amp;#39;) {
                this.element.style.display  = &amp;#39;block&amp;#39;;
            }
        },

    isPointInside: // находится ли точка внутри элемента, точка в формате {x, y}
        function(curPoint) {
            var localRight  = parseInt(this.getLocalLeft()) + parseInt(this.getLocalWidth())
                                       + this.element.scrollLeft;
            var localBottom = parseInt(this.getLocalTop())  + parseInt(this.getLocalHeight())
                                       + this.element.scrollTop;
            return (parseInt(this.getLocalLeft()) &amp;lt; curPoint.x) &amp;amp;&amp;amp;
                   (parseInt(this.getLocalTop())  &amp;lt; curPoint.y) &amp;amp;&amp;amp;
                   (localRight &amp;gt; curPoint.x) &amp;amp;&amp;amp; (localBottom &amp;gt; curPoint.y);
        },

    isElementNear: /* находится ли переданный элемент рядом с этим элементом
            (перекрывает область этого элемента больше чем половиной своей) */
        function(graphicalElement) {
            if (graphicalElement) {
                var elmCurPos = findPos(graphicalElement.element);
                var elmHalfHeight = parseInt(graphicalElement.getLocalHeight())/2;
                var elmHalfWidth = parseInt(graphicalElement.getLocalWidth())/2;
                var localLeft = (parseInt(this.getLocalLeft()) &amp;gt; 0 ? parseInt(this.getLocalLeft()) : 0);
                var localTop = (parseInt(this.getLocalTop()) &amp;gt; 0 ? parseInt(this.getLocalTop()) : 0);
                var leftCorrect = (elmCurPos.x &amp;gt; (localLeft - elmHalfWidth)) &amp;amp;&amp;amp;
                                  (elmCurPos.x &amp;lt; (localLeft + parseInt(this.getLocalWidth()) - elmHalfWidth));
                var topCorrect = (elmCurPos.y &amp;gt; (localTop - elmHalfHeight)) &amp;amp;&amp;amp;
                                 (elmCurPos.y &amp;lt; (localTop + parseInt(this.getLocalHeight()) - elmHalfHeight));
                return leftCorrect &amp;amp;&amp;amp; topCorrect;
            } else return false;
        },

    isElementInside: // находится ли переданный элемент внутри этого элемента
        function(graphicalElement) {
            if (graphicalElement) {
                var elmCurPos = findPos(graphicalElement.element);
                var elmHalfHeight = parseInt(graphicalElement.getOffsetHeight())/2;
                var elmHalfWidth = parseInt(graphicalElement.getOffsetWidth())/2;
                return this.isPointInside({x:(elmCurPos.x + elmHalfWidth),
                                       y:(elmCurPos.y + elmHalfHeight)})
            } else return false;
        },

    isLeftSide: // находится ли точка({x, y}) на левой стороне области элемента
        function(curPoint) {
            var elmHalfWidth = parseInt(this.getLocalWidth())/2;
            var localLeft = (parseInt(this.getLocalLeft()) &amp;gt; 0 ? parseInt(this.getLocalLeft()) : 0);
            return (curPoint.x &amp;gt;= localLeft) &amp;amp;&amp;amp; (curPoint.x &amp;lt; (localLeft + elmHalfWidth));
        },

    isRightSide: // находится ли точка({x, y}) на правой стороне элемента
        function(curPoint) {
            var elmHalfWidth = parseInt(this.getLocalWidth())/2;
            var localRight = ((parseInt(this.getLocalLeft()) &amp;gt; 0
                    ? parseInt(this.getLocalLeft())
                    : 0)) + parseInt(this.getLocalWidth());
            return (curPoint.x &amp;lt;= localRight) &amp;amp;&amp;amp; (curPoint.x &amp;gt; (localRight - elmHalfWidth));
        },

    inTopOf: // находится ли точка({x, y}) на верхней стороне области элемента
        function(curPoint) {
            var localTop    = (parseInt(this.getLocalTop()) &amp;gt; 0 ? parseInt(this.getLocalTop()) : 0);
            var localHeight = (parseInt(this.getLocalHeight()) &amp;gt; 0 ? parseInt(this.getLocalHeight()) : 0);
            if (this.element.clientHeight &amp;amp;&amp;amp; (this.element.clientHeight &amp;lt; localHeight))
                localHeight = this.element.clientHeight;
            return ((curPoint.y &amp;gt; localTop) &amp;amp;&amp;amp; (curPoint.y &amp;lt;= (localTop + (localHeight / 10))));
        },

    inBottomOf: // находится ли точка({x, y}) на нижней стороне области элемента
        function(curPoint) {
            var localTop    = (parseInt(this.getLocalTop()) &amp;gt; 0 ? parseInt(this.getLocalTop()) : 0);
            var localHeight = (parseInt(this.getLocalHeight()) &amp;gt; 0 ? parseInt(this.getLocalHeight()) : 0);
            if (this.element.clientHeight &amp;amp;&amp;amp; (this.element.clientHeight &amp;lt; localHeight))
                localHeight = this.element.clientHeight;
            return ((curPoint.y &amp;gt;= (localTop + localHeight - (localHeight / 10))) &amp;amp;&amp;amp;
                    (curPoint.y &amp;lt; (localTop + localHeight)));
        },

    recalc: // пересчитывает координаты элемента
           /* baseOffset в подавляющем большинстве случаев -- это
           { x: this.element.scrollLeft, y: this.element.scrollTop } */
        function(baseOffset) {

            var pos = findPos(this.element);

            this.setBaseLeft(pos.x);
            this.setBaseTop(pos.y);
            this.setLocalLeft(pos.x - (baseOffset ? baseOffset.x : 0));
            this.setLocalTop(pos.y - (baseOffset ? baseOffset.y : 0));
            this.setLocalWidth(parseInt(this.getOffsetWidth()));
            this.setLocalHeight(parseInt(this.getOffsetHeight()));
        },

    addOffset: // добавляет смещение к элементу, смещение в формате {x, y}
        function(offsetXY) {
            this.setLocalLeft(parseInt(this.getBaseLeft()) - offsetXY.x);
            this.setLocalTop(parseInt(this.getBaseTop()) - offsetXY.y);
        },

    copyElmRectParameters: // скопировать атрибуты с этого элемента на другой
        function(fromElm, toElm) {
            toElm = toElm || this.element;
            setElmAttr(toElm, DND_BTOP_ATTR, getElmAttr(fromElm, DND_BTOP_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_BLEFT_ATTR, getElmAttr(fromElm, DND_BLEFT_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LTOP_ATTR, getElmAttr(fromElm, DND_LTOP_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LLEFT_ATTR, getElmAttr(fromElm, DND_LLEFT_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LWIDTH_ATTR, getElmAttr(fromElm, DND_LWIDTH_ATTR, DND_NS), DND_NS);
            setElmAttr(toElm, DND_LHEIGHT_ATTR, getElmAttr(fromElm, DND_LHEIGHT_ATTR, DND_NS), DND_NS);
        }

});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оба этих класса, надеюсь, помогут вам при решении задач, связанных с опознаванием элементов DOM как графических объектов (например, Drag’n&amp;#39;Drop (здесь я наследовал класс перетаскиваемыx нод, классы областей, их содержащих (несколько с разными свойствами, отнаследованных друг от друга) и помощник для перетаскивания &amp;ndash; от &lt;code&gt;GraphicElementWrapper&lt;/code&gt;, а главный контейнер &amp;ndash; от &lt;code&gt;ElementWrapper&lt;/code&gt;) или, например, веб-приложение, эмулирующее работу оконного (здесь, когда я этим занимался, я наследовал перетаскиваемые элементы от &lt;code&gt;GraphicElementWrapper&lt;/code&gt;, а меню, статусбар, рабочую область &amp;ndash; от &lt;code&gt;ElementWrapper&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Как всё это работает &amp;ndash; довольно-таки непростой вопрос, но я постараюсь через некоторое время уделить внимание и ему, возможно в этой же статье… А пока &amp;ndash; кажется всё. Удач в JS-конструировании :).&lt;/p&gt;
&lt;h3 id=&#34;ссылки&#34;&gt;&lt;a href=&#34;#ссылки&#34; title=&#34;Ссылки&#34;&gt;Ссылки&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;про это…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;… - &lt;a href=&#34;http://dklab.ru/chicken/nablas/40.html&#34;&gt;по-русски, от Дмитрия Котерова&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… - &lt;a href=&#34;http://forum.dklab.ru/comments/nablas/40InheritanceInJavascript.html?start=80&amp;amp;sid=fac82f100376bdaceb0f5024b136fb0c&#34;&gt;более поздние впечатления - по-русски, от Дмитрия Котерова и его соратников&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://ajaxpatterns.org/Javascript_Inheritance&#34;&gt;на AjaxPatterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.ajaxpath.com/javascript-inheritance/&#34;&gt;на AJAXPath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.xml.com/pub/a/2006/06/07/object-oriented-javascript.html&#34;&gt;на XML.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.webreference.com/js/column79/&#34;&gt;на WebReference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.codeproject.com/aspnet/JsOOP1.asp&#34;&gt;на The Code Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.javascriptkit.com/javatutors/oopjs.shtml&#34;&gt;на JavaScript Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.devarticles.com/c/a/JavaScript/ObjectOriented-JavaScript-An-Introduction-to-Core-Concepts/&#34;&gt;на DevArticles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… - &lt;a href=&#34;http://chunkysoup.net/advanced/oojavascript1/&#34;&gt;как на этом делать галерею&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://www.kevlindev.com/tutorials/javascript/inheritance/index.htm&#34;&gt;кратко, от Kevin Lindsey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;a href=&#34;http://blogs.nitobi.com/dave/?p=166&#34;&gt;кратко, от Dave Johnson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… - &lt;a href=&#34;http://forum.vingrad.ru/index.php?showtopic=120066&amp;amp;view=findpost&amp;amp;p=1215304&#34;&gt;ссылки от Zeroglif&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
        
            <entry>
                <title>16 полезных решений для Javascript</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/16-useful-solutions-for-javascript/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/16-useful-solutions-for-javascript/</id>
                <updated>2007-08-12T00:46:00Z</updated>
                
                <summary type="html">Представляю вам набор функций, которые у меня лежат в отдельном файле &lt;code&gt;utils.js&lt;/code&gt; - это функции, которые я использую чаще всего. Они стараются быть кроссбраузерными и проверены на IE6/7, FF2 и Safari 2 и на боевой, сложной системе, в XHTML документах. Должны, по идее, работать, и на других, но не очень старых версиях браузеров - проверку браузера я использовал только в исключительных случаях. Некоторая часть из них, конечно же, просто нарыта на просторах интернета (где - обычно указано) и заимствована ввиду открытости, а большая часть - сконструирована из многих ресурсов и своих идей (и советов коллег), дабы работать на ура - поскольку часто в разных скриптах не учитываются разные тонкости, которые, тем не менее - при ближайшем рассмотрении - оказываются общностями :), ну и быть довольно читабельными.</summary>
                <content type="html">&lt;p&gt;Представляю вам набор функций, которые у меня лежат в отдельном файле &lt;code&gt;utils.js&lt;/code&gt; - это функции, которые я использую чаще всего. Они стараются быть кроссбраузерными и проверены на IE6/7, FF2 и Safari 2 и на боевой, сложной системе, в XHTML документах. Должны, по идее, работать, и на других, но не очень старых версиях браузеров - проверку браузера я использовал только в исключительных случаях. Некоторая часть из них, конечно же, просто нарыта на просторах интернета (где - обычно указано) и заимствована ввиду открытости, а большая часть - сконструирована из многих ресурсов и своих идей (и советов коллег), дабы работать на ура - поскольку часто в разных скриптах не учитываются разные тонкости, которые, тем не менее - при ближайшем рассмотрении - оказываются общностями :), ну и быть довольно читабельными.&lt;/p&gt;

&lt;p&gt;Фукнции разделены тематически:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#%D0%BE%D0%BE%D0%BF&#34;&gt;ООП&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;обеспечение (или, вернее сказать - эмуляция) возможности использовать принципы ООП в JavaScript&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%B0%D1%8F-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C-js&#34;&gt;Объектная модель JS&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;использование и расширение встроенных объектов JS&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B0&#34;&gt;Определение браузера&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;чтобы использовать в тех редких случаях, когда это все-таки неизбежно необходимо :)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#%D0%BA%D0%BE%D0%BE%D1%80%D0%B4%D0%B8%D0%BD%D0%B0%D1%82%D1%8B-%D0%BF%D0%BE%D0%B7%D0%B8%D1%86%D0%B8%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5&#34;&gt;Координаты / Позиционирование&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;вычисление координат и позиционирование объектов - ввиду того, что это часто довольно хитрая штука&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#dom&#34;&gt;DOM&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;работа с объектной моделью документа&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#ajax&#34;&gt;AJAX&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;вспомогательные функции для AJAX &amp;ndash; так как это средство часто применимо :)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#%D0%BB%D0%BE%D0%B3%D0%B3%D0%B8%D0%BD%D0%B3&#34;&gt;Логгинг&lt;/a&gt;&lt;/strong&gt; &amp;ndash; &lt;em&gt;иногда он нужен чтобы везде :)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (советы по оптимизации и исправлениям приветствуются)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (при написании статьи примеры были взяты из рабочего кода, но в некоторых навскидку изменены названия функций и даже некоторая функциональность. также к коду функций было применено такое форматирование как переносы строк - на данный момент - без проверки последующей работоспособности. как только код будет полностью проверен на работоспособность - этот комментарий будет отсюда удален)&lt;/p&gt;
&lt;h3 id=&#34;ооп&#34;&gt;&lt;a href=&#34;#ооп&#34; title=&#34;ООП&#34;&gt;ООП&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-1&#34;&gt;&lt;/a&gt; &lt;em&gt;1.&lt;/em&gt; Первый блок &amp;ndash; набор из трех функций (две из которых пустые :) ), позволяющих применять (эмулировать?) все три принципа &lt;strong&gt;ООП&lt;/strong&gt; в &lt;strong&gt;JavaScript&lt;/strong&gt;. Из нескольких предложенных на &lt;a href=&#34;http://www.ajaxpath.com/javascript-inheritance&#34;&gt;AJAXPath&lt;/a&gt; и на &lt;a href=&#34;http://ajaxpatterns.org/Javascript_Inheritance&#34;&gt;AJAXPatterns&lt;/a&gt; вариантов я выбрал именно этот ввиду его одновременной понятности и быстрой скорости выполнения и немного его видоизменил так? чтобы отдельно объявленные свойства воспринимались как статические константы.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function Class() { }

Class.prototype.construct = function() { };

Class.extend = function(def) {
    var classDef = function() {
        if (arguments[0] !== Class) {
            this.construct.apply(this, arguments);
        }
    };

    var proto = new this(Class);
    var superClass = this.prototype;

    for (var n in def) {
        var item = def[n];
        if (item instanceof Function) item.$ = superClass; else classDef[n] = item;
        proto[n] = item;
    }

    classDef.prototype = proto;

    classDef.extend = this.extend;
    return classDef;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Полные примеры использования относительно велики, поэтому я их вынесу в &lt;a href=&#34;../javascript-oop&#34;&gt;следующую статью&lt;/a&gt; и проследую далее. Пару простых примеров вы можете наблюдать в пунктах &lt;em&gt;&lt;a href=&#34;#sol-2&#34;&gt;2&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&#34;#sol-5&#34;&gt;5&lt;/a&gt;&lt;/em&gt; и &lt;em&gt;&lt;a href=&#34;#sol-15&#34;&gt;15&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;sol-2&#34;&gt;&lt;/a&gt; &lt;em&gt;2.&lt;/em&gt; Следующая функция &amp;ndash; простая, но изящная &amp;ndash; полезна в сочетании с предыдущим набором &amp;ndash; она &lt;strong&gt;создает функцию-ссылку на метод&lt;/strong&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function createMethodReference(object, methodName) {
    return function () {
        return object[methodName].apply(object, arguments);
    };
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь можно, например, сделать так:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var ScrollingHandler = Class.extend({

    construct:
        function(elementId) {
            this._elementId = elementId;
            this.assignListener();
        },

    assignListener:
        function() {
            var scrollControlElem = document.getElementById(this._elementId);
            if (scrollControlElem) {
                scrollControlElem.onscroll = createMethodReference(this, &amp;#34;_onElementScroll&amp;#34;);
            }
        },

    _onElementScroll:
        function(ev) {
            ev = ev || window.event;
            alert(&amp;#34;please stop scrolling, I&amp;#39;ve already got an event: &amp;#34; + ev);
        }
});

var elmScrollHandler = new ScrollHandler(&amp;#39;SomeElmId&amp;#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Объект этого класса можно будет ассоциировать с событием скроллинга элемента с указанным ID и совершать что-либо по этому случаю.&lt;/p&gt;
&lt;h3 id=&#34;объектная-модель-js&#34;&gt;&lt;a href=&#34;#объектная-модель-js&#34; title=&#34;Объектная модель JS&#34;&gt;Объектная модель JS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-3&#34;&gt;&lt;/a&gt; &lt;em&gt;3.&lt;/em&gt; Нижеприведенная функция &lt;strong&gt;клонирует&lt;/strong&gt; любой &lt;strong&gt;объект&lt;/strong&gt; вместе со всеми его свойствами:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function cloneObj(objToClone) {
    var clone = [];
    for (i in objToClone) {
        clone[i] = objToClone[i];
    }
    return clone;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Использование &amp;ndash; простейшее до невозможности:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var clonedObj = cloneObj(objToClone);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-4&#34;&gt;&lt;/a&gt; &lt;em&gt;4.&lt;/em&gt; &lt;strong&gt;Конвертер объектов&lt;/strong&gt;, следующая функция, позволяет удобно использовать всяческие условные (и претендующие ими быть :) ) конструкции вида &lt;code&gt;if (tablet.toLowerCase() in oc([&amp;#39;cialis&amp;#39;,&amp;#39;mevacor&amp;#39;,&amp;#39;zocor&amp;#39;])) { alert(’I will not!’) };&lt;/code&gt;. Код заимствован &lt;a href=&#34;http://snook.ca/archives/javascript/testing_for_a_v/&#34;&gt;отсюда&lt;/a&gt;.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function oc(a) {
    var o = {};
    for(var i=0;i&amp;lt;a.length;i++) {
        o[a[i]]=&amp;#39;&amp;#39;;
    }
    return o;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для примера возьмем ситуацию, когда сначала требуется определить, входит ли объект в какое-либо множество одиночных объектов, а затем - не входит ли он в сочетании с другим объектом в другое множество пар объектов. Допустим, на вечеринку пускают одиночек только с определенными именами, либо пары из списка с позволенными сочетаниями имен:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function isPersonAllowed(maleName, femaleName) {
    var pairsAllowed = new Array([ &amp;#34;John&amp;#34;, &amp;#34;Yoko&amp;#34; ],
            [ &amp;#34;Bill&amp;#34;,  &amp;#34;Monica&amp;#34; ], [ &amp;#34;Phil&amp;#34;,  &amp;#34;Sue&amp;#34; ],
            [ &amp;#34;Jason&amp;#34;,  &amp;#34;Harrison&amp;#34; ], [ &amp;#34;Adam&amp;#34;,  &amp;#34;Eve&amp;#34; ]);
    var singlesAllowed = new Array(&amp;#34;Michael&amp;#34;, &amp;#34;Pete&amp;#34;, &amp;#34;John&amp;#34;,
            &amp;#34;Dave&amp;#34;, &amp;#34;Matthew&amp;#34;);
    return (femaleName
            ? ([maleName, femaleName] in oc(pairsAllowed))
            : (maleName in oc(singlesAllowed)));
}

alert(isPersonAllowed(&amp;#34;Jack&amp;#34;)); // false
alert(isPersonAllowed(&amp;#34;Adam&amp;#34;)); // false
alert(isPersonAllowed(&amp;#34;John&amp;#34;)); // true
alert(isPersonAllowed(&amp;#34;Phil&amp;#34;,&amp;#34;Marlo&amp;#34;)); // false
alert(isPersonAllowed(&amp;#34;Jason&amp;#34;,&amp;#34;Harrison&amp;#34;)); // true
alert(isPersonAllowed(&amp;#34;Martin&amp;#34;,&amp;#34;Luther&amp;#34;)); // false

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-5&#34;&gt;&lt;/a&gt; &lt;em&gt;5.&lt;/em&gt; Функция, позволяющая создавать &lt;strong&gt;хэш&lt;/strong&gt; сначала кажется немного излишней: объекты в JavaScript &amp;ndash; те же хеши, но вот иногда в качестве имени проперти/ключа требуется задать значение переменной и тогда приходит на помощь функия &lt;code&gt;Hash&lt;/code&gt;. (да-да, конечно же есть встроенные возможности, но так возможно просто немного очевиднее :) &amp;ndash; можете исключить эту функцию из полезных, если хотите :) )&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function Hash()
{
    this.length = 0;
    this.items = new Array();
    for (var i = 0; i &amp;lt; arguments.length; i++) {
        this.items[arguments[i][0]] = arguments[i][1];
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Доступ к элементам производится засчет свойства &lt;code&gt;items&lt;/code&gt; (кстати, следует, может, в более тяжелой версии добавить &lt;code&gt;keys&lt;/code&gt; :) ?):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var Game = Class.extend({

    STG_STOP: 0,
    STG_START: 1,
    STG_LOADING: 2,
    STG_MENU: 3,
    STG_PROCESS: 4,

    construct:
        function() { this._stage = Game.STG_LOADING; },

    getStage:
        function() { return this._stage; }

});

var stateMap = new Hash(
            [ Game.STG_START,   &amp;#34;start&amp;#34;    ],
            [ Game.STG_LOADING, &amp;#34;loading&amp;#34;  ],
            [ Game.STG_MENU,    &amp;#34;menu&amp;#34;     ],
            [ Game.STG_PROCESS, &amp;#34;process&amp;#34;  ],
            [ Game.STG_STOP,    &amp;#34;stopping&amp;#34; ]);

var someGame = new Game();
alert(&amp;#34;You are in &amp;#34;+stateMap.items[someGame.getStage()]+&amp;#34; stage!&amp;#34;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-6&#34;&gt;&lt;/a&gt; &lt;em&gt;6.&lt;/em&gt; Три других функции просто упрощают и/или делают очевиднее некоторые операции: &lt;code&gt;getTime&lt;/code&gt; на 11 символов сокращает доступ к получению &lt;strong&gt;текущего времени&lt;/strong&gt;, &lt;code&gt;getTimeDelta&lt;/code&gt; позволяет найти &lt;strong&gt;промежуток в милисекундах&lt;/strong&gt; между отрезками времени (или указанным моментом и текущим временем, в формате с одним параметром), а последняя функция расширяет &lt;strong&gt;свойства&lt;/strong&gt; объекта &lt;strong&gt;&lt;code&gt;Number&lt;/code&gt;** для того чтобы &lt;strong&gt;при&lt;/strong&gt; его **значении &lt;code&gt;NaN&lt;/code&gt;&lt;/strong&gt; можно было чуть быстрее &lt;strong&gt;получить 0&lt;/strong&gt;.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function getTime() {
    return new Date().getTime();
}

function getTimeDelta(timeBegin, timeEnd) {
    timeEnd = timeEnd || getTime();
    return timeEnd - timeBegin;
}

Number.prototype.NaN0=function() { return isNaN(this) ? 0 : this; }

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;определение-браузера&#34;&gt;&lt;a href=&#34;#определение-браузера&#34; title=&#34;Определение браузера&#34;&gt;Определение браузера&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-7&#34;&gt;&lt;/a&gt; &lt;em&gt;7.&lt;/em&gt; Небольшой объект, поименованные по названиям браузеров свойства которого &amp;ndash; суть условия. Этим достигается более читабельное (но не настолько скурпулезное насколько могло бы быть) &lt;strong&gt;определение большинства типов браузеров&lt;/strong&gt;. Этот объект был заимствован мной из проекта, в котором я учавствовал &amp;ndash; и как-то прижился, но, думаю, истинные авторы всё-таки где-то в сети, да и код не так уж сложен и громоздок чтобы на него сильно претендовать :). Кроме того, он конечно не идеально надежен (а некоторые говорят что не надежен вообще), но пока на перечисленных браузерах он меня не подвел ни разу :). Если вас не устраивает такое положение дел - вы можете использовать нечто похожее &lt;a href=&#34;http://www.howtocreate.co.uk/jslibs/htmlhigh/sniffer.html&#34;&gt;с HowToCreate&lt;/a&gt;. И повторюсь: данное определение я стараюсь использовать (как и сказано, например, по ссылке) &amp;ldquo;&lt;em&gt;только в случае если известен конкретный баг в конкретном браузере и его нужно обойти&lt;/em&gt;&amp;rdquo;. Также &amp;ndash; несложно пересобрать этот объект в одно длинное условие, для меньшей скорости исполнения (см., опять же, &lt;a href=&#34;http://www.howtocreate.co.uk/jslibs/htmlhigh/sniffer.html&#34;&gt;ссылку&lt;/a&gt;)&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var USER_DATA = {

    Browser: {
        KHTML: /Konqueror|KHTML/.test(navigator.userAgent) &amp;amp;&amp;amp;
                !/Apple/.test(navigator.userAgent),
        Safari: /KHTML/.test(navigator.userAgent) &amp;amp;&amp;amp;
                /Apple/.test(navigator.userAgent),
        Opera: !!window.opera,
        MSIE: !!(window.attachEvent &amp;amp;&amp;amp; !window.opera),
        Gecko: /Gecko/.test(navigator.userAgent) &amp;amp;&amp;amp;
                !/Konqueror|KHTML/.test(navigator.userAgent)
    },

    OS: {
        Windows: navigator.platform.indexOf(&amp;#34;Win&amp;#34;) &amp;gt; -1,
        Mac: navigator.platform.indexOf(&amp;#34;Mac&amp;#34;) &amp;gt; -1,
        Linux: navigator.platform.indexOf(&amp;#34;Linux&amp;#34;) &amp;gt; -1
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;координаты-позиционирование&#34;&gt;&lt;a href=&#34;#координаты-позиционирование&#34; title=&#34;Координаты / Позиционирование&#34;&gt;Координаты / Позиционирование&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-8&#34;&gt;&lt;/a&gt; &lt;em&gt;8.&lt;/em&gt; Набор функций, позволяющих получить &lt;strong&gt;координаты элемента&lt;/strong&gt; на экране пользователя.&lt;/p&gt;

&lt;p&gt;Если ваш документ статичен относительно окна и не имеет скроллбаров &amp;ndash; лучше использовать функцию &lt;code&gt;getPosition&lt;/code&gt; &amp;ndash; так будет быстрее. В обратном случае используйте &lt;code&gt;getAlignedPosition&lt;/code&gt; &amp;ndash; она учитывает положения скроллбаров. Только обратите внимание: значение &lt;code&gt;top&lt;/code&gt; или &lt;code&gt;left&lt;/code&gt; у элемента может быть орицательным, если элемент частично расположен за пределами окна &amp;ndash; для синхронизации с курсором мыши иногда нужно обнулить в этом случае высоту. Основной скрипт позаимствован из &lt;a href=&#34;http://blog.firetree.net/2005/07/04/javascript-find-position/&#34;&gt;одного блога&lt;/a&gt;, Aligned-версия &amp;ndash; результат поисков по сусекам и совмещения с информацией из &lt;a href=&#34;http://xhtml.ru/2007/03/10/advanced-thumbnail-creator/&#34;&gt;двух&lt;/a&gt; &lt;a href=&#34;http://www.habrahabr.ru/blog/webdev/13897.html&#34;&gt;статей&lt;/a&gt; (при обнаружении &lt;code&gt;DOCTYPE&lt;/code&gt; IE входит в свой собственный, несколько непредсказуемый, режим). Также этот метод скомбинирован с получением позиций из &lt;a href=&#34;http://www.webreference.com/programming/javascript/mk/column2/Dragging%20and%20Dropping%20in%20JavaScript_files/drag_drop.js&#34;&gt;исходников&lt;/a&gt; &lt;a href=&#34;http://www.webreference.com/programming/javascript/mk/column2/&#34;&gt;руководства по Drag’n&amp;#39;Drop&lt;/a&gt;. Обратите внимание: здесь используется функция &lt;code&gt;NaN0&lt;/code&gt; из пункта &lt;em&gt;&lt;a href=&#34;#sol-6&#34;&gt;6&lt;/a&gt;&lt;/em&gt;, вам нужно будет добавить ее в скрипт чтобы все работало как надо :) (спасибо, &lt;a href=&#34;http://invisibleman.ru/&#34;&gt;Homer&lt;/a&gt;).&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function getPosition(e) {
    var left = 0;
    var top  = 0;

    while (e.offsetParent) {
        left += e.offsetLeft + (e.currentStyle ? (parseInt(e.currentStyle.borderLeftWidth)).NaN0() : 0);
        top  += e.offsetTop  + (e.currentStyle ? (parseInt(e.currentStyle.borderTopWidth)).NaN0() : 0);
        e = e.offsetParent;
    }

    left += e.offsetLeft + (e.currentStyle ? (parseInt(e.currentStyle.borderLeftWidth)).NaN0() : 0);
    top  += e.offsetTop  + (e.currentStyle ? (parseInt(e.currentStyle.borderTopWidth)).NaN0(): 0);

    return {x:left, y:top};
}

var IS_IE = USER_DATA[&amp;#39;Browser&amp;#39;].MSIE;

function getAlignedPosition(e) {
    var left = 0;
    var top  = 0;

    while (e.offsetParent) {
        left += e.offsetLeft + (e.currentStyle ? (parseInt(e.currentStyle.borderLeftWidth)).NaN0() : 0);
        top  += e.offsetTop  + (e.currentStyle ? (parseInt(e.currentStyle.borderTopWidth)).NaN0() : 0);
        e  = e.offsetParent;
        if (e.scrollLeft) {left -= e.scrollLeft; }
        if (e.scrollTop)  {top  -= e.scrollTop; }
    }

    var docBody = document.documentElement ? document.documentElement : document.body;

    left += e.offsetLeft + (e.currentStyle ?
                (parseInt(e.currentStyle.borderLeftWidth)).NaN0()
                : 0) +
        (IS_IE ? (parseInt(docBody.scrollLeft)).NaN0() : 0) -
        (parseInt(docBody.clientLeft)).NaN0();
    top  += e.offsetTop  + (e.currentStyle ?
                (parseInt(e.currentStyle.borderTopWidth)).NaN0()
                :  0) +
        (IS_IE ? (parseInt(docBody.scrollTop)).NaN0() : 0) -
        (parseInt(docBody.clientTop)).NaN0();

    return {x:left, y:top};
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Со временем две приведённые функции слились в одну, несколько более упрощённую, универсальную и при этом корректную (однако, если вы определяете позицию элемента внутри другого элемента, имеющего скроллинг &amp;ndash; не забудьте к координатам первого прибавить значение &lt;code&gt;scrollTop&lt;/code&gt; или, соответсвенно, &lt;code&gt;scrollLeft&lt;/code&gt; последнего: если вы сделаете это в отдельном месте &amp;ndash; ваш код будет работать быстрее и выглядеть логичнее, чем если бы вы использовали Aligned-версию):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function findPos(e) {
    var baseEl = e;
    var curleft = curtop = 0;
    if (e.offsetParent) {
        do {
            curleft += e.offsetLeft;
            curtop += e.offsetTop;
        } while (e = e.offsetParent);
    }
    var docBody = document.documentElement ? document.documentElement : document.body;
    if (docBody) {
        curleft += (baseEl.currentStyle?(parseInt(baseEl.currentStyle.borderLeftWidth)).NaN0():0) +
                   (IS_IE ? (parseInt(docBody.scrollLeft)).NaN0() : 0) - (parseInt(docBody.clientLeft)).NaN0();
        curtop  += (baseEl.currentStyle?(parseInt(baseEl.currentStyle.borderTopWidth)).NaN0():0) +
                   (IS_IE ? (parseInt(docBody.scrollTop)).NaN0() : 0) - (parseInt(docBody.clientTop)).NaN0();
    }
    return {x: curleft, y:curtop};
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-9&#34;&gt;&lt;/a&gt; &lt;em&gt;9.&lt;/em&gt; Определить текущие &lt;strong&gt;координаты курсора&lt;/strong&gt; мыши и &lt;strong&gt;смещение элемента относительно курсора&lt;/strong&gt; легко, если использовать соответствующие функции (собранные на &lt;a href=&#34;http://xhtml.ru/2007/03/10/advanced-thumbnail-creator/&#34;&gt;основе&lt;/a&gt; &lt;a href=&#34;http://www.habrahabr.ru/blog/webdev/13897.html&#34;&gt;трёх&lt;/a&gt; &lt;a href=&#34;http://quirksmode.org/js/events_properties.html&#34;&gt;источников&lt;/a&gt;):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function mouseCoords(ev){
    if (ev.pageX || ev.pageY) {
        return {x:ev.pageX, y:ev.pageY};
    }
    var docBody = document.documentElement ? document.documentElement : document.body;

    return {
        x: ev.clientX + docBody.scrollLeft - docBody.clientLeft,
        y: ev.clientY + docBody.scrollTop  - docBody.clientTop
    };
}

function getMouseOffset(target, ev, aligned) {
    ev = ev || window.event;
    if (aligned == null) aligned = false;

    var docPos    = aligned
        ? getAlignedPosition(target)
        : getPosition(target);
    var mousePos  = mouseCoords(ev);

    return {
        x: mousePos.x - docPos.x,
        y: mousePos.y - docPos.y
    };
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Обновлённая версия функии &lt;code&gt;getMouseOffset&lt;/code&gt; для варианта с одной функцией нахождения позиции:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function getMouseOffset(target, ev) {
    ev = ev || window.event;

    var docPos = findPos(target);
    var mousePos = mouseCoords(ev);

    return {
        x: mousePos.x - docPos.x,
        y: mousePos.y - docPos.y
    };
}

&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;Последняя функция также может использоваться в двух режимах засчет атрибута &lt;code&gt;aligned&lt;/code&gt; и предназначена для удобного использования в обработчиках событий, например:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function onMouseMove(elm, ev) {
    var mouseOffset = getMouseOffset(elm, ev);
    console.log(&amp;#34;x: %d; y: %d&amp;#34;, mouseOffset.x, mouseOffset.y);
}

&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
&amp;lt;div id=&amp;#34;someId&amp;#34; onmousemove=&amp;#34;onMouseMove(this, event);
    return false;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (если данные функции (&lt;em&gt;вдруг&lt;/em&gt; :) ) не заработают в каком-либо определенном случае &amp;ndash; прошу сообщать &amp;ndash; хочется добиться максимальной их переносимости)&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;sol-10&#34;&gt;&lt;/a&gt; &lt;em&gt;10.&lt;/em&gt; Определение &lt;strong&gt;высоты элемента&lt;/strong&gt; иногда более нелегкая задача чем определение других его параметров, но эти две функции придут на помощь:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function findOffsetHeight(e) {
    var res = 0;
    while ((res == 0) &amp;amp;&amp;amp; e.parentNode) {
        e = e.parentNode;
        res = e.offsetHeight;
    }
    return res;
}

function getOffsetHeight(e) {
    return this.element.offsetHeight ||
           this.element.style.pixelHeight ||
           findOffsetHeight(e);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dom&#34;&gt;&lt;a href=&#34;#dom&#34; title=&#34;DOM&#34;&gt;DOM&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-11&#34;&gt;&lt;/a&gt; &lt;em&gt;11.&lt;/em&gt; Иногда нужно &lt;strong&gt;пройти рекурсивно по дереву DOM&lt;/strong&gt;, начиная с некоторого элемента и выполняя некоторую функцию над каждым из потомков, забираясь в самую глубь. В DOM есть объект &lt;code&gt;TreeWalker&lt;/code&gt;, но он не работает в IE и не всегда удобен/прост в использовании. Функция &lt;code&gt;walkTree&lt;/code&gt; позволяет выполнить некоторую другую функцию над каждым из элементов и позволяет также передать в нее некоторый пакет данных. Функция &lt;code&gt;searchTree&lt;/code&gt; отличается от нее тем, что останавливает проход по дереву при первом удачном результате и возвращает результат в точку вызова:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function walkTree(node, mapFunction, dataPackage) {
    if (node == null) return;
    mapFunction(node, dataPackage);
    for (var i = 0; i &amp;lt; node.childNodes.length; i++) {
        walkTree(node.childNodes[i], mapFunction, dataPackage);
    }
}

function searchTree(node, searchFunction, dataPackage) {
    if (node == null) return;
    var funcResult = searchFunction(node, dataPackage);
    if (funcResult) return funcResult;
    for (var i = 0; i &amp;lt; node.childNodes.length; i++) {
        var searchResult = searchTree(node.childNodes[i], searchFunction, dataPackage);
        if (searchResult) return searchResult;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В примере используются функции &lt;code&gt;setElmAttr&lt;/code&gt; и &lt;code&gt;getElmAttr&lt;/code&gt;, которые будут рассмотрены позже - в пункте &lt;em&gt;&lt;a href=&#34;#sol-13&#34;&gt;13&lt;/a&gt;&lt;/em&gt;. По сути они делают то же что и &lt;code&gt;getAttribute&lt;/code&gt; и &lt;code&gt;setAttribute&lt;/code&gt;. Пояснения к используемой функции &lt;code&gt;oc&lt;/code&gt; вы можете посмотреть в пукте &lt;em&gt;&lt;a href=&#34;#sol-4&#34;&gt;4&lt;/a&gt;&lt;/em&gt;. В первой части примера корневому элементу атрибут &amp;ldquo;&lt;code&gt;nodeType&lt;/code&gt;&amp;rdquo; устанавливается в &amp;ldquo;&lt;code&gt;root&lt;/code&gt;&amp;rdquo;, а всем его потомкам - в &amp;ldquo;&lt;code&gt;child&lt;/code&gt;&amp;rdquo;. Во второй части демонстрируется также передача пакета данных &amp;ndash; при нахождении первого элемента с атрибутом &amp;ldquo;&lt;code&gt;class&lt;/code&gt;&amp;rdquo;, равным одному из перечисленных в пакете имен, атрибут &amp;ldquo;&lt;code&gt;isTarget&lt;/code&gt;&amp;rdquo; ему устанавливается в &amp;ldquo;&lt;code&gt;true&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var rootElement = document.getElementById(&amp;#39;rootElm&amp;#39;);

setElmAttr(rootElement, &amp;#34;nodeType&amp;#34;, &amp;#34;root&amp;#34;);
var childNodeFunc = function(node) {
    if (node.nodeName &amp;amp;&amp;amp; (node.nodeName !== &amp;#39;#text&amp;#39;)
                      &amp;amp;&amp;amp; (node.nodeName !== &amp;#39;#comment&amp;#39;)) {
        setElmAttr(node, &amp;#34;nodeType&amp;#34;, &amp;#34;child&amp;#34;);
    }
}
walkTree(rootElement, childNodeFunc);

var findTargetNode = function(node, classList) {
    if ((node.nodeName &amp;amp;&amp;amp; (node.nodeName !== &amp;#39;#text&amp;#39;)
                       &amp;amp;&amp;amp; (node.nodeName !== &amp;#39;#comment&amp;#39;)) &amp;amp;&amp;amp;
                       (getElmAttr(node, &amp;#34;class&amp;#34;) in oc(classList))) {
        return node;
    }
}
var targetNode = searchTree(rootElement, findTargetNode,
                    [&amp;#39;headingClass&amp;#39;, &amp;#39;footerClass&amp;#39;, &amp;#39;tableClass&amp;#39;]);
setElmAttr(targetNode, &amp;#34;isTarget&amp;#34;, true);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; (будьте осторожны с использованием этих функций и постарайтесь избежать их чересчур частого вызова (более раза в секунду) даже на средней ветвистости дереве - они могут пожрать немало ресурсов. или, по крайней мере, вызывайте их в фоне через &lt;code&gt;setTimeout&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;sol-12&#34;&gt;&lt;/a&gt; &lt;em&gt;12.&lt;/em&gt; &lt;strong&gt;Удаление узлов&lt;/strong&gt; - иногда необходимая задача. Иногда нужно удалить сам узел, а иногда &amp;ndash; только его потомков. Функция &lt;code&gt;removeChildrenRecursively&lt;/code&gt; рекурсивно удаляет всех потомков указанного узла, не затрагивая, конечно, его самого. Функция &lt;code&gt;removeElementById&lt;/code&gt;, как и сказано в названии, удалает узел по его &lt;code&gt;id&lt;/code&gt; - при всей простоте задачи способ относительно хитрый:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function removeChildrenRecursively(node)
{
    if (!node) return;
    while (node.hasChildNodes()) {
        removeChildrenRecursively(node.firstChild);
        node.removeChild(node.firstChild);
    }
}

function removeElementById(nodeId) {
    document.getElementById(nodeId).parentNode.removeChild(
                            document.getElementById(nodeId));
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-13&#34;&gt;&lt;/a&gt; &lt;em&gt;13.&lt;/em&gt; Казалось бы &amp;ndash; элементарная задача работы с атрибутами элемента &amp;ndash; иногда наталкивает на абсолютно неожиданные проблемы: например, IE бросает исключение при попытке доступа к атрибутам высоты/ширины элемента &lt;code&gt;table&lt;/code&gt;, а у Safari отличается способ доступа к атрибутам с пространствами имен. Приведенные ниже функции обходят все встреченные мной проблемы без сильного ущерба к скорости выполнения (конечно же, в стандартных случаях лучше использовать встроенные функции):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var IS_SAFARI = USER_DATA[&amp;#39;Browser&amp;#39;].Safari;

function getElmAttr(elm, attrName, ns) {
    // IE6 fails getAttribute when used on table element
    var elmValue = null;
    try {
        elmValue = (elm.getAttribute
                    ? elm.getAttribute((ns ? (ns + NS_SYMB) : &amp;#39;&amp;#39;)
                    + attrName) : null);
    } catch (e) { return null; }
    if (!elmValue &amp;amp;&amp;amp; IS_SAFARI) {
        elmValue = (elm.getAttributeNS
                    ? elm.getAttributeNS(ns, attrName)
                    : null);
    }
    return elmValue;
}

function setElmAttr(elm, attrName, value, ns) {
    if (!IS_SAFARI || !ns) {
        return (elm.setAttribute
                    ? elm.setAttribute((ns ? (ns + NS_SYMB) : &amp;#39;&amp;#39;)
                    + attrName, value) : null);
    } else {
        return (elm.setAttributeNS
                    ? elm.setAttributeNS(ns, attrName, value)
                    : null);
    }
}

function remElmAttr(elm, attrName, ns) {
    if (!IS_SAFARI || !ns) {
        return (elm.removeAttribute
                    ? elm.removeAttribute((ns ? (ns + NS_SYMB) : &amp;#39;&amp;#39;)
                    + attrName) : null);
    } else {
        return (elm.removeAttributeNS
                    ? elm.removeAttributeNS(ns, attrName)
                    : null);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Засчет универсальности появляется некоторая неудобочитаемость ввиду того, что необязательный атрибут пространства имен &amp;ndash; последний. Решения приветствуются.&lt;/p&gt;
&lt;h3 id=&#34;ajax&#34;&gt;&lt;a href=&#34;#ajax&#34; title=&#34;AJAX&#34;&gt;AJAX&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-14&#34;&gt;&lt;/a&gt; &lt;em&gt;14.&lt;/em&gt; Если вам не нужно ничего большего, чем просто &lt;strong&gt;выполнить асинхронный запрос&lt;/strong&gt; и на основе полученных данных сделать нечто &amp;ndash; для вас эта функция. Способ получения объекта &lt;code&gt;XMLHttpRequest&lt;/code&gt; безусловно может быть заменен. Комментарии намеренно оставлены, дабы показать некоторые идеи по расширению:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
/* AJAX call */

/* locationURL - URL to use */
/* parameters - url parameters, null if not required (format: &amp;#34;parameter1=value1&amp;amp;parameter2=value2[...]&amp;#34;) */
/* onComplete - listener: function (http_request) or (http_request, package) */
/* doPost - (optional) specifies if POST (true) or GET (false/null) request required
/* package - (optional) some variable or array to tranfer to complete listener, may be not specified */

function makeRequest(locationURL, parameters, onComplete, doPost, dataPackage) {

    var http_request = false;
    try {
        http_request = new ActiveXObject(&amp;#34;Msxml2.XMLHTTP&amp;#34;);
    } catch (e1) {
        try {
            http_request= new ActiveXObject(&amp;#34;Microsoft.XMLHTTP&amp;#34;);
        } catch (e2) {
            http_request = new XMLHttpRequest();
        }
    }

    //if (http_request.overrideMimeType) { // optional
    //  http_request.overrideMimeType(&amp;#39;text/xml&amp;#39;);
    //}

    if (!http_request) {
      throw new Error(&amp;#39;Cannot create XMLHTTP instance&amp;#39;);
      return false;
    }

    var completeListener = function() {
        if (http_request.readyState == 4) {
            if (http_request.status == 200) {
                onComplete(http_request, dataPackage)
            }
        }
    };

    //var salt = hex_md5(new Date().toString());
    http_request.onreadystatechange = completeListener;
    if (doPost) {
        http_request.open(&amp;#39;POST&amp;#39;, locationURL, true);
        http_request.setRequestHeader(&amp;#34;Content-type&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;);
        http_request.setRequestHeader(&amp;#34;Content-length&amp;#34;, parameters.length);
        http_request.setRequestHeader(&amp;#34;Connection&amp;#34;, &amp;#34;close&amp;#34;);
        http_request.send(parameters);
    } else {
        http_request.open(&amp;#39;GET&amp;#39;, locationURL + (parameters ? (&amp;#34;?&amp;#34; + parameters) : &amp;#34;&amp;#34;), true);
        //http_request.open(&amp;#39;GET&amp;#39;, &amp;#39;./proxy.php?&amp;#39; + parameters +
                    // &amp;#34;&amp;amp;salt=&amp;#34; + salt, true);
        http_request.send(null);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пример использования &amp;ndash; из одного моего рабочего тестового задания, которое занималось поиском в базе музыки и/или фильмов по введенной в элемент (с &lt;code&gt;id&lt;/code&gt; &amp;ldquo;&lt;code&gt;searchStr&lt;/code&gt;&amp;rdquo;) строке, используя SQL’ный &lt;code&gt;LIKE&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function gotSearchResults(http_request, dataPackage) {
    request_result = http_request.responseText;
    var divElement = document.getElementById(dataPackage[&amp;#34;divId&amp;#34;]);
    divElement.innerHTML = request_result;
}

function insertMusicSearchResults(divId) {
    var searchStrElement = document.getElementById(&amp;#34;searchStr&amp;#34;);
    var dataPackage = new Array();
    dataPackage[&amp;#34;divId&amp;#34;] = divId;
    makeRequest(&amp;#34;getAlbums.php&amp;#34;, &amp;#34;searchStr=&amp;#34;
            + searchStrElement.value, gotSearchResults, false,
            dataPackage);
}

function insertVideoSearchResults(divId) {
    var searchStrElement = document.getElementById(&amp;#34;searchStr&amp;#34;);
    var dataPackage = new Array();
    dataPackage[&amp;#34;divId&amp;#34;] = divId;
    makeRequest(&amp;#34;getMovies.php&amp;#34;, &amp;#34;searchStr=&amp;#34;
            + searchStrElement.value, gotSearchResults, false,
            dataPackage);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;логгинг&#34;&gt;&lt;a href=&#34;#логгинг&#34; title=&#34;Логгинг&#34;&gt;Логгинг&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;sol-15&#34;&gt;&lt;/a&gt; &lt;em&gt;15.&lt;/em&gt; Представленная ниже функция для помощи в &lt;strong&gt;ведении логов&lt;/strong&gt; очень проста, добавьте в нужное место в документе элемент &lt;code&gt;&amp;lt;div id=&amp;quot;LOG_DIV&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, задайте ему необходимую высоту, и в него будет сбрасываться информация + обеспечиваться ее скроллинг:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function LOG(informerName, text) {
    var logElement = document.getElementById(&amp;#39;LOG_DIV&amp;#39;);
    if (logElement) {
        logElement.appendChild(document.createTextNode(
                        informerName + &amp;#39;: &amp;#39; + text));
        logElement.appendChild(document.createElement(&amp;#39;br&amp;#39;));
        logElement.scrollTop += 50;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;sol-16&#34;&gt;&lt;/a&gt; &lt;em&gt;16.&lt;/em&gt; В замечательном плагине &lt;a href=&#34;http://www.getfirebug.com/&#34;&gt;Firebug&lt;/a&gt; для браузера Firefox есть замечательная &lt;strong&gt;консоль&lt;/strong&gt;, в которую с широкими возможностями можно &lt;a href=&#34;http://www.getfirebug.com/console.html&#34;&gt;производить логгинг&lt;/a&gt;. Однако, если вы отлаживаете параллельно код в других браузерах &amp;ndash; обращения к ней могут вызывать ошибки и даже крэши. Для того чтобы не очищать каждый раз код от логов, можно использовать такую заглушку:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var Console = Class.extend({
    // the stub class to allow using console when browser have it,
    // if not - just pass all calls
    construct: function() {},
    log: function() { },
    info: function() { },
    warn: function() { },
    error: function() { }
});

if (!window.console) {
    console = new Console();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Сочетание этого и предыдущего пункта + CSS может вдохновить вас на написание собственной консоли с функциональностью консоли Firebug, но для других браузеров ;). Если вы ее напишете - поделитесь, пожалуйста, со мной :).&lt;/p&gt;
&lt;h3 id=&#34;бонус&#34;&gt;&lt;a href=&#34;#бонус&#34; title=&#34;Бонус&#34;&gt;Бонус&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В качестве бонуса (чтобы не портить приятно отдающее двоичностью число в заголовке :) ) рассажу о проблеме &lt;strong&gt;двойного клика&lt;/strong&gt; &amp;ndash; бился над ней не я, а мои коллеги, решение также сетевое &amp;ndash; но в некоторой обработке. Проблема состоит в том, что при регистрации события &lt;code&gt;ondblclick&lt;/code&gt; все равно вызывается событие &lt;code&gt;onclick&lt;/code&gt;. Поэтому, если уж очень это событие (неочевидное, стоит заметить, для пользователя сети) необходимо - лучше всего иметь в скриптах что-то вроде такого кода (с необходимым вам количеством миллисекунд и сохраняя, если необходимо, элемент, на котором был совершен клик):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
var dblClicked = false;
var dblClickedNode = null;

var DBL_CLICK_MAXTIME = 300;

function dblClick(clickedNode) {
    dblClicked = true;
    dblClickedNode = clickedNode || dblClickedNode;
}

function releaseDblClick() {
    setTimeout(&amp;#39;dblClicked=false;&amp;#39;, DBL_CLICK_MAXTIME);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Его использование накладывает относительно сложные условия. Теперь в обработчике &lt;code&gt;ondblclick&lt;/code&gt; нужно вызывать сначала первую функцию, затем - закончив собственно обработку - вторую, а в обработчике &lt;code&gt;onclick&lt;/code&gt; проверять, не совершен ли двойной клик:&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
&amp;lt;div id=&amp;#34;someId&amp;#34; onclick=&amp;#34;if (!dblClicked) alert(&amp;#39;click&amp;#39;);&amp;#34;
     ondblick=&amp;#34;dblClick(this); alert(&amp;#39;dblclick&amp;#39;); releaseDblClick();&amp;#34;;&amp;gt;&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Также, к пункту &lt;em&gt;&lt;a href=&#34;#sol-1&#34;&gt;1&lt;/a&gt;&lt;/em&gt; можно добавить небольшую функцию &lt;strong&gt;получения инстанса&lt;/strong&gt; (на ваше усмотрение вы можете изменить ее так, чтобы она предавала аргументы в конструктор):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function getInstanceOf(className) {
    return eval(&amp;#39;new &amp;#39; + className + &amp;#39;()&amp;#39;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;К пункту &lt;em&gt;&lt;a href=&#34;#sol-6&#34;&gt;6&lt;/a&gt;&lt;/em&gt; подойдет функция &lt;strong&gt;паузы&lt;/strong&gt; (именно паузы, а не выполнения в отдельном поптоке, как делает setTimeout):&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function pause(millis)
{
    var time = new Date();
    var curTime = null;
    do { curTime = new Date(); }
        while (curTime - time &amp;lt; millis);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; Ещё пара функций, относящихся к пункту  &lt;em&gt;&lt;a href=&#34;#sol-6&#34;&gt;6&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Определение &lt;strong&gt;Вхождения числа в область&lt;/strong&gt; чисел, ограниченную числом &lt;code&gt;start&lt;/code&gt; спереди включительно и числом &lt;code&gt;stop&lt;/code&gt; в конце исключительно:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;Number.prototype.inBounds=function(start,stop){return ((this&amp;gt;=start)&amp;amp;&amp;amp;(this&amp;lt;stop))?true:false;};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Срезание&lt;/strong&gt; начальных и конечных &lt;strong&gt;пробельных символов строки&lt;/strong&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;String.prototype.trim=function(){var temp = this.replace( /^\s+/g, &amp;#34;&amp;#34; );return temp.replace( /\s+$/g, &amp;#34;&amp;#34; );}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Преобразование&lt;/strong&gt; объекта и строки &lt;strong&gt;в тип &lt;code&gt;boolean&lt;/code&gt;&lt;/strong&gt;. Для &lt;code&gt;boolean&lt;/code&gt;-объектов метод также описан, ввиду того, что данные о типе переданного объекта (строка или &lt;code&gt;boolean&lt;/code&gt;) могут быть неизвестны:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;function boolFromObj(obj){return(((obj==&amp;#34;true&amp;#34;)||(obj == true))?true:false);}

String.prototype.asBoolVal=function(){return ((this==&amp;#34;true&amp;#34;)?true:false);}

Boolean.prototype.asBoolVal=function(){return ((this==true)?true:false);}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Дополнение нулями&lt;/strong&gt; числа до тех пор, пока количество цифр в нём не достигнет указанного:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;Number.prototype.getFStr=function(fillNum){var fillNum=fillNum?fillNum:2;var
temp=&amp;#34;&amp;#34;+this;while(temp.length&amp;lt;fillNum)temp=&amp;#34;0&amp;#34;+temp;return temp;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого, ко &lt;a href=&#34;#%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%B0%D1%8F-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C-js&#34;&gt;второй части&lt;/a&gt; можно отнести функции, связанные с &lt;strong&gt;сортировкой&lt;/strong&gt;,&amp;hellip;&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function intComparator(a, b) {
    return a - b;
}

function getObjSortedProps(obj, sortFunc) {
    var propsArr = [];
    for (propName in obj) {
        propsArr.push(propName);
    }
    return propsArr.sort(sortFunc);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;где функция &lt;code&gt;getObjSortedProps&lt;/code&gt; позволяет получить массив из отсортированных (с применением указанного компаратора &lt;code&gt;sortFunc&lt;/code&gt;) имён свойств переданного объекта, а функция &lt;code&gt;intComparator&lt;/code&gt; может быть передана функции массивов &lt;code&gt;sort&lt;/code&gt; или той же самой &lt;code&gt;getObjSortedProps&lt;/code&gt;, если нужный массив или имена свойств объекта содержит/содержат числовые значения&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;и две функции для &lt;strong&gt;работы с массивами&lt;/strong&gt;:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
function indexOf(arr, elem) {
    for (itemIdx in arr) {
        if (arr[itemIdx] == elem) return itemIdx;
    }
    return null;
}

function removeFromArray(arr, element) { // removes only one item!
    for (itemIndex in arr) {
        if (arr[itemIndex] == element) {
            arr.splice(itemIndex, 1);
            return arr;
        }
    }
    return null;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;indexOf&lt;/code&gt; возвращает индекс указанного элемента в переданном массиве, а функция &lt;code&gt;removeFromArray&lt;/code&gt; удаляет из указанного массива переданный элемент.&lt;/p&gt;
&lt;h3 id=&#34;заключение&#34;&gt;&lt;a href=&#34;#заключение&#34; title=&#34;Заключение&#34;&gt;Заключение&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ну вот &amp;ndash; кажется, пока всё. Статья &amp;ndash; в состоянии готовности к исправлениям (если понадобятся :) ), можно переходить к следующим :). В &lt;a href=&#34;#javascript-oop&#34;&gt;следующей статье&lt;/a&gt; я намереваюсь рассказать поподробнее про ООП в JavaScript и привести в пример пару простых, но полезных классов. Надеюсь, эта статья вам помогла и хоть немного сократила имеющие потенциальную возможность быть потраченными на решение всяких причуд браузеров рабочие человекочасы.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Неожиданный баг Textpattern</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/occasional-textpattern-bug/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/occasional-textpattern-bug/</id>
                <updated>2007-07-23T00:46:00Z</updated>
                
                <summary type="html">Пока игрался с &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt; на &lt;a href=&#34;http://sharedcode.info/&#34;&gt;шаредкоде&lt;/a&gt;, обнаружил сей баг, который потенциально может затронуть тех, кто собственно &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt; пользует.</summary>
                <content type="html">&lt;p&gt;Пока игрался с &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt; на &lt;a href=&#34;http://sharedcode.info/&#34;&gt;шаредкоде&lt;/a&gt;, обнаружил сей баг, который потенциально может затронуть тех, кто собственно &lt;a href=&#34;http://textpattern.org/&#34;&gt;textpattern&lt;/a&gt; пользует.&lt;/p&gt;

&lt;p&gt;Испугало то, что отключалось (правильнее сказать истекало) комментирование в статьях, с постинга которых прошло много времени. излазил все настройки – нету ничего такого – хотя видно, что должно ведь быть по разумению. И ведь хорошо что погуглил. наткнулся на &lt;a href=&#34;http://hari.literaryforums.org/2007/04/22/textpattern-review/&#34;&gt;пост&lt;/a&gt;, а из него &amp;ndash; по комментам &amp;ndash; на &lt;a href=&#34;http://textpattern.com/faq/257/comment-preferences-are-missing&#34;&gt;статью FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Суть состоит в том, что если в &lt;em&gt;Admin&lt;/em&gt; -&amp;gt; &lt;em&gt;Preferences&lt;/em&gt; -&amp;gt; &lt;em&gt;Basic&lt;/em&gt; для раздела &lt;em&gt;Comments&lt;/em&gt; вы наблюдаете только два пункта (и у вас версия 4.0.4 и нет желания/возможности пока апдейтить) – эта заметка для вас.&lt;/p&gt;

&lt;p&gt;Сделать надо всего лишь два действия. Раз – забрать с вашего хостинга файл &lt;code&gt;./textpattern/include/txp_prefs.php&lt;/code&gt;, найти в нем строку 89:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;&lt;code&gt;$evt_list = safe_column(&amp;#39;event&amp;#39;, &amp;#39;txp_prefs&amp;#39;,
     &amp;#34;type = 0 and prefs_id = 1 group by &amp;#39;event&amp;#39; order by event desc&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и удалить из нее кавычки вокруг event (чтобы она совпадала с &lt;a href=&#34;http://dev.textpattern.com/browser/development/4.0/textpattern/include/txp_prefs.php?rev=2156#L89&#34;&gt;этим вариантом&lt;/a&gt;):&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;&lt;code&gt;$evt_list = safe_column(&amp;#39;event&amp;#39;, &amp;#39;txp_prefs&amp;#39;,
     &amp;#34;type = 0 and prefs_id = 1 group by event order by event desc&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;два &amp;ndash; залить файл обратно. Финита ля комедия &amp;ndash; добро пожаловать в настройки, в пункт &lt;em&gt;Comments:Disabled after&lt;/em&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Eric IDE 4.0.1 на Ubuntu 7.04</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/eric-ide-ubuntu/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/eric-ide-ubuntu/</id>
                <updated>2007-07-22T00:46:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;Eric&lt;/a&gt; – очень даже хорошее IDE под &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;. И &lt;a href=&#34;http://www.die-offenbachs.de/eric/eric-news.html&#34;&gt;не далее как вчера&lt;/a&gt; вышла версия &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=119070&amp;amp;package_id=233329&#34;&gt;4.0.1&lt;/a&gt;, в репозиториях же на данный момент лежит версия 3.9. и захотелось мне вспомнить старые добрые времена и собрать этот пакет. Представляю вам на всякий случай листинг того, что делать – чтобы не возвращаться обратно, выясняя что нужно поставить еще что-то или разбираясь в ошибках компиляции, которые меня посещали :). Кое-где – ориентировка на последние версии :). Так как устанавливалось на чистой практически убунте – все должно быть адекватно… если что-то упустил – прошу сообщать.</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;Eric&lt;/a&gt; – очень даже хорошее IDE под &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;. И &lt;a href=&#34;http://www.die-offenbachs.de/eric/eric-news.html&#34;&gt;не далее как вчера&lt;/a&gt; вышла версия &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=119070&amp;amp;package_id=233329&#34;&gt;4.0.1&lt;/a&gt;, в репозиториях же на данный момент лежит версия 3.9. и захотелось мне вспомнить старые добрые времена и собрать этот пакет. Представляю вам на всякий случай листинг того, что делать – чтобы не возвращаться обратно, выясняя что нужно поставить еще что-то или разбираясь в ошибках компиляции, которые меня посещали :). Кое-где – ориентировка на последние версии :). Так как устанавливалось на чистой практически убунте – все должно быть адекватно… если что-то упустил – прошу сообщать.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Используется:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;eric&lt;/a&gt; 4.0.0.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; 2.5.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trolltech.com/products/qt&#34;&gt;Qt&lt;/a&gt; 4.2.3 + &lt;a href=&#34;http://www.riverbankcomputing.co.uk/pyqt/index.php&#34;&gt;PyQt&lt;/a&gt; v4.1 + &lt;a href=&#34;http://www.riverbankcomputing.co.uk/qscintilla/index.php&#34;&gt;QScintilla&lt;/a&gt; 2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.riverbankcomputing.co.uk/sip/index.php&#34;&gt;SIP&lt;/a&gt; 4.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34;&gt;G++&lt;/a&gt; 3.4 (наверняка можно взять и поздний)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;итак, переходим в какой-нибудь каталог для сборки и приступаем:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/distr-temp/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;берем &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=119070&amp;amp;package_id=233329&#34;&gt;сурсы&lt;/a&gt; с sourceforge‘a:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://mesh.dl.sourceforge.net/sourceforge/eric-ide/eric4-4.0.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;устанавливаем всяческие библиотеки для связки &lt;a href=&#34;http://www.riverbankcomputing.co.uk/pyqt/index.php&#34;&gt;PyQt&lt;/a&gt; (в зависимости от настроек &lt;code&gt;apt-get&lt;/code&gt;‘а может понадобиться установочный CD):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python2.5-dev
$ sudo apt-get install python-qt4
$ sudo apt-get install libqt4-dev
$ sudo apt-get install python-qt4-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;устанавливаем компилятор &lt;code&gt;g++&lt;/code&gt; и делаем на него ссылку &lt;code&gt;/usr/bin/g++&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install g++-3.4
$ sudo ln -s /usr/bin/g++-3.4 /usr/bin/g++
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;скачиваем и устанавливаем последнюю на данный момент версию &lt;a href=&#34;http://www.riverbankcomputing.co.uk/sip/index.php&#34;&gt;SIP&lt;/a&gt; – он позволяет библиотекам, написанным на C[++] вести себя как модули &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://www.riverbankcomputing.com/Downloads/sip4/sip-4.6.tar.gz
$ tar -xvzf ./sip-4.6.tar.gz
$ cd ./sip-4.6.tar.gz
$ python ./configure.py
$ make
$ sudo make install
$ cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;скачиваем и устанавливаем последнюю на данный момент версию &lt;a href=&#34;http://www.riverbankcomputing.co.uk/qscintilla/index.php&#34;&gt;QScintilla&lt;/a&gt; – Qt-порт компонента для редактирования исходных кодов (устанавливаем версию для Qt4):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://www.riverbankcomputing.com/Downloads/Snapshots/QScintilla2/QScintilla-gpl-2-snapshot-20070709.tar.gz
$ tar -xvzf ./QScintilla-gpl-2-snapshot-20070709.tar.gz
$ cd ./QScintilla-gpl-2-snapshot-20070709/Qt4
$ qmake qscintilla.pro
$ sudo make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;теперь нужно установить связи на &lt;a href=&#34;http://www.riverbankcomputing.co.uk/qscintilla/index.php&#34;&gt;QScintilla&lt;/a&gt; для &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; – они находятся собственно в директории Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ../Python
$ python ./configure.py
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ну а теперь очередь собственно &lt;a href=&#34;http://www.die-offenbachs.de/eric/index.html&#34;&gt;eric&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ../../eric4-4.0.1/
$ sudo python install.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;при установке нужно сказать ему директорию где лежит Qt: &lt;code&gt;/usr/share/qt4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ну вот собственно и все. Набираем &lt;code&gt;eric4&lt;/code&gt; и, если хочется, радуемся :).&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Ubuntu 7.04, Пыхтерский Авангард-ADSL, модем D-Link</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/ubuntu-adsl-dlink-avangard/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/ubuntu-adsl-dlink-avangard/</id>
                <updated>2007-07-21T00:46:00Z</updated>
                
                <summary type="html">Вот она, первая статья о невечном :)</summary>
                <content type="html">&lt;p&gt;Вот она, первая статья о невечном :)&lt;/p&gt;

&lt;p&gt;На самом деле статей в сети на эту тему много (ну либо они повествуют о настройке для веб-плюса – она схожа) – но результаты у всех разные – поэтому расскажу свою историю.&lt;/p&gt;

&lt;p&gt;подопытные:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://releases.ubuntu.com/7.04/&#34;&gt;Ubuntu 7.40 Feisty Fawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;USB-модем &lt;a href=&#34;http://eciadsl.flashtux.org/modems.php?modem=86&#34;&gt;D-Link DSL-200 Generation III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;дополнительные ссылки:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://starl1te.wordpress.com/%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BC%D0%B0-d-link-dsl-200/&#34;&gt;Как Starl1te настраивал Веб-плюс&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forum.ubuntu.ru/index.php?topic=8712.45&#34;&gt;Беседа с человеком у которого однажды это всё-таки получилось&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eciadsl.flashtux.org/&#34;&gt;Основной источник файлов&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ru.gentoo-wiki.com/ADSL_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BC%D1%8B_%D0%BD%D0%B0_%D1%87%D0%B8%D0%BF%D0%B0%D1%85_GlobeSpan_(D-Link_DSL200&#34;&gt;Как это делают в Gentoo&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;(дополнительные ссылки также есть в конце статьи)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Итак, Live/Install CD &lt;a href=&#34;http://releases.ubuntu.com/7.04/&#34;&gt;был скачан&lt;/a&gt; из интернета, прожжен на болванку и установлен буквально за 10-15 минут, чем Ubuntu и славится. практически все что нужно обнаружилось и отдетектилось сразу, за исключением собственно интернета :). сразу говорю, четких рекомендаций как не было так и нет, насколько я понял у большинства все “_как-то вышло_” и вполне может быть так, что мой или чей-то способ может не подойти. у меня, например, интернет пока что подключается раза с пятого, но хотя бы уже до отключения руками, поэтому я стараюсь не перезагружаться :). если я найду способы улучшения ситуации – я напишу.&lt;/p&gt;

&lt;p&gt;Впрочем, меньше прелюдий – беремся за терминал. Вернее, лучше заранее достать где-нибудь интернет и скачать вот эту пару файлов: :).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eciadsl.flashtux.org/download/debian/etch/eciadsl-usermode_0.11-1_i386_with_synch_patch.deb&#34;&gt;ECI-ADSL с патчем синхронизации&lt;/a&gt; (&lt;strong&gt;Upd.&lt;/strong&gt; &lt;a href=&#34;http://shaman-sir.by.ru/files/eciadsl-usermode_0.11-1_i386_with_synch_patch.deb&#34;&gt;альтернативная ссылка&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://debian.charite.de/ubuntu/pool/universe/r/rp-pppoe/pppoe_3.8-1.1_i386.deb&#34;&gt;утилита PPPoE&lt;/a&gt; (или &lt;a href=&#34;http://ftp.cica.es/debian/pool/main/r/rp-pppoe/pppoe_3.8-1.1_i386.deb&#34;&gt;тут&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eciadsl.flashtux.org/download/eciadsl-synch_bin.tar.bz2&#34;&gt;файлы синхронизации&lt;/a&gt; (&lt;strong&gt;Upd.&lt;/strong&gt; &lt;a href=&#34;http://shaman-sir.by.ru/files/eciadsl-usermode-0.11-synch-patch.tar.bz2&#34;&gt;альтернативная ссылка&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;С этого момента мы считаем что вы находитесь в той директории, куда вы положили эти файлы, например &lt;code&gt;~/Downloads&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/Downloads
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Одно магическое действие, которое вам скорее всего понадобится для корректной работы &lt;code&gt;eciadsl&lt;/code&gt; – смена среды. Честно говоря я не успел посмотреть что там было до этого, потому что в &lt;code&gt;bash&lt;/code&gt; я не сомневаюсь(лся?), но вероятнее всего на то, как было, если вам будет надо – можно будет запросто вернуть командой &lt;code&gt;sudo ln -sf /bin/dash /bin/sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo ln sf /bin/bash /bin/sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;устанавливаем пакеты:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dpkg -i ./pppoe_3.8-1.1_i386.deb
$ sudo dpkg -i ./eciadsl-usermode_0.11-1_i386_with_sync_patch.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;распаковываем дополнительные файлы синхронизации и переносим их в каталог &lt;code&gt;eciadsl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bzip2 -d ./eciadsl-synch_bin.tar.bz2
$ tar -xvf ./eciadsl-synch_bin.tar
$ sudo mv ./eciadsl-synch_bin/*.bin /etc/eciadsl/
$ rm -Rf ./eciadsl-synch_bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;далее, нужно проверить выгружен ли модуль &lt;code&gt;dabusb&lt;/code&gt;, который по идее и не должен быть загружен – в ранних версиях он приводил к ошибкам.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo lsmod | grep dabusb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и если он все-таки найдется – надо его убить, вот так: :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo modprobe -r dabsusb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;теперь включаем нужные модули:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo modprobe tun
$ sudo lsmod | grep tun
$ sudo modprobe n_hdlc
$ sudo lsmod | grep n_hdlc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;сейчас нам нужно узнать &lt;em&gt;VID/PID&lt;/em&gt; нашего момеда (насколько я себе представил –- это код USB-порта на материнской плате, но истинным знанием я временно не обладаю).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsusb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;там должно быть либо &lt;em&gt;D-Link&lt;/em&gt; либо &lt;em&gt;GlobeSpan&lt;/em&gt;, либо какой-то еще вариант (если что можно выяснить отключив модем, выполнив &lt;code&gt;lsusb&lt;/code&gt; и подключив снова) –- у меня мой модем был в этой строчке:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bus 004 Device 006: ID&lt;/code&gt; _&lt;code&gt;0915:8104&lt;/code&gt;_ &lt;code&gt;GlobeSpan, Inc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;выделенные курсивом числа – и есть &lt;em&gt;VID:PID&lt;/em&gt; – запомните их. Настало время приступить к конфигурации. можно запустить текстовую версию и следовать указаниям (пояснения ниже):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo eciadsl-config-text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;для Авангард-ADSL настройки (примерно :) ) таковы (номера пунктов могут отличаться):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(1) configure all settings&lt;/li&gt;
&lt;li&gt;&lt;em&gt;юзернейм/пароль&lt;/em&gt;: &lt;em&gt;ptn&lt;/em&gt;/&lt;em&gt;ptn&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;provider&lt;/em&gt;: (58) Other&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DNS1&lt;/em&gt;: &lt;code&gt;213.158.0.6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DNS2&lt;/em&gt;: &lt;code&gt;213.48.193.36&lt;/code&gt; (на июль 2007 они таковы, в будущем могут потенциально поменяться – следите за новостями Авангарда)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VPI&lt;/em&gt;: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VCI&lt;/em&gt;: &lt;code&gt;35&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;modem&lt;/em&gt;: (16) D-Link DSL200 B1 (засисит от модели вашего модема, но у меня кажется не B и работает и я побаиваюсь пока все нестабильно но работает тестировать другие варианты :) )&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VID1&lt;/em&gt;: &lt;code&gt;__0915__&lt;/code&gt; (первое число из двух, которые показала команда &lt;code&gt;lsusb&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PID1&lt;/em&gt;: &lt;code&gt;__8104__&lt;/code&gt; (второе число из двух, которые показала команда &lt;code&gt;lsusb&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VID2&lt;/em&gt;: &lt;code&gt;__0915__&lt;/code&gt; (первое число из двух, которые показала команда &lt;code&gt;lsusb&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PID2&lt;/em&gt;: &lt;code&gt;__8104__&lt;/code&gt; (второе число из двух, которые показала команда &lt;code&gt;lsusb&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;chipset&lt;/em&gt;: (3) &lt;code&gt;GS7470&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SYNCH&lt;/em&gt;: &lt;code&gt;0&lt;/code&gt; (этот пункт и следующий пункты люди часто ставят наугад, я тоже пишу как работает у меня и не знаю почему я это ставил :) )&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PPPOECI&lt;/em&gt;: &lt;code&gt;4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;_&lt;code&gt;.bin&lt;/code&gt;_ &lt;code&gt;file&lt;/code&gt;: (18) &lt;code&gt;/etc/eciadsl/gs7470_synch20.bin&lt;/code&gt; (очень важный пункт, на сайте Авангарда пишут использовать именно этот файл , но если у вас все еще будут проблемы с синхронизацией – нужно будет перебрать все по одному а в самом худшем случае – собирать свой)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PPP Mode&lt;/em&gt;: (5) &lt;code&gt;LLC_SNAP_RFC1483_BRIDGED_ETH_NO_FCS&lt;/code&gt; (еще используют &lt;code&gt;LLC_RFC1483_ROUTED_IP&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DHCP&lt;/em&gt;: no&lt;/li&gt;
&lt;li&gt;_&lt;em&gt;Static IP&lt;/em&gt;: no (по дефолту у Авангарда динамический IP, но если у вас статический за денюжку то наверное стоит поставить yes :) )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ниже я приведу сам файл &lt;code&gt;/etc/eciadsl/eciadsl.conf&lt;/code&gt;, который и изменяет эта утилита –- в том состоянии, в каком он у меня.&lt;/p&gt;

&lt;p&gt;далее –- запускаем собственно синхронизацию:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo eciadsl-start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;тут могут обнаружиться самые обидные проблемы – если будут ошибки про _interrupt_ы – значит вместо первого файла установлена версия без патча синхронизации и вы меня не слушаетесь :). В моем случае тоже не всё гладко - первые разы после удачной синхронизации гаснут обе лампочки на модеме, а среди карт/интерфейсов отстутствует &lt;code&gt;tap0&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ifconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;но раз на пятый-десятый лампочки все-таки не гаснут и тогда хорошо. По этим причинам я поставил скрипт на автозагрузку, но о нем - ниже. Если уж совсем много раз не выходит –- что-то не чисто –- проверять настройки и файлы синхронизации. Вам нужно добиться чтобы лампочки не гасли :). После этого - набрать:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pppoeconf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;это собственно конфигурация &lt;code&gt;PPPoE&lt;/code&gt;. Утилита должна найти инет на интерфейсе &lt;code&gt;tap0&lt;/code&gt; и задавать диалогами вопросы и просьбы, среди которых попросят ввести пароль/юзернейм снова, а на все остальные - отвечать разумно, чаще всего – “да” :).&lt;/p&gt;

&lt;p&gt;после этого можно попытаться подключиться:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pppoe-start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и если не &lt;code&gt;TIMED OUT&lt;/code&gt; а &lt;code&gt;CONNECT OK&lt;/code&gt; то все замечательно :).&lt;br&gt;
желаю чтобы у вас так и было :).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. Статья будет исправляться и дополняться&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;пояснения&#34;&gt;&lt;a href=&#34;#пояснения&#34; title=&#34;Пояснения:&#34;&gt;Пояснения:&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;теперь по поводу гаснущих лампочек. я взял &lt;a href=&#34;http://starl1te.wordpress.com/%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BC%D0%B0-d-link-dsl-200/#comment-52&#34;&gt;скрипт starl1t‘а&lt;/a&gt;, чуток исправил, добавив &lt;code&gt;pppoe-start&lt;/code&gt; и выставил его в автозагрузку:&lt;/p&gt;
&lt;pre lang=&#34;bash&#34;&gt;&lt;code&gt;
#!/bin/bash

# This is an improved eciadsl launch script, which
# tries to connect after failures until success.
# Feel free to share and modify
# by Starlite

case &amp;#34;$1&amp;#34; in
    start)
        sudo eciadsl-start
        result=$?
        #echo &amp;#39;exit code:&amp;#39; $result
        until [ $result -eq 0 ]
        do
            echo ‘Error: connection failed’
            sudo eciadsl-stop
            sudo eciadsl-start
            result=$?
        #   echo ‘exit code:’ $result
        done
        echo ‘connection established’
        sudo pppoe-start
        exit $?
        ;;
    stop)
        sudo eciadsl-stop
        exit $?
        ;;
    restart|force-reload)
        $0 stop &amp;amp;&amp;amp; $0 start
        exit $?
        ;;
    *)
        echo ‘Usage: eciadsl {start|stop|restart}’
        exit 1
        ;;
esac
exit 0

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;потом - ставим его на автозагрузку:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chmod +x /etc/init.d/eciadsl
$ update-rc.d eciadsl defaults
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;если нужно - можно запускать его самостоятельно:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/eciadsl restart
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;тексты&#34;&gt;&lt;a href=&#34;#тексты&#34; title=&#34;Тексты:&#34;&gt;Тексты:&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;etceciadsleciadsl.conf&#34;&gt;&lt;a href=&#34;#etceciadsleciadsl.conf&#34; title=&#34;/etc/eciadsl/eciadsl.conf&#34;&gt;/etc/eciadsl/eciadsl.conf&lt;/a&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;
VID1=0915
PID1=8104
VID2=0915
PID2=8104
#MODE=LLC_RFC1483_ROUTED_IP
MODE=LLC_SNAP_RFC1483_BRIDGED_ETH_NO_FCS
VCI=35
VPI=0
FIRMWARE=/etc/eciadsl/firmware00.bin
SYNCH=/etc/eciadsl/gs7470_synch20.bin
PPPD_USER=ptn
PPPD_PASSWD=
USE_DHCP=no
USE_STATICIP=no
STATICIP=
GATEWAY=
MODEM=D-Link DSL200 rev B1
MODEM_CHIPSET=GS7470
SYNCH_ALTIFACE=0
PPPOECI_ALTIFACE=1
PROVIDER=Other
DNS1=213.158.0.6
DNS2=213.18.193.36

&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;etcppppppoe.conf&#34;&gt;&lt;a href=&#34;#etcppppppoe.conf&#34; title=&#34;/etc/ppp/pppoe.conf&#34;&gt;/etc/ppp/pppoe.conf&lt;/a&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;
ETH=&amp;#39;tap0&amp;#39;
USER=&amp;#39;ptn&amp;#39;
DEMAND=no
#DEMAND=300
DNSTYPE=SERVER
PEERDNS=yes
DNS1=
DNS2=
DEFAULTROUTE=yes
CONNECT_TIMEOUT=30
CONNECT_POLL=2
ACNAME=
SERVICENAME=
PING=&amp;#34;.&amp;#34;
CF_BASE=`basename $CONFIG`
PIDFILE=&amp;#34;/var/run/$CF_BASE-pppoe.pid&amp;#34;
SYNCHRONOUS=no
#SYNCHRONOUS=yes
CLAMPMSS=1412
#CLAMPMSS=100
#CLAMPMSS=no
LCP_INTERVAL=20
LCP_FAILURE=3
#LCP_FAILURE=30
PPPOE_TIMEOUT=80
FIREWALL=NONE
LINUX_PLUGIN=
PPPOE_EXTRA=&amp;#34;&amp;#34;
PPPD_EXTRA=&amp;#34;&amp;#34;

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;примечания&#34;&gt;&lt;a href=&#34;#примечания&#34; title=&#34;Примечания:&#34;&gt;Примечания:&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;

&lt;p&gt;&lt;em&gt;от человека, настраивавшего модем ZTE ZXDSL 852, добавляю:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Для модема ZTE ZXDSL 852 нужно еще (кроме драйвера &lt;code&gt;cxacru.ko&lt;/code&gt;) втыкать мост &lt;code&gt;ATM&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;ETHERNET&lt;/code&gt; (&lt;code&gt;PPPoA&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;PPPoE&lt;/code&gt;), а для этого ставить драйвер &lt;code&gt;br2648.ko&lt;/code&gt; и настраивать через контрольную утилиту &lt;code&gt;br2684ctl&lt;/code&gt; (должна входить в пакет &lt;code&gt;linux-atm-lib&lt;/code&gt; - если нет - можно взять с &lt;a href=&#34;http://linux-atm.sourceforge.net/&#34;&gt;linux-atm.sourceforge.net&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;К сожалению ссылка на руководство по сборке файла синхронизации руками &amp;ndash; периодически умирает :( , если так произошло &amp;ndash; эту статью можно &lt;a href=&#34;http://www.linuxup.ru/index.php?id=99&#34;&gt;найти&lt;/a&gt; на &lt;a href=&#34;http://www.linuxup.ru&#34;&gt;LinuxUp.Ru&lt;/a&gt; (&lt;a href=&#34;http://www.linuxup.ru/print.php?id=99&#34;&gt;версия для печати&lt;/a&gt; и &lt;a href=&#34;http://www.linuxup.ru/index.php?id=100&#34;&gt;первая часть статьи&lt;/a&gt;) или, в &lt;a href=&#34;http://linux.yaroslavl.ru/docs/conf/hardware/FlashCode.pdf&#34;&gt;pdf-версии&lt;/a&gt; на &lt;a href=&#34;http://linux.yaroslavl.ru&#34;&gt;linux.yaroslavl.ru&lt;/a&gt; (&lt;a href=&#34;http://64.233.183.104/search?q=cache:CIYtpkx9cj0J:linux.yaroslavl.ru/docs/conf/hardware/FlashCode.pdf+%D0%A0%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE+%D0%BF%D0%BE+%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B5+EciAdsl+%D0%B4%D1%80%D0%B0%D0%B9%D0%B2%D0%B5%D1%80%D0%B0&amp;amp;hl=ru&amp;amp;ct=clnk&amp;amp;cd=1&amp;amp;gl=ru&#34;&gt;HTML-версия&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;И, нашлась еще одна очень неплохая ссылка на &lt;a href=&#34;http://www.gentoo.ru/?q=node/807&#34;&gt;настройку этого дела в Gentoo&lt;/a&gt;, с использованием ATM. (И еще &lt;a href=&#34;http://ru.gentoo-wiki.com/ADSL_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BC%D1%8B_%D0%BD%D0%B0_%D1%87%D0%B8%D0%BF%D0%B0%D1%85_GlobeSpan_(D-Link_DSL200&#34;&gt;вот&lt;/a&gt;) &amp;ndash; о том же но по-другому). И, плюс - &lt;a href=&#34;http://f0x.ru/wiki/29/249_%CD%E0%F1%F2%F0%EE%E9%EA%E0_Acorp_Sprinter@ADSL_USB_%EF%EE%E4_Ubuntu&#34;&gt;ADSL@Ubuntu &amp;amp; модем ACORP&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Для полноты картины нужно на &lt;a href=&#34;http://forum.runtu.org/index.php?topic=260.0&#34;&gt;установку Acorp Sprinter&lt;/a&gt; дать ссылку. Там разобрались по-своему.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Будьте внимательны!&lt;/p&gt;

&lt;p&gt;На сайте &lt;a href=&#34;http://eciadsl.flashtux.org/&#34;&gt;eciadsl&lt;/a&gt; убрали версию с патчем синхронизации. Временно я выложил ее &lt;a href=&#34;http://rapidshare.com/files/67709667/eciadsl-synch_bin.tar.html&#34;&gt;на rapidshare.com&lt;/a&gt; и на на &lt;a href=&#34;http://www.rapidshare.ru/456097&#34;&gt;rapidshare.ru&lt;/a&gt;. Также могу выслать по почте. Если есть информация, работает ли схема с новой версией (по слухам - не работает и других схем нет) - прошу поделиться :) .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt; &lt;a href=&#34;http://forum.ubuntu.ru/index.php?topic=14502.0&#34;&gt;Здесь&lt;/a&gt; у человека возникла проблема с новым драйвером eciadsl 0.12 на ubuntu 7.10.&lt;/p&gt;

&lt;p&gt;И вообще - с опытом выясняется, что модемы D-Link-200 - из ряда тех вещей, которые если уж достались - то лучше их сразу поменять.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;А &lt;a href=&#34;http://forum.ubuntu.ru/index.php?topic=14502.msg112057#msg112057&#34;&gt;вот тут&lt;/a&gt; - про дружбу Ubuntu 7.10 на AMD64, DLink-модема и Авангард ADSL.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Ещё раз выкладываю eciadsl-0.11, (в том комменте зачем-то выложил файлы синхронизации):&lt;a href=&#34;http://rapidshare.com/files/77521022/eciadsl-usermode-0.11-synch-patch.tar.bz2.html&#34;&gt;.tar.bz2&lt;/a&gt;, &lt;a href=&#34;http://rapidshare.com/files/77521743/eciadsl-usermode_0.11-1_i386_with_synch_patch.deb.html&#34;&gt;.deb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://forum.stream.uz/index.php?s=&amp;amp;showtopic=5085&amp;amp;view=findpost&amp;amp;p=340627&#34;&gt;Здесь&lt;/a&gt; человек настроил всё на 7.10/eciadsl0.10 и довольно подробно описывает (и там же раньше подробное описание &lt;a href=&#34;http://forum.stream.uz/index.php?s=&amp;amp;showtopic=5085&amp;amp;view=findpost&amp;amp;p=230190&#34;&gt;для Gentoo&lt;/a&gt; + решения некоторых проблем).&lt;/p&gt;

&lt;p&gt;Сейчас работаю над установкой на 7.04 с ADSL-модемом ZyXEL omni P-630S EE и eciadsl 0.12.&lt;/p&gt;

&lt;p&gt;Отметки:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;действительно, дефолтовый шелл &amp;ndash; &lt;code&gt;dash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;утилита конфигурации &lt;code&gt;eliadsl-config-text&lt;/code&gt; для 0.11 почему-то вылетала на вводе логина/пароля ошибку скрипта, поэтому повесил 0.12.&lt;/li&gt;
&lt;li&gt;0.12 выпадает с ошибкой &lt;code&gt;double free or courruption&lt;/code&gt; на этапе синхронизации, теоретические решения из инета: поставить 0.10 из сурсов, скомпилить 0.12 из сурсов, &lt;a href=&#34;http://eciadsl.flashtux.org/forum/viewtopic.php?t=3344&#34;&gt;использовать патч&lt;/a&gt; (логин/пароль: &lt;code&gt;eciadsl&lt;/code&gt;/&lt;code&gt;eciadsl&lt;/code&gt;), &lt;a href=&#34;http://eciadsl.flashtux.org/forum/viewtopic.php?t=3358&#34;&gt;выбрать &lt;code&gt;RFC_2364&lt;/code&gt;&lt;/a&gt;, проверить все файлы синхронизации…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;от Анонима:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Поясню&lt;br&gt;
VID - vendor id&lt;br&gt;
PID - product id&lt;/p&gt;

&lt;p&gt;alt интерфейсы сейчас указаны на flashtux для каждого модема&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>SATA, DMA и странности Ubuntu</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/sata-dma-ubuntu/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/sata-dma-ubuntu/</id>
                <updated>2007-01-24T00:46:00Z</updated>
                
                <summary type="html">Сегодня ставили &lt;a href=&#34;http://ubuntuguide.org/wiki/Ubuntu:Edgy&#34;&gt;Ubuntu 6.06 LTS&lt;/a&gt; на &lt;code&gt;SATA&lt;/code&gt;-шный винт. Она, как ни странно, злобно свалилась. &lt;code&gt;Live CD&lt;/code&gt; долго пытался подмаунтить винт, потом вроде подмаунтил но при загрузке ядра начал кидаться &lt;code&gt;buffer I/O Read Error&lt;/code&gt; и бла-бла-бла.</summary>
                <content type="html">&lt;p&gt;Сегодня ставили &lt;a href=&#34;http://ubuntuguide.org/wiki/Ubuntu:Edgy&#34;&gt;Ubuntu 6.06 LTS&lt;/a&gt; на &lt;code&gt;SATA&lt;/code&gt;-шный винт. Она, как ни странно, злобно свалилась. &lt;code&gt;Live CD&lt;/code&gt; долго пытался подмаунтить винт, потом вроде подмаунтил но при загрузке ядра начал кидаться &lt;code&gt;buffer I/O Read Error&lt;/code&gt; и бла-бла-бла.&lt;/p&gt;

&lt;p&gt;Решение нашлось при совмещении способов с двух форумов:&lt;/p&gt;

&lt;p&gt;В &lt;code&gt;BIOS&lt;/code&gt;’е на способ работы с &lt;code&gt;SATA&lt;/code&gt; я установил &lt;code&gt;Enchanced&lt;/code&gt; (что-то там с распараллеливанием &lt;code&gt;SATA&lt;/code&gt;/&lt;code&gt;PATA&lt;/code&gt;, причем поиграйтесь еще с каналами - если что-то не выйдет; и в крайнем случае, если &lt;code&gt;SATA&lt;/code&gt;-винта у вас два, один уберите на время)&lt;/p&gt;

&lt;p&gt;Нажал в загрузочном экране &lt;code&gt;Live CD&lt;/code&gt; клавишу &lt;code&gt;Escape&lt;/code&gt; (переход в текстовый режим) и набрал&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boot: live pci ide=nodma ide=reverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(не учитывая того, что до этого я много разных пытался там набрать команд :) )&lt;/p&gt;

&lt;p&gt;Теперь юбунта работает как миленькая… Почти.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>PHP + AJAX = SACK</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/php-ajax-sack/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/php-ajax-sack/</id>
                <updated>2006-12-22T00:46:00Z</updated>
                
                <summary type="html">Понадобилось тут… Но лень было писать свою фунцкцию, чтобы там в зависимости от браузера и бла-бла-бла (тем более, насколько я помню, есть уже более прогрессивные методы :) ). Хотел было прикрутить &lt;a href=&#34;http://dklab.ru/lib/JsHttpRequest/&#34;&gt;JsHttpRequest с dklab.ru&lt;/a&gt;, да чего-то полезли какие-то хитрые ошибки и вообще все там у мистера Д. Котероff как-то для меня хитро :), благо в &lt;code&gt;PHP&lt;/code&gt; я еще не спец. Поэтому я взял &lt;a href=&#34;http://www.twilightuniverse.com/projects/sack/&#34;&gt;другой пакетик&lt;/a&gt;, под названием &lt;code&gt;SACK&lt;/code&gt; &amp;ndash; Simple AJAX Code-Kit. Там действительно все просто и банально &amp;ndash; мне больше и не было надо.</summary>
                <content type="html">&lt;p&gt;Понадобилось тут… Но лень было писать свою фунцкцию, чтобы там в зависимости от браузера и бла-бла-бла (тем более, насколько я помню, есть уже более прогрессивные методы :) ). Хотел было прикрутить &lt;a href=&#34;http://dklab.ru/lib/JsHttpRequest/&#34;&gt;JsHttpRequest с dklab.ru&lt;/a&gt;, да чего-то полезли какие-то хитрые ошибки и вообще все там у мистера Д. Котероff как-то для меня хитро :), благо в &lt;code&gt;PHP&lt;/code&gt; я еще не спец. Поэтому я взял &lt;a href=&#34;http://www.twilightuniverse.com/projects/sack/&#34;&gt;другой пакетик&lt;/a&gt;, под названием &lt;code&gt;SACK&lt;/code&gt; &amp;ndash; Simple AJAX Code-Kit. Там действительно все просто и банально &amp;ndash; мне больше и не было надо.&lt;/p&gt;

&lt;p&gt;Я делал банальную формочку, которая выплывала бы по ссылке, спрашивала вопрос и записывала бы вопрос в базу данных, не перегружая страницу (удивительно, но это было &lt;em&gt;не мое&lt;/em&gt; извращенное желание).&lt;/p&gt;

&lt;p&gt;Никаких особых красивостей и ООП-скриптов, потому что это было нужно на коленке (при этом ничего не мешает использовать пакетик красиво).&lt;/p&gt;

&lt;p&gt;Единственный (и то &amp;ndash; мой :) ) баг &amp;ndash; &lt;code&gt;auto-suggestion&lt;/code&gt; в Firefox, который начинает выпадать когда содержимое полей начинает повторяться (если вы задали один вопрос, то вы этого и не заметите). Но я точно помню что его можно было отключить и, кажется, через &lt;code&gt;meta&lt;/code&gt;-теги.&lt;/p&gt;

&lt;p&gt;Для использования нам нужен &lt;em&gt;всего один файл&lt;/em&gt; [из пакетика &lt;a href=&#34;http://www.twilightuniverse.com/downloads/sack/tw-sack.zip%5D:&#34;&gt;http://www.twilightuniverse.com/downloads/sack/tw-sack.zip]:&lt;/a&gt; &lt;code&gt;tw-sack.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Я сразу покажу результат, а потом подробнее рассмотрю тонкие моменты (если они вообще тут есть - имхо все прозрачно :) ) :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTML&lt;/code&gt;-страница:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(для корректной подсветки я разбил код на пять блоков, которые по сути просто идут друг за другом: если их выделить подряд и скопировать &amp;ndash; всё будет верно)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;#34;
                      &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;#34;&amp;gt;
&amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34; /&amp;gt;
    &amp;lt;title&amp;gt;Блах&amp;lt;/title&amp;gt;

    &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;
        /**/.invisible {
            display: none;
        }

        .visible {
            display: block;
        }

        body {
            margin: 25px;
            font-size: 16px;
            font-family: Times New Roman, Georgia, serif;
        }

        div#question-box {
            position: absolute;
            left: 5%;
            margin-top: 5px;
            width: 300px;
            height: 245px;
            border: 1px solid #000;
            background-color: #ffc;
            font-family: Tahoma, Arial, Helvetica, sans-serif;
        }

        div#question-box label {
            font-size: 11px;
        }

        div#question-box span#qbox-label {
            display: block;
            position: relative;
            top: 0;
            left: 0;
            height: 10px;
            padding: 5px;
            font-size: 11px;
            font-weight: bold;
            text-align: center;
            background-color: #ff9;
        }

        div#question-box form {
            padding: 5px 15px;
        }

        form#question-form * {
            color: #333;
            display: block;
            width: 98%;
        }

        form#question-form input,
        form#question-form textarea {
            margin: 3px 0;
            border: 1px solid #333;
        }

        form#question-form input[type=&amp;#34;button&amp;#34;] {
            margin-top: 10px;
        }

        form label {
            font-weight: bold;
        }

        div#status-box span.message,
        div#status-box span.error,
        div#status-box span.warning {
            display: block;
            width: 100%;
            font-weight: bold;
            padding: 5px;
        }

        span.message {
            color: #fff;
        }

        span.error {
            background-color: #f00;
            color: #fff;
        }

        span.warning {
            color: #660;
        }

        form textarea[name=&amp;#34;question&amp;#34;] {
            height: 60px;
        }

        div#question-box div#status-box {
            display: block;
            width: 100%;
            height: 20px;
            background-color: #003;
            font-size: 11px;
            color: #fff;
            padding: 0;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
    &amp;lt;/style&amp;gt;

    &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;./scripts/tw-sack.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script language=&amp;#34;JavaScript&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;
    &amp;lt;!--

&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;javascript&#34;&gt;&lt;code&gt;
        function showElement(elementId) {
            element = document.getElementById(elementId);
            element.className = &amp;#39;visible&amp;#39;;
                // element.style.display = &amp;#39;block&amp;#39;;
        }

        function hideElement(elementId) {
            element = document.getElementById(elementId);
            element.className = &amp;#39;invisible&amp;#39;;
                // element.style.display = &amp;#39;none&amp;#39;;
        }

        function clearFormFields() {
            // optimize for any form then....
            var form = document.getElementById(&amp;#39;question-form&amp;#39;);
            form.heading.value = &amp;#39;&amp;#39;;
            form.sender.value = &amp;#39;&amp;#39;;
            form.question.value = &amp;#39;&amp;#39;;
        };

        var ajax = new sack();

        function whenLoading(){
            var e = document.getElementById(&amp;#39;status-box&amp;#39;);
            e.innerHTML = &amp;#34;Отсылаю данные...&amp;#34;;
        }

        function whenLoaded(){
            var e = document.getElementById(&amp;#39;status-box&amp;#39;);
            e.innerHTML = &amp;#34;Данные отосланы...&amp;#34;;
        }

        function whenInteractive(){
            var e = document.getElementById(&amp;#39;status-box&amp;#39;);
            e.innerHTML = &amp;#34;Получаю данные...&amp;#34;;
        }

        function whenCompleted(){
        }

        function sendQuestion(){
            var form = document.getElementById(&amp;#39;question-form&amp;#39;);
            ajax.setVar(&amp;#34;heading&amp;#34;, form.heading.value);
                // recomended method of setting data to be parsed.
            ajax.setVar(&amp;#34;sender&amp;#34;, form.sender.value);
            ajax.setVar(&amp;#34;question&amp;#34;, form.question.value);
            ajax.requestFile = &amp;#34;q.php&amp;#34;;
            ajax.method = &amp;#39;POST&amp;#39;;
            ajax.element = &amp;#39;status-box&amp;#39;;
            ajax.onLoading = whenLoading;
            ajax.onLoaded = whenLoaded;
            ajax.onInteractive = whenInteractive;
            ajax.onCompletion = whenCompleted;
            ajax.runAJAX();
        }

&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
        //--&amp;gt;
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;./q.php&amp;#34; onmouseover=&amp;#34;showElement(&amp;#39;question-box&amp;#39;);&amp;#34;&amp;gt;
                 отправить вопрос&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
    &amp;lt;div id=&amp;#34;question-box&amp;#34; class=&amp;#34;invisible&amp;#34;
                 onmouseover=&amp;#34;showElement(&amp;#39;question-box&amp;#39;);&amp;#34;
                 onmouseout=&amp;#34;hideElement(&amp;#39;question-box&amp;#39;);&amp;#34;&amp;gt;
        &amp;lt;span id=&amp;#34;qbox-label&amp;#34;&amp;gt;Ваш вопрос: &amp;lt;/span&amp;gt;
        &amp;lt;div id=&amp;#34;status-box&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;form id=&amp;#34;question-form&amp;#34; name=&amp;#34;question-form&amp;#34;
                         method=&amp;#34;post&amp;#34; action=&amp;#34;./q.php&amp;#34;&amp;gt;
            &amp;lt;label for=&amp;#34;heading&amp;#34;&amp;gt;Заголовок:&amp;lt;/label&amp;gt;
                &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;heading&amp;#34; id=&amp;#34;q-heading&amp;#34;
                                             maxlength=&amp;#34;80&amp;#34; /&amp;gt;
            &amp;lt;label for=&amp;#34;sender&amp;#34;&amp;gt;Отправитель (e-mail) (*):&amp;lt;/label&amp;gt;
                &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;sender&amp;#34; id=&amp;#34;q-sender&amp;#34;
                                             maxlength=&amp;#34;60&amp;#34; /&amp;gt;
            &amp;lt;label for=&amp;#34;question&amp;#34;&amp;gt;Вопрос (255 символов):&amp;lt;/label&amp;gt;
                &amp;lt;textarea name=&amp;#34;question&amp;#34; rows=&amp;#34;5&amp;#34; cols=&amp;#34;25&amp;#34;
                         id=&amp;#34;q-body&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;
            &amp;lt;input type=&amp;#34;button&amp;#34; name=&amp;#34;post_question&amp;#34; value=&amp;#34;Задать&amp;#34;
                onclick=&amp;#34;sendQuestion(); clearFormFields();
                         return false;&amp;#34;
                ondblclick=&amp;#34;sendQuestion(); return false;&amp;#34; /&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И принимающий скрипт &amp;ndash; &lt;code&gt;q.php&lt;/code&gt; (&lt;em&gt;Обратите внимание&lt;/em&gt; &amp;ndash; он на &lt;code&gt;utf-8&lt;/code&gt;, дабы совпадать в кодировке со страницей):&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;&lt;code&gt;
&amp;lt;?php
ob_start();
print_r($_POST);
$postdata = ob_get_clean();

$heading = substr($_POST[&amp;#39;heading&amp;#39;], 0, 80);
$sender = substr($_POST[&amp;#39;sender&amp;#39;], 0, 60);
$question = substr($_POST[&amp;#39;question&amp;#39;], 0, 255);

if (isset($question) &amp;amp;&amp;amp; (&amp;#39;&amp;#39; != $question)) {
    if (isset($sender) &amp;amp;&amp;amp; (&amp;#39;&amp;#39; != $sender)) {

        /* connect to DB */

        $conn = mysql_connect(&amp;#34;localhost&amp;#34;, &amp;#34;****&amp;#34;,&amp;#34;*******&amp;#34;)
                or die(&amp;#34;Could not connect&amp;#34;);
        if( !$conn ) die( mysql_error() );

        mysql_select_db(&amp;#34;*****&amp;#34;) and
            mysql_query(&amp;#34;set names utf8&amp;#34;) and
            mysql_query(&amp;#34;SET collation_connection = &amp;#39;utf8_general_ci&amp;#39;&amp;#34;);

        /* insert question */

        $sql = &amp;#34;INSERT INTO questions SET
                    heading=&amp;#39;&amp;#34;.mysql_escape_string($heading).&amp;#34;&amp;#39;,
                    sender=&amp;#39;&amp;#34;.mysql_escape_string($sender).&amp;#34;&amp;#39;,
                    question=&amp;#39;&amp;#34;.mysql_escape_string($question).&amp;#34;&amp;#39;,
                    post_date=SYSDATE()&amp;#34;;
        $result = mysql_query($sql);

        if (!$result) $responce_str = &amp;#34;&amp;lt;span class=&amp;#39;error&amp;#39;&amp;gt;Не удалось
                добавить вопрос $heading в базу данных&amp;lt;/span&amp;gt;&amp;#34;;
        else $responce_str = &amp;#34;&amp;lt;span class=&amp;#39;message&amp;#39;&amp;gt;Ваш вопрос
                отправлен!&amp;lt;/span&amp;gt;&amp;#34;;

        mysql_close($conn);

    } else {
        $responce_str = &amp;#34;&amp;lt;span class=&amp;#39;warning&amp;#39;&amp;gt;E-mail
                отправителя нужно указать обязательно&amp;lt;/span&amp;gt;&amp;#34;;
    }
} else {
    $responce_str = &amp;#34;&amp;lt;span class=&amp;#39;warning&amp;#39;&amp;gt;Пожалуйста,
                        укажите ваш вопрос&amp;lt;/span&amp;gt;&amp;#34;;
}

echo $responce_str;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В &lt;code&gt;HTML&lt;/code&gt;-коде большую часть даже занимает &lt;code&gt;CSS&lt;/code&gt; :).&lt;/p&gt;

&lt;p&gt;В &lt;code&gt;JavaScript&lt;/code&gt; после строки &lt;code&gt;var ajax = new sack();&lt;/code&gt; идет собственно код для &lt;code&gt;Sack&lt;/code&gt;’а. Пара функций-event-handler’ов и небольшая, очевидная, функция, которая все это собирает. В &lt;code&gt;PHP&lt;/code&gt; от &lt;code&gt;SACK&lt;/code&gt;’а - ничего. Только привычное забирание значений из &lt;code&gt;$_POST&lt;/code&gt; (тут уж как вы решите). Все.&lt;/p&gt;

&lt;p&gt;Имхо - великолепно.&lt;/p&gt;

&lt;p&gt;Не знаю как насчет пересылки массивов в &lt;code&gt;SACK&lt;/code&gt;, но судя по демо, которое есть в пакетике - и с этим все в порядке.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>PHP и UTF-8 (Unicode) - Неинтересная забава на полдня</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/php-mysql-unicode/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/php-mysql-unicode/</id>
                <updated>2006-12-22T00:46:00Z</updated>
                
                <summary type="html">Это &lt;a href=&#34;http://live.julik.nl/2005/03/unicode-php&#34;&gt;не мой совет&lt;/a&gt; (я разместил объяву :) ), но уж очень неимоверно он мне помог.</summary>
                <content type="html">&lt;p&gt;Это &lt;a href=&#34;http://live.julik.nl/2005/03/unicode-php&#34;&gt;не мой совет&lt;/a&gt; (я разместил объяву :) ), но уж очень неимоверно он мне помог.&lt;/p&gt;

&lt;p&gt;Я хотел добиться того, чтобы мои страницы были в кодировке &lt;code&gt;UTF-8&lt;/code&gt;, но и с базой бы все было нормально.&lt;/p&gt;

&lt;p&gt;Всего-навсего сочетание этого совета и одной строки в &lt;code&gt;PHP&lt;/code&gt; при коннекте к базе данных.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt; + &lt;code&gt;Apache&lt;/code&gt; + &lt;code&gt;PHP&lt;/code&gt; + &lt;code&gt;mb_string&lt;/code&gt; :)&lt;/p&gt;

&lt;p&gt;В мускуле, судя по &lt;code&gt;PHPMyAdmin&lt;/code&gt;’у все было поставлено в &lt;code&gt;utf-8&lt;/code&gt;. Тем не менее мне пришлось исправить в коннекте к базе строчку:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql_select_db(&amp;#34;****&amp;#34;) and mysql_query(&amp;#34;set names utf8&amp;#34;) and
mysql_query(&amp;#34;SET collation_connection = &amp;#39;utf8_general_ci&amp;#39;&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Затем я добавил в &lt;code&gt;.htaccess&lt;/code&gt; всех &lt;code&gt;html&lt;/code&gt;/&lt;code&gt;php&lt;/code&gt; каталогов (почему и о чем это я - &lt;a href=&#34;http://live.julik.nl/2005/03/unicode-php&#34;&gt;в том самом совете&lt;/a&gt;) следующее:&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
# unicode support
AddDefaultCharset utf-8
&amp;lt;IfModule mod_charset.c&amp;gt;
   CharsetDisable on
   CharsetRecodeMultipartForms Off
&amp;lt;/IfModule&amp;gt;

php_value       mbstring.func_overload  7
php_value       default_charset         UTF-8
php_value       mbstring.language       Russian

php_value       mbstring.internal_encoding      UTF-8
php_flag        mbstring.encoding_translation   on
php_value       mbstring.http_input     &amp;#34;UTF-8,KOI8-R,CP1251&amp;#34;
php_value       mbstring.http_output    UTF-8
php_value       mbstring.detect_order   &amp;#34;UTF-8,KOI8-R,CP1251&amp;#34;
# end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И, конечно же, перекодировал все свои страницы и &lt;code&gt;php&lt;/code&gt;-файлы в &lt;code&gt;UTF-8&lt;/code&gt; (юзал &lt;a href=&#34;http://www.pspad.com/&#34;&gt;PSPad&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;В &lt;code&gt;HTML&lt;/code&gt;-ках на всякий случай указал вот это:&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34; /&amp;gt;
&amp;lt;/head&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И все заработало! (этот метод использовался и при сборке кода из предыдущего поста)&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Trac + Subversion + Ubuntu: интересная забава на день</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/trac-subversion-ubuntu-initial/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/trac-subversion-ubuntu-initial/</id>
                <updated>2006-12-16T00:46:00Z</updated>
                
                <summary type="html">Приветствую всех заинтересованных. Ведь вас, наверняка, не очень много :).</summary>
                <content type="html">&lt;p&gt;Приветствую всех заинтересованных. Ведь вас, наверняка, не очень много :).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt;: Более структурированное и последовательное (правда менее повествовательное) руководство для &lt;a href=&#34;http://ubuntuguide.org/wiki/Ubuntu:Feisty%20Ubuntu%207.04&#34;&gt;Ubuntu Feisty&lt;/a&gt; находится &lt;a href=&#34;./trac-subersion-ubuntu-revisited&#34;&gt;здесь&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ну а я, в свою очередь, славлюсь среди знающих меня извращенными подходами к простым вещам, так что и в этот раз решил не ломать традиций :).&lt;/p&gt;

&lt;p&gt;Предыстория статьи такова:&lt;/p&gt;

&lt;p&gt;Автор находится на испытательном сроке в некой фирме и по прибытию туда обнаруживает, что единственный коллега кроме начальника пишет Систему Управления Проектами (не путать с блоггерскими захватчиками - СУПом) на PHP сроком на две недели (правда, за эти две недели начальник разумно (имхо) требует лишь на-коленочного-статуса). Автор присматривается к требованиям, удивляется и сообщает начальнику, что есть уже такая система, бесплатная, расширяемая и все-в-одном-что-вам-нужно - &lt;a href=&#34;http://trac.edgewall.org&#34;&gt;Trac&lt;/a&gt; - система, которой он с радостью и удовольствием пользовался на прошлой работе. Благо начальник знает что такое SVN, про его замечательную поддержку было упомянуто тоже. Ну и конечно за свои слова пришлось отвечать - за это автору было заказано установить эту хитрую систему (как некоторые пишут, один из самых сложных пакетов для установки).&lt;/p&gt;

&lt;p&gt;В свою очередь, в связи с извращенскими посылами автора, он умолчал о непредназначенности для Trac’а такой заботливой-о-пользователе-системы как Ubuntu, да еще и поставил это дело для демонстрации a) на vmWare (что, собственно, сути не меняет) (далее - “твари”) с опцией &lt;code&gt;Host-Only&lt;/code&gt; и б) на &lt;code&gt;apache2&lt;/code&gt;. Это потому что a) другого нового Unix’а у автора под рукой не было, а устанавливать его основной ОС было делом неперспективным и б) руководства в инете для Trac + Ubuntu почему-то именно про &lt;code&gt;apache2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Соответственно, действующие лица aka Оперируемые:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ubuntu 6.06 TLS&lt;/em&gt; (руссская, хе-хе :) ), &lt;em&gt;Trac 0.10.3&lt;/em&gt;, Subversion &lt;em&gt;1.4.2&lt;/em&gt; в роли &lt;em&gt;Subversion 1.3.1&lt;/em&gt; (почему - смотрите ниже), &lt;em&gt;Python 2.4.3&lt;/em&gt; (побоялся ставить на 2.5).&lt;/p&gt;

&lt;p&gt;Более поздний P.S. В скором времени я, вероятно, буду ставить всю эту компанию (более злободневные версии) на Ubuntu 7.04 с Python 2.5, и статья, ввиду опыта нескольких установок, будет чуть пограмотнее…&lt;/p&gt;

&lt;p&gt;Система устанавливалась прямиком с LiveCD, без каких-либо хитрых настроек, вот как есть - шесть пунктов установки и ничего больше. Вы, конечно же, можете все сделать хитрее - думаю на процессе это отразится не сильно (в отличие, например, от подстановки другой ОС :) ).&lt;/p&gt;

&lt;p&gt;Итак, второй апач и 2.4-ый питон нашлись в русских архивах Ubuntu (вернее Python уже был установлен, но я немного привру :) ), поэтому здесь все было просто:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install apache2 python2.4
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Upd.&lt;/strong&gt;: Если вы используете английскую юбунту и апача, например, не нашлось, делаем следующее:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Добавляем (&lt;code&gt;Insert&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deb http://ru.archive.ubuntu.com/ubuntu dapper universe main restricted multiverse
deb-src http://ru.archive.ubuntu.com/ubuntu dapper universe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если нужно, снимаем комменты со строк с &lt;code&gt;http://**.archive.ubuntu.com&lt;/code&gt; и делаем:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;На интернациональных (читай англоязычных) порталах (конечно же можно действительно, как подсказал &lt;code&gt;@cyberskunk&lt;/code&gt;, раскомментить их в &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;) мог бы отыскаться и Trac, но в русской ОС его не нашлось, поэтому я решил сделать его установку ручками, благо это лишь пара лишних команд:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Upd.:&lt;/strong&gt; Здесь и далее все адреса из ссылок «взять» и «забрать» можно использовать как параметры для команды &lt;code&gt;wget &amp;lt;ссылка&amp;gt;&lt;/code&gt;, при этом надо находится в каталоге &lt;code&gt;~/distr&lt;/code&gt; - по статье все файлы скачиваются туда.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Надо &lt;a href=&#34;http://ftp.edgewall.com/pub/trac/trac-0.10.3.tar.gz&#34;&gt;взять&lt;/a&gt; его &lt;a href=&#34;http://trac.edgewall.org/wiki/TracDownload&#34;&gt;с официального сайта&lt;/a&gt; и положить куда-нибудь, например в папку &lt;code&gt;distr&lt;/code&gt; в домашней директории и затем, собственно, инсталлировать (установленных пакетов вам должно хватить и все должно обойтись без зависимостей):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(все-все дистрибутивы я складывал в &lt;code&gt;~/distr&lt;/code&gt;, что и вам советую, дабы не запутаться)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;cd /home/some-user/distr
tar xvfz trac-0.10.3.tar.gz
cd ./trac-0.10.3
sudo python ./setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Далее, создадим каталог, куда будем складывать окружения (aka environments - гм…. проектов?) trac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /var/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Этот каталог должен быть доступен апачу:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown www-data:www-data /var/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь необходимо настроить доступ апача к trac’у:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/sites-available/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Содержимое этого файла должно выглядеть так:&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;VirtualHost *&amp;gt;
    ServerAdmin webmaster@localhost
    ServerName trac.example.com
    DocumentRoot /usr/share/trac/cgi-bin
    &amp;lt;Directory /usr/share/trac/cgi-bin&amp;gt;
        Options Indexes FollowSymLinks MultiViews ExecCGI
        AllowOverride All
        Order allow,deny
        allow from all
    &amp;lt;/Directory&amp;gt;
    Alias /trac &amp;#34;/usr/share/trac/htdocs&amp;#34;

    &amp;lt;Location /trac.cgi&amp;gt;
        SetEnv TRAC_ENV_PARENT_DIR &amp;#34;/var/trac&amp;#34;
    &amp;lt;/Location&amp;gt;

    DirectoryIndex trac.cgi
    ErrorLog /var/log/apache2/error.trac.log
    CustomLog /var/log/apache2/access.trac.log combined
&amp;lt;/VirtualHost&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если кратко, мы настраиваем виртуальный хост, устанавливаеваем корневой каталог для &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Gateway_Interface%20Common%20Gateway%20Interface&#34;&gt;CGI&lt;/a&gt;-скриптов и документов в &lt;code&gt;/usr/share/trac/cgi-bin/&lt;/code&gt;, а адрес &lt;code&gt;http://localhost/trac&lt;/code&gt; привязываем к пути &lt;code&gt;/usr/share/trac/htdocs&lt;/code&gt; - там лежат всяческие веб-документы. Для доступа к проектам для запросов на &lt;code&gt;http://localhost/trac.cgi&lt;/code&gt; устанавливается корневой каталог для окружений trac’а - &lt;code&gt;/var/trac&lt;/code&gt;. В принципе,знающему английский все должно быть понятно :).&lt;/p&gt;

&lt;p&gt;Теперь следует включить обработку &lt;code&gt;cgi&lt;/code&gt;-скриптов:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/apache2.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В этом файле раскомментируйте строку &lt;code&gt;AddHandler cgi-script .cgi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Переключим apache на сайт trac’а в качестве основного:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2dissite default
sudo a2ensite trac
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;(проверьте, является ли теперь &lt;code&gt;/etc/apache2/sites-enabled/trac&lt;/code&gt; ссылкой на &lt;code&gt;/etc/apache2/sites-available/trac&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Так что пусть апач перечитает настройки:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/apache2 reload
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Upd.:&lt;/strong&gt; Теперь можно проверить, все ли в порядке - если в браузере вы набираете &lt;code&gt;http://localhost/trac.cgi/BlahBlah&lt;/code&gt; и видите строку “&lt;code&gt;Environment not found&lt;/code&gt;” - значит все в порядке. Также &lt;code&gt;http://localhost/trac&lt;/code&gt; должен открывать каталог &lt;code&gt;/usr/share/trac/htdocs&lt;/code&gt;, а &lt;code&gt;http://localhost/trac.cgi&lt;/code&gt; говорить, что нет &lt;code&gt;Clearsilver&lt;/code&gt;’a. Не забудьте кстати потом настроить апачевские права доступа, если надо &amp;ndash; это выходит за рамки статьи, в отличие от траковских :).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Настало время взяться за установку &lt;code&gt;Subversion&lt;/code&gt;. Его тоже не оказалось в &lt;code&gt;apt-cache&lt;/code&gt;, поэтому я его &lt;a href=&#34;http://subversion.tigris.org/downloads/subversion-1.4.2.tar.gz&#34;&gt;забрал&lt;/a&gt; последний на тот момент (1.4.2) &lt;a href=&#34;http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=260&amp;amp;expandFolder=260&amp;amp;folderID=7495&#34;&gt;отсюда&lt;/a&gt; и, также, положил в каталог &lt;code&gt;~/distr&lt;/code&gt;, там распаковал, установил необходимые зависимости, собрал и установил, вот так (&lt;strong&gt;Upd.:&lt;/strong&gt; Обратите внимание, пакет называется &lt;code&gt;zlib**1**g-dev&lt;/code&gt;, а не &lt;code&gt;zlib**l**g-dev&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home/some-user/distr/
tar xvfz subversion-1.4.2.tar.gz
sudo apt-get install gcc
sudo apt-get install libtool
sudo apt-get install libapr0-dev
sudo apt-get install zlib1g-dev
sudo apt-get install make
cd ./subversion-1.4.2
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Затем установим модуль &lt;code&gt;svn&lt;/code&gt; для &lt;code&gt;apache&lt;/code&gt;, утановим &lt;code&gt;swig&lt;/code&gt; и установим через пакет &lt;code&gt;subversion&lt;/code&gt; версию &lt;code&gt;swig&lt;/code&gt; для &lt;code&gt;python&lt;/code&gt; (текущий каталог - &lt;code&gt;/home/some-user/distr/subversion-1.4.2&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libapache2-svn
sudo apt-get install swig
sudo apt-get install python-dev
./configure
sudo make swig-py
sudo make install-swig-py
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Upd.:&lt;/strong&gt; По возможности не обращайте внимания на warning’и при установке - насчет redefin’ов - на них установлена пауза дабы вы с ними ознакомились, но она кончается :))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Установим ссылки на установленные модули так, чтобы они были видны питону.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/lib/python2.4/site-packages
sudo ln -s /usr/local/lib/svn-python/libsvn
sudo ln -s /usr/local/lib/svn-python/svn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Установим модуль &lt;code&gt;pysqlite&lt;/code&gt;, чтобы &lt;code&gt;trac&lt;/code&gt; мог работать со своей базой данных.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pysqlite2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ввиду новых изменений переустановим &lt;code&gt;trac&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home/some-user/distr/trac-0.10.3
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь нужно установить &lt;code&gt;clearsilver&lt;/code&gt; - чтобы &lt;code&gt;trac&lt;/code&gt; мог использовать шаблоны для страниц. Этот пакет тоже пришлось &lt;a href=&#34;http://www.clearsilver.net/downloads/clearsilver-0.10.4.tar.gz&#34;&gt;забирать&lt;/a&gt; &lt;a href=&#34;http://www.clearsilver.net/downloads/&#34;&gt;из сети&lt;/a&gt; и собирать тут же.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home/some-user/distr
tar xvfz clearsilver_0.10.3.orig.tar.gz
cd ./clearsilver_0.10.3.orig
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Наконец, создадим каталог для репозитория &lt;code&gt;subversion&lt;/code&gt; и базовую структуру для него в каталоге &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /var/svn
cd /tmp
sudo rm -rfR *
sudo rm -rfR .*
sudo mkdir /tmp/trunk
sudo mkdir /tmp/tags
sudo mkdir /tmp/branches
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;А теперь начинаются вещи, которые чаще всего генерируют проблемы. Будьте внимательны - в командах я еще мог ошибиться, но мои пояснения верны просто потому что пол-дня были потрачены именно на их решение, а потом еще меня проконсультировал действующий админ и друг (за что ему, конечно же, благодарность и которого, конечно же, я мог понять неверно и переврать :) ).&lt;/p&gt;

&lt;p&gt;Более того, вся настройка ниже имеет условие - “используется только один репозиторий для создаваемого проекта”. Пояснения - ниже. (&lt;em&gt;а еще лучше - по поводу нескольких репозиториев - см. в &lt;strong&gt;Upd.&lt;/strong&gt; внизу - тут тоже я, в принципе, не вру - но там об этом корректнее&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Используя &lt;code&gt;svnadmin&lt;/code&gt; инициализируем репозиторий в соответствующей папке. Опция &lt;code&gt;–pre-1.4-compatible&lt;/code&gt; необходима, если при установке без нее &lt;code&gt;apache&lt;/code&gt; стал выдавать в логах нечто вроде “_в &lt;code&gt;/var/svn/SomeTracProject/format&lt;/code&gt; ожидалась версия 3, а обнаружена была версия 5_″. Это конфликт разных версий модуля для Если вы используете точно такую же систему что и я (а именно если вы не исправляли ничего в &lt;code&gt;/etc/apt/sources.conf&lt;/code&gt; и никто не выкладывал со времени моего поста новых версий пакетов :) ) и в точности следуете моим командам - то если вы не установите эту опцию - точно так и получится. В остальных случаях бросьте монету, протестируйте - пересоздать репозиторий никогда не поздно (закоммитить удаленно в неработающий все равно не получится :) ). Только потом, если вы уже создали окружение для trac - не забудьте потом сделать &lt;code&gt;sudo trac-admin /var/trac/SomeTracProject resync&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Затем импортируем структуру из &lt;code&gt;/tmp&lt;/code&gt; в репозиторий &lt;code&gt;svn&lt;/code&gt; и допускаем туда &lt;code&gt;apache&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo svnadmin create –pre-1.4-compatible /var/svn/SomeTracProject
cd /tmp
sudo svn import . file:///var/svn/SomeTracProject -m “Initial import”
sudo chown -R www-data:www-data /var/svn/SomeTracProject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Как вариант, можно создать репозиторий в файловой системе FSFS, тогда делайте: &lt;code&gt;sudo svnadmin create -pre-1.4-compatible -fs-type=fsfs /var/svn/SomeTracProject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Настало время инициировать окружение Trac. Отвечайте на вопросы честно, если не знаете ответа &amp;ndash; по умолчанию. На вопрос про тип системы контроля версий ответьте ’&lt;code&gt;svn&lt;/code&gt;’, а на вопрос про положение репозитория - ‘&lt;code&gt;/var/svn/SomeTracProject&lt;/code&gt;’.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo trac-admin SomeTracProject initenv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И в этот каталог &lt;code&gt;apache&lt;/code&gt; тоже должен иметь доступ.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R www-data /var/trac/SomeTracProject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Каким образом - апачу нужно объяснить:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/sites-available/trac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вставьте в этот файл следующий текст (после последнего &lt;code&gt;&amp;lt;/Location&amp;gt;&lt;/code&gt;):&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;Location /trac.cgi/*/login&amp;gt;
    AuthType Basic
    AuthName &amp;#34;Trac&amp;#34;
    AuthUserFile /etc/apache2/dav_svn.passwd
    Require valid-user
&amp;lt;/Location&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кратко - это настройка аутентификации для страницы логина. В качестве источника пользователей и &lt;code&gt;md5&lt;/code&gt;-хешей-паролей используется файл &lt;code&gt;/etc/apache2/dav_svn.passw&lt;/code&gt;, который мы создадим попозже.&lt;/p&gt;

&lt;p&gt;А пока - настроим удаленный доступ к репозиторию. Здесь надо остановиться и вдохнуть. Будьте внимательны.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/mods-available/dav_svn.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ниже приведена конфигурация для доступа к одному репозиторию, если он подразумевается как единственный!&lt;/p&gt;

&lt;p&gt;Если вы хотите настроить доступ к нескольким репозитроиям, все происходит совсем по-другому. Во-первых можно выделить как &lt;code&gt;&amp;lt;Location&amp;gt;&lt;/code&gt; сам каталог &lt;code&gt;/svn&lt;/code&gt;, тогда для него надо задать - ‘&lt;code&gt;SVNPath /var/svn&lt;/code&gt;’ и настраивать корректно аутентификацию в &lt;code&gt;authz&lt;/code&gt;-файле (смотрите ниже). Если же вы настраиваете &lt;code&gt;Location&lt;/code&gt;‘ы для репозиториев со своими (отдельными) файлами авторизации (только тогда это оправдано), для ‘&lt;code&gt;Location /svn&lt;/code&gt;’ следует указать вместо ‘&lt;code&gt;SVNPath&lt;/code&gt;’ - ‘&lt;code&gt;SVNParentPath /var/svn&lt;/code&gt;’, а для &lt;code&gt;Location&lt;/code&gt;‘ов репозиториев указывать относительные пути, например: ‘&lt;code&gt;SVNPath /SomeTracProject&lt;/code&gt;’. &lt;em&gt;(подробнее см. в &lt;strong&gt;Upd.&lt;/strong&gt; ниже)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;В любом случае, если у вас в логах вылезают ошибки типа ‘&lt;code&gt;Unknown/Incorrect SVN FileSystem&lt;/code&gt;’ - ошибку следует искать именно здесь, конкретно в &lt;code&gt;SVN[Parent]Path&lt;/code&gt;. Причины же неожиданных &lt;code&gt;Forbidden&lt;/code&gt;, конечно, кроются в неверных &lt;code&gt;Location&lt;/code&gt;‘ах и, соответственно, аутентификации. Отключайте ее, проверяйте &lt;code&gt;Location&lt;/code&gt;. Потом авторизацию. Впрочем, если вы осознали (а я хорошо объяснил) предыдущий абзац, то этих ошибок у вас вылезти не должно. Поговорив с я бы уже сделал все немного по-другому (смотрите ниже описание аутентификации), но в этом варианте уже все проверено и работает, а наугад писать опасно.&lt;/p&gt;
&lt;pre lang=&#34;apache&#34;&gt;&lt;code&gt;
&amp;lt;Location /svn&amp;gt;
    DAV svn
    SVNPath /var/svn/SomeTracProject
    AuthType Basic
    AuthName &amp;#34;Subversion Repository&amp;#34;
    AuthUserFile /etc/apache2/dav_svn.passwd
    #AuthSVNAccessFile /etc/apache2/dav_svn.authz
    Require valid-user
&amp;lt;/Location&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Создадим файл паролей и добавим туда пользователей (внимание: опция &lt;code&gt;-c&lt;/code&gt; не нужна во втором случае - она создает/перезаписывает файл без предупреждения)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo htpasswd2 -c /etc/apache2/dav_svn.passwd user1
sudo htpasswd2 /etc/apache2/dav_svn.passwd user2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Установим первому пользователю права администратора в Trac’е.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo trac-admin /var/trac/SomeTracProject permission add user1 TRAC_ADMIN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Чтобы прочувствовать эти права на себе, можно поставить плагин &lt;a href=&#34;http://trac.edgewall.org/wiki/WebAdmin&#34;&gt;TracWebAdmin&lt;/a&gt; - он добавляет удобную админскую GUI-страничку в Trac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://peak.telecommunity.com/dist/ez_setup.py
sudo python ez_setup.py
wget http://trac.edgewall.org/attachment/wiki/WebAdmin/TracWebAdmin-0.1.2dev_r4240 py2.4.egg.zip?format=raw
mv TracWebAdmin-0.1.2dev_r4240-py2.4.egg.zip\?format\=raw TracWebAdmin.egg
sudo easy_install TracWebAdmin.egg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В конфигурации проекта включите этот плагин.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /var/trac/SomeTracProject/conf/trac.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вставьте:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[components]
webadmin.*=enabled
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь добавим авторизацию для проектов в subversion.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/mods-available/dav_svn.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Раскомментируйте ‘&lt;code&gt;AuthSVNAccessFile /etc/apache2/dav_svn.authz&lt;/code&gt;’.&lt;/p&gt;

&lt;p&gt;Структура файла авторизации проста: пути, пользователи и права (&lt;code&gt;r&lt;/code&gt; - чтение, &lt;code&gt;w&lt;/code&gt; - запись):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/dav_svn.authz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вставьте:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[/]
user1 = rw
user2 = r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если бы вы указали в файле &lt;code&gt;/etc/apache2/mods-enabled/dav_svn.conf&lt;/code&gt; ‘&lt;code&gt;SVNParentPath /var/svn&lt;/code&gt;’, то файл аутентификации должен бы был выглядеть как-нибудь так (и это верный вариант для репозиториев с несколькими проектами):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[/SomeTracProject]
user1 = rw
user2 = r

[/AnotherTracProject]
user1 = rw
user2 = r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ну и наконец перезапустим сервер (а если что-нибудь до сих пор не работает - машину :)) )&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…На следующей неделе я буду устанавливать &lt;code&gt;Timing&lt;/code&gt; для Trac’а (тикет получает такое понятие как &lt;code&gt;estimation&lt;/code&gt; + фактическое время за которое он был сделан, &lt;code&gt;milestone&lt;/code&gt; позволяет сложить все это время в часы, в комментах к ревизиям можно писать за сколько времени был выполнен тикет (часть тикета) и время автоматически просуммируется) - и если будет возможность и все пройдет удачно (это &lt;code&gt;diff&lt;/code&gt; для версии 0.10), опишу здесь и этот процесс.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Upd.:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Первое.&lt;/em&gt; По поводу нескольких окружений и связанных с ними репозиториях. Легче всего - забить на отдельные репозитории для окружений и сделать (кстати имхо это и для одного проекта неплохой вариант)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo svnadmin create –pre-1.4-compatible /var/svn/&lt;/code&gt; (опция &lt;code&gt;compatible&lt;/code&gt; обязательна есть только у вас апач ругается на формат в файле &lt;code&gt;/var/svn/FORMAT&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Затем в &lt;code&gt;/tmp/&lt;/code&gt; (очистив его предварительно :) ) &lt;code&gt;mkdir&lt;/code&gt;-ом построить структуру “по одному каталогу для каждого проекта”. А в каждом из этих каталогов сделать, соответственно, свои &lt;code&gt;trunk&lt;/code&gt;-&lt;code&gt;tags&lt;/code&gt;-&lt;code&gt;branches&lt;/code&gt;. Затем сделать&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /tmp
sudo svn import . file:///var/svn/ -m “Initial import”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В &lt;code&gt;/etc/apache2/mods-enabled/dav_svn.conf&lt;/code&gt; указать:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Location /svn&amp;gt;
    DAV svn
    SVNPath /var/svn/
    AuthType Basic
    AuthName &amp;#34;Subversion Repository&amp;#34;
    AuthUserFile /etc/apache2/dav_svn.passwd
    AuthSVNAccessFile /etc/apache2/dav_svn.authz
    Require valid-user
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и убрать ненужные &lt;code&gt;Location&lt;/code&gt;’ы (подкаталоги &lt;code&gt;svn&lt;/code&gt;’а), если они там есть.&lt;/p&gt;

&lt;p&gt;А вот уже в файле аутентификации &lt;code&gt;/etc/apache2/dav_svn.authz&lt;/code&gt; мы прописываем права на проекты:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[/]
megaroot = rw

[/SomeProject]
user1 = rw
user2 = r

[/AnotherProject]
user1 = rw
user2 = r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;При создании окружений в &lt;code&gt;trac-admin&lt;/code&gt;, мы в пути к репозиторию, соответственно, указываем &lt;code&gt;/var/svn/SomeProject&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Теперь можно возвращаться и читать про &lt;code&gt;htpasswd&lt;/code&gt; и &lt;code&gt;TracWebAdmin&lt;/code&gt;. Больше ничего не надо. А, хотя нет - потом вернитесь и прочитайте пункт ///Треть/е. Я расскажу про то, что делать, когда уже все поставлено.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Второе.&lt;/em&gt; &lt;a href=&#34;http://trac.edgewall.org/wiki/TimeTracking&#34;&gt;Timing&lt;/a&gt; устанавливается точно так, как указано в рководстве, так что пояснений я делать не буду :). Остальные основные плагины (&lt;a href=&#34;http://trac-hacks.org/wiki/AccountManagerPlugin&#34;&gt;авторизация формой/аккаунты&lt;/a&gt;, &lt;a href=&#34;http://trac-hacks.org/wiki/DiscussionPlugin&#34;&gt;форумы&lt;/a&gt; и &lt;a href=&#34;http://trac-hacks.org/wiki/WikiGoodiesPlugin&#34;&gt;бла-бла-бла&lt;/a&gt;) прикручиваются еще легче &amp;ndash; сборкой&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python setup.py bdist_egg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;из распакованных сурсов, взятием из каталога &lt;code&gt;dist&lt;/code&gt; результирующего яйца (&lt;code&gt;.egg&lt;/code&gt;, прошу не обижаться - это почти что питоновский почти что аналог почти что &lt;code&gt;.jar&lt;/code&gt;-ов) и укладкой его в каталог &lt;code&gt;plugins&lt;/code&gt; окружения &lt;code&gt;trac&lt;/code&gt;’a (не забываем про права &lt;code&gt;www-data&lt;/code&gt;) (+ прописывание плагина в &lt;code&gt;trac.ini&lt;/code&gt; окружения, как указано в описании или включение его в админке) . (для плагина с авторизацией в &lt;code&gt;/etc/apache2/sites-enabled/trac&lt;/code&gt; надо закомментить весь &lt;code&gt;Location trac.cgi/*/login&lt;/code&gt;, выключить траковский &lt;code&gt;LoginModule&lt;/code&gt; и включить &lt;code&gt;LoginModule&lt;/code&gt; из этого плагина, указать ему на &lt;code&gt;/etc/apache/dav_svn.passwd&lt;/code&gt; и затем рестартовать апач).&lt;/p&gt;

&lt;p&gt;Сложнее с плагином &lt;a href=&#34;http://trac-hacks.org/wiki/GraphvizPlugin&#34;&gt;Graphviz&lt;/a&gt;, так что если он действительно нужен и никак его не поставить - пишите мне. Но думаю если вы справились со всем предыдущим - у вас и здесь все пройдет на ура :).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Третье.&lt;/em&gt; Когда нужно создать новый проект уже после того как все поставлено (а то и через некоторое время) - все просто. Пользователю &lt;code&gt;megaroot&lt;/code&gt; (см. &lt;code&gt;/etc/apache2/dav_svn.authz&lt;/code&gt;) закоммитить в &lt;code&gt;/var/svn/&lt;/code&gt; каталог с этим проектом (+ &lt;code&gt;trunk&lt;/code&gt;-&lt;code&gt;tags&lt;/code&gt;-&lt;code&gt;branches&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Затем:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo trac-admin /var/trac/NewProject initenv&lt;/code&gt; (в пути к subversion указываем &lt;code&gt;/var/svn/NewProject&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R www-data:www-data /var/trac/NewProject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь надо настроить аутентификацию, делаем:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/dav_svn.authz

Жмем `Insert` и вставляем в конец файла:

[/NewProject]
user1 = rw
user2 = r
megaroot = rw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;делаем &lt;code&gt;Esc/:wq&lt;/code&gt; и…. все. Вот так - если все правильно настроено - делать нужно минимум.&lt;/p&gt;

&lt;p&gt;Насчет добавления пользователя. Добавлять его нужно только в &lt;code&gt;/etc/apache2/dav_svn.passwd&lt;/code&gt; и никуда больше:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo htpasswd /etc/apache2/dav_svn.passwd new_user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;И если у вас все правильно настроено - примет его корректно и trac, и subversion.&lt;/p&gt;

&lt;p&gt;Ах, ну да, для subversion его нужно еще пустить в проект :):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/dav_svn.authz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вставляем в нужный проект:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[/SomeProject]
user1 = rw
user2 = r
megaroot = rw
new_user = rw
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;Вот теперь точно все. Успехов :)&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>JSP Custom tags</title>
                <link rel="alternate" href="http://shamansir.github.com/blog/ru/articles/jsp-custom-tags/" type="text/html" />
                <id>http://shamansir.github.com/blog/ru/articles/jsp-custom-tags/</id>
                <updated>2006-05-15T00:46:00Z</updated>
                
                <summary type="html">Расскажу вам для затравки, например, о кастом-тэгах для &lt;a href=&#34;http://java.sun.com/products/jsp/&#34;&gt;JSP&lt;/a&gt; (а по принципу - и для каких-нибудь там Java Server Faces). Информации об этом действительно не так уж мало. Но тем не менее хотелось предложить для начала что-нибудь простенькое дабы развернуть тему.</summary>
                <content type="html">&lt;p&gt;Расскажу вам для затравки, например, о кастом-тэгах для &lt;a href=&#34;http://java.sun.com/products/jsp/&#34;&gt;JSP&lt;/a&gt; (а по принципу - и для каких-нибудь там Java Server Faces). Информации об этом действительно не так уж мало. Но тем не менее хотелось предложить для начала что-нибудь простенькое дабы развернуть тему.&lt;/p&gt;

&lt;p&gt;В качестве примера я решил взять свой немного хитрый, но зато относительно широко показывающий возможности тего-фабрицирования, тег.&lt;/p&gt;

&lt;p&gt;В качестве задачи нам требуется встроить в JSP возможность изменения стиля текста, обрамленного тегом, в зависимости от величины переданного значения. Яркий пример - отображение в таблице задач с небольшими приоритетами - курсивом, а задач с высокими приоритетами - жирным шрифтом, стиль задач с нормальным приоритетом при этом не меняется. Кроме того, требовалась возможность передать тегу запись CSS-стиля, поэтому спецификация тега получилась даже больше его реализации :).&lt;/p&gt;

&lt;p&gt;Что ж, посмотрим какие свойства должен иметь тег. У него, разумеется, должно быть тело, содержащее текст, подлежащий изменению стиля. У него должен быть обязательный атрибут со значением текущего уровня задачи и несколько необязательных (забитых дефолтовыми значениями) атрибутов - численное значение среднего уровня приоритета, стиль (по умолчанию, допустим, жирный) для значения с высоким приоритетом и стиль для значения с низким приоритетом.&lt;/p&gt;

&lt;p&gt;Спецификация получилась примерно такой:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
/**
 * @author uwilfred
 *
 * Adds priorityFontTag, specified in .tld as
 *      &amp;lt;prefix:priorityFont
 *      value = Integer       // priority value; if tag body not
                specified, also specifies the value
 *      [ level = Integer ]       // priority level to change the
                style on
 *      [ lowChange = String ]    // style description to apply
                if priority less than level (format listed below)
 *      [ highChange = String ]   // style description to apply
                if priority greater than level (format listed below)
 *      ( /&amp;gt; |
 *          body                  // value
 *      &amp;lt;/prefix:priorityFont&amp;gt; )  // may be empty tag,
                    so the value it taken from priority value parameter
 *
 *  default for highChange is “bold”
 *  default for lowChange is “italic”
 *  default for level is 3
 *
 *  Formats:
 *      bold                                  -&amp;gt; &amp;lt;strong&amp;gt;body&amp;lt;/strong&amp;gt;
 *      italic                                -&amp;gt; &amp;lt;em&amp;gt;body&amp;lt;/em&amp;gt;
 *      underline                             -&amp;gt; &amp;lt;u&amp;gt;body&amp;lt;/u&amp;gt;
 *      strike                                -&amp;gt; &amp;lt;strike&amp;gt;body&amp;lt;/strike&amp;gt;
 *      .&amp;lt;css-class&amp;gt;            .foo          -&amp;gt; &amp;lt;span class=”foo”&amp;gt;body&amp;lt;/span&amp;gt;
 *      {&amp;lt;css-style&amp;gt;; ...}      {font-weight: bold;} -&amp;gt; &amp;lt;span style=&amp;#34;font-weight: bold;&amp;#34;&amp;gt;body&amp;lt;/span&amp;gt;
 *      /&amp;lt;html-tag-name&amp;gt;    /foo              -&amp;gt; &amp;lt;foo&amp;gt;body&amp;lt;/foo&amp;gt;
 */

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;То есть за счёт всяких хитрых символов и алиасов я включил поддержку практически любых желаний пользователя :).&lt;/p&gt;

&lt;p&gt;В код класса тега я также включу XDoclet-теги по которым при необходимости можно будет сгенерировать запись в &lt;code&gt;.tld&lt;/code&gt;-шке.&lt;/p&gt;

&lt;p&gt;По спецификации, опишем тег в &lt;code&gt;.tld&lt;/code&gt;-файле - библиотеке тегов:&lt;/p&gt;
&lt;pre lang=&#34;xml&#34;&gt;&lt;code&gt;
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;!DOCTYPE taglib PUBLIC
    &amp;#34;-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN&amp;#34;
    &amp;#34;http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd&amp;#34;&amp;gt;
&amp;lt;taglib&amp;gt;
   &amp;lt;tlibversion&amp;gt;1.0&amp;lt;/tlibversion&amp;gt;
   &amp;lt;jspversion&amp;gt;1.1&amp;lt;/jspversion&amp;gt;
   &amp;lt;shortname&amp;gt;uwilfred&amp;lt;/shortname&amp;gt;

   &amp;lt;tag&amp;gt;

      &amp;lt;name&amp;gt;priorityFont&amp;lt;/name&amp;gt;
      &amp;lt;tagclass&amp;gt;org.individpro.uwilfred.tag.PriorityFontTag&amp;lt;/tagclass&amp;gt;
      &amp;lt;bodycontent&amp;gt;JSP&amp;lt;/bodycontent&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;value&amp;lt;/name&amp;gt;
         &amp;lt;required&amp;gt;true&amp;lt;/required&amp;gt;
         &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;
      &amp;lt;/attribute&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;highChange&amp;lt;/name&amp;gt;
         &amp;lt;required&amp;gt;false&amp;lt;/required&amp;gt;
      &amp;lt;/attribute&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;level&amp;lt;/name&amp;gt;
         &amp;lt;required&amp;gt;false&amp;lt;/required&amp;gt;
      &amp;lt;/attribute&amp;gt;

      &amp;lt;attribute&amp;gt;
         &amp;lt;name&amp;gt;lowChange&amp;lt;/name&amp;gt;
         &amp;lt;required&amp;gt;false&amp;lt;/required&amp;gt;
      &amp;lt;/attribute&amp;gt;

   &amp;lt;/tag&amp;gt;

&amp;lt;/taglib&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Значит тело нашего тега - это нечто, вычисляемое засчет JSP-кода (обычный текст на выходе дает текст), атрибут &lt;code&gt;value&lt;/code&gt; необходим и содержит выражение, все остальные атрибуты необязательны.&lt;/p&gt;

&lt;p&gt;Ну и сразу чтобы не тянуть - описываем класс тега:&lt;/p&gt;
&lt;pre lang=&#34;java&#34;&gt;&lt;code&gt;
package org.individpro.uwilfred.tag;

import java.io.IOException;
import javax.servlet.jsp.JspException;

import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.BodyContent;
import javax.servlet.jsp.tagext.BodyTagSupport;
import javax.servlet.jsp.tagext.Tag;

/**
 * @note adds specified-level style change support
 * @author uwilfred
 *
 * @jsp.tag
 *   name=&amp;#34;priorityFont&amp;#34;
 *   body-content=&amp;#34;JSP&amp;#34;
 */

public class PriorityFontTag extends BodyTagSupport implements Tag {

   private static final long serialVersionUID = -4941606719316390930L;

   private Integer value = -1;
   private Integer level = 3;
   private String lowChange = &amp;#34;bold&amp;#34;;
   private String highChange = &amp;#34;italic&amp;#34;;
   private String valueHtmlPrefix = &amp;#34;&amp;#34;;
   private String valueHtmlPostfix = &amp;#34;&amp;#34;;
   private String bodyTextContent = &amp;#34;&amp;#34;;

   // TODO: private final Map that will store the styles replacements,
   //       like &amp;#34;bold&amp;#34; -&amp;gt; &amp;#34;strong&amp;#34;, &amp;#34;italic&amp;#34; -&amp;gt; &amp;#34;em&amp;#34; &amp;amp; s.o.

   public void release() {
      value = -1;
      level = 3;
      lowChange = &amp;#34;bold&amp;#34;;
      highChange = &amp;#34;italic&amp;#34;;
      valueHtmlPrefix = &amp;#34;&amp;#34;;
      valueHtmlPostfix = &amp;#34;&amp;#34;;
      bodyTextContent = &amp;#34;&amp;#34;;
   }

   /**
    * any variable to take the priority from, also
    * recognized as value if no body specified, default -1
    */

   public Integer getValue() {
      return value;
   }

   /**
    * @jsp.attribute
    *   required=&amp;#34;true&amp;#34;
    *   rtexprvalue=&amp;#34;true&amp;#34;
    */

   public void setValue(Integer value) {
      this.value = value;
   }

   /**
    * style description to apply to the content with value higher
    *        than the level.
    *        supports: bold, italic, underline or any
                                        body-having html tag or css-style
    *            format: bold | italic | underline | strike
    *                .&amp;lt;CSS-class&amp;gt;
    *                {&amp;lt;CSS-Descriptors-Line&amp;gt;}
    *                :&amp;lt;HTML-Tag-Name&amp;gt;
    *        default: italic
    */

   public String getHighChange() {
      return highChange;
   }

   /**
    * @jsp.attribute
    *   required=&amp;#34;false&amp;#34;
    */

   public void setHighChange(String highChange) {
      this.highChange = highChange;
   }

   /**
    * level point to change the style, default is 3
    */

   public Integer getLevel() {
      return level;
   }

   /**
    * @jsp.attribute
    *   required=&amp;#34;false&amp;#34;
    */

   public void setLevel(Integer level) {
      this.level = level;
   }

   /**
    * style description to apply to the content with value lower
    *        than the level.
    *        supports: bold, italic, underline or any
                                    body-having html tag or css-style
    *            format: bold | italic | underline | strike
    *                .&amp;lt;CSS-class&amp;gt;
    *                {&amp;lt;CSS-Descriptors-Line&amp;gt;}
    *                :&amp;lt;HTML-Tag-Name&amp;gt;
    *        default: italic
    */

   public String getLowChange() {
      return lowChange;
   }

   /**
    * @jsp.attribute
    *   required=&amp;#34;false&amp;#34;
    */

   public void setLowChange(String lowChange) {
      this.lowChange = lowChange;
   }

   public int doStartTag() throws JspException {
      return EVAL_BODY_BUFFERED;
   }

   public int doAfterBody() throws JspException {
      try {
         BodyContent bodyContent = getBodyContent();
         if (bodyContent == null) {
            bodyTextContent = value.toString();
         } else {
            bodyTextContent = bodyContent.getString();
            if (bodyTextContent == null) {
               bodyTextContent = value.toString();
            }
         }
      } catch (NumberFormatException nfe) {
         nfe.printStackTrace();
         throw new JspException(&amp;#34;jbpm:priorityFont
                        tag body couldn&amp;#39;t be parsed&amp;#34;, nfe);
      }
      return SKIP_BODY;
   }

   public int doEndTag() throws JspException {
      if (value == Integer.valueOf(-1)) {
         throw new JspException(&amp;#34;jbpm:priorityFont tag requires
                  the body xor the value parameter to
                  be specified (also, negative values are unsupported)&amp;#34;);
      }
      try {
         JspWriter jspOut = pageContext.getOut();
         String modificator =
                  (value &amp;lt; level) ? lowChange :
                           ((value &amp;gt; level) ? highChange : &amp;#34;&amp;#34;);
         if (modificator.equalsIgnoreCase(&amp;#34;bold&amp;#34;)) {
            valueHtmlPrefix = &amp;#34;&amp;lt;strong&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/strong&amp;gt;&amp;#34;;
         } else if (modificator.equalsIgnoreCase(&amp;#34;italic&amp;#34;)) {
            valueHtmlPrefix = &amp;#34;&amp;lt;em&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/em&amp;gt;&amp;#34;;
         } else if (modificator.equalsIgnoreCase(&amp;#34;underline&amp;#34;)) {
            valueHtmlPrefix = &amp;#34;&amp;lt;u&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/u&amp;gt;&amp;#34;;
         } else if (modificator.equalsIgnoreCase(&amp;#34;strike&amp;#34;)) {
            valueHtmlPrefix = &amp;#34;&amp;lt;strike&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/strike&amp;gt;&amp;#34;;
         } else if ((modificator.length() &amp;gt; 1) &amp;amp;&amp;amp;
                                       (modificator.charAt(0) == &amp;#39;.&amp;#39;)) {
            // CSS existing style specify
            valueHtmlPrefix = &amp;#34;&amp;lt;span class=\&amp;#34;&amp;#34; + modificator.substring(1) + &amp;#34;\&amp;#34;&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/span&amp;gt;&amp;#34;;
         } else if ((modificator.length() &amp;gt; 1) &amp;amp;&amp;amp;
                                       (modificator.charAt(0) == &amp;#39;/&amp;#39;)) {
            // HTML tag redefine
            valueHtmlPrefix = &amp;#34;&amp;lt;&amp;#34; + modificator.substring(1) + &amp;#34;&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/&amp;#34; + modificator.substring(1) + &amp;#34;&amp;gt;&amp;#34;;
         } else if ((modificator.length() &amp;gt; 2) &amp;amp;&amp;amp;
                (modificator.charAt(0) == &amp;#39;{&amp;#39;) &amp;amp;&amp;amp;
                (modificator.charAt(modificator.length() - 1) == &amp;#39;}&amp;#39;)) {
            // CSS style line
            valueHtmlPrefix = &amp;#34;&amp;lt;span style=\&amp;#34;&amp;#34; +
                   modificator.substring(1, modificator.length() - 1)
                   + &amp;#34;\&amp;#34;&amp;gt;&amp;#34;;
            valueHtmlPostfix = &amp;#34;&amp;lt;/span&amp;gt;&amp;#34;;
         } else if (modificator.length() &amp;gt; 0) {
             throw new JspException (&amp;#34;jbpm:priorityFont tag parameters
                    values couldn&amp;#39;t be parsed&amp;#34;);
         }
         jspOut.print(valueHtmlPrefix + bodyTextContent +
               valueHtmlPostfix);
      } catch (NumberFormatException nfe) {
         nfe.printStackTrace();
         throw new JspException(&amp;#34;jbpm:priorityFont tag parameters
                        couldn&amp;#39;t be parsed&amp;#34;, nfe);
      } catch (IOException ioe) {
         ioe.printStackTrace();
         throw new JspException(&amp;#34;jbpm:priorityFont tag parameters
                        couldn&amp;#39;t be parsed&amp;#34;, ioe);
      }
      release();
      return EVAL_PAGE;
   }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Наследуя тег от класса &lt;code&gt;BodyTagSupport&lt;/code&gt; мы подразумевали, что у тега будет тело. Очистка значений происходит в методе &lt;code&gt;release()&lt;/code&gt;, значения атрибутов устанавливаются в скомпилированной JSP - HTTP-сервлете - засчет аксессоров. Методы &lt;code&gt;doStartTag()&lt;/code&gt;, &lt;code&gt;doAfterBody()&lt;/code&gt; и &lt;code&gt;doEndTag()&lt;/code&gt; перегружены от родителя (и имплементят соответствующие методы интерфейса &lt;code&gt;Tag&lt;/code&gt;) и вызываются в указанном порядке - после обработки открывающего тега, после обработки тела и после обработки закрывающего тега соответственно.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;doStartTag()&lt;/code&gt; возвращает константу &lt;code&gt;EVAL_BODY_BUFFERED&lt;/code&gt; (вычислить тело в буфере), которая указывает, что тело тега надо вычислить. &lt;code&gt;doAfterBody()&lt;/code&gt; забивает &lt;code&gt;body&lt;/code&gt; значением из &lt;code&gt;value&lt;/code&gt; если тело тега отсутствует - и возвращает &lt;code&gt;SKIP_BODY&lt;/code&gt; (пропустить тело) дабы тело тега не попало в выходной HTML-код без соответствующей обработки. &lt;code&gt;doEndTag()&lt;/code&gt; делает самое главное - на основе значения и установок атрибутов генерирует выходной HTML-код, делает &lt;code&gt;release()&lt;/code&gt; (иначе значения атрибутов сохранятся для последующих тегов) и возвращает &lt;code&gt;EVAL_PAGE&lt;/code&gt; (вычислить страницу) чтобы компилятор JSP (&lt;code&gt;jasper&lt;/code&gt;) по цепочке пошел дальше по тексту страницы.&lt;/p&gt;

&lt;p&gt;Если бы наш тег не должен был быть иметь тела (&lt;code&gt;empty&lt;/code&gt; в &lt;code&gt;.tld&lt;/code&gt;) - то мы бы наследовали его от &lt;code&gt;javax.servlet.tagext.TagSupport&lt;/code&gt; (который по аналогичным причинам и является родителем &lt;code&gt;BodyTagSupport&lt;/code&gt;) и по сути не должны были бы имплементить ничего кроме методов &lt;code&gt;release()&lt;/code&gt; и &lt;code&gt;doEntTag()&lt;/code&gt; (который возвращал бы &lt;code&gt;EVAL_PAGE&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Ну и посмотрим на использование тега:&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;
&amp;lt;%@ taglib uri=&amp;#34;/WEB-INF/uwilfred.tld&amp;#34; prefix=&amp;#34;uwilfred&amp;#34; %&amp;gt;...
&amp;lt;html&amp;gt;&amp;lt;%
...
%&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;style&amp;gt;

   .priorityHigh {
      font-color: #f00;
      font-weight: bold;
      border: 1px solid #333;
   }

   .priorityLow {
      font-color: #00f;
      font-style: italic;
      border: 1px dotted #999;
   }

   &amp;lt;/style&amp;gt;

   &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=UTF-8&amp;#34;&amp;gt;
   &amp;lt;title&amp;gt;Test priorityFont Tag&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body class=&amp;#34;layout&amp;#34;&amp;gt;

   &amp;lt;c:forEach items=&amp;#34;${model.tasks}&amp;#34; var=&amp;#34;task&amp;#34; varStatus=&amp;#34;status&amp;#34;&amp;gt;
      &amp;lt;uwilfred:priorityFont value=&amp;#34;${task.priority}&amp;#34;&amp;gt;
            &amp;lt;a href=&amp;#34;taskinfo.htm?id=&amp;lt;c:out value=&amp;#34;${task.id}&amp;#34;/&amp;gt;&amp;#34;&amp;gt;
                  &amp;lt;c:out value=&amp;#34;${task.name}&amp;#34;/&amp;gt;
            &amp;lt;/a&amp;gt;
      &amp;lt;/uwilfred:priorityFont&amp;gt;
   &amp;lt;/c:forEach&amp;gt;

   &amp;lt;%-- is identical to: --%&amp;gt;

   &amp;lt;c:forEach items=&amp;#34;${model.tasks}&amp;#34; var=&amp;#34;task&amp;#34; varStatus=&amp;#34;status&amp;#34;&amp;gt;
      &amp;lt;uwilfred:priorityFont value=&amp;#34;${task.priority}&amp;#34; level=&amp;#34;3&amp;#34;
              highChange=&amp;#34;bold&amp;#34; lowChange=&amp;#34;italic&amp;#34;&amp;gt;
         &amp;lt;a href=&amp;#34;taskinfo.htm?id=&amp;lt;c:out value=&amp;#34;${task.id}&amp;#34;/&amp;gt;&amp;#34;&amp;gt;
            &amp;lt;c:out value=&amp;#34;${task.name}&amp;#34;/&amp;gt;
         &amp;lt;/a&amp;gt;
      &amp;lt;/uwilfred:priorityFont&amp;gt;
   &amp;lt;/c:forEach&amp;gt;

   &amp;lt;%-- different variants: --%&amp;gt;

   &amp;lt;uwilfred:priorityFont value=&amp;#34;${someValue}&amp;#34;
            highChange=&amp;#34;{font-color: #f00; font-weight: bold;}&amp;#34;
            lowChange=&amp;#34;{font-color: #00f; font-style: italic;}&amp;#34;&amp;gt;
                  BlahByCSSInline
   &amp;lt;/uwilfred:priorityFont&amp;gt;

   &amp;lt;uwilfred:priorityFont value=&amp;#34;${someValue}&amp;#34;
                                    highChange=&amp;#34;.priorityHigh&amp;#34;
                                    lowChange=&amp;#34;.priorityLow&amp;#34;&amp;gt;
         BlahByCSSExistentClass
   &amp;lt;/uwilfred:priorityFont&amp;gt;

   &amp;lt;uwilfred:priorityFont value=&amp;#34;${someValue}&amp;#34;
               highChange=&amp;#34;:strong&amp;#34;
               lowChange=&amp;#34;:em&amp;#34;&amp;gt;
         BlahByTagRedefine
   &amp;lt;/uwilfred:priorityFont&amp;gt;

&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;</content>
            </entry>
        
    </feed>
